
USB_Prueb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08008628  08008628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800871c  0800871c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800871c  0800871c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800871c  0800871c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008720  08008720  00018720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b4  200001e0  08008904  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08008904  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a8d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000325c  00000000  00000000  00037c96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003aef8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003c168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000177b3  00000000  00000000  0003d270  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001017f  00000000  00000000  00054a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007749f  00000000  00000000  00064ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc041  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  000dc0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008610 	.word	0x08008610

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008610 	.word	0x08008610

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fcc5 	bl	8000ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8ed 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa91 	bl	8000680 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f007 f985 	bl	800746c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000162:	f000 f97d 	bl	8000460 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000166:	f000 f9f1 	bl	800054c <MX_TIM3_Init>
  MX_TIM4_Init();
 800016a:	f000 fa3b 	bl	80005e4 <MX_TIM4_Init>
  MX_I2C2_Init();
 800016e:	f000 f949 	bl	8000404 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000172:	f000 f93a 	bl	80003ea <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(1000);
 8000176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800017a:	f000 fd13 	bl	8000ba4 <HAL_Delay>
	  	CDC_tx_size=sprintf(CDC_tx_buff,"Inciando:\r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800017e:	4a60      	ldr	r2, [pc, #384]	; (8000300 <main+0x1b4>)
 8000180:	4b60      	ldr	r3, [pc, #384]	; (8000304 <main+0x1b8>)
 8000182:	4614      	mov	r4, r2
 8000184:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000186:	6020      	str	r0, [r4, #0]
 8000188:	6061      	str	r1, [r4, #4]
 800018a:	60a2      	str	r2, [r4, #8]
 800018c:	230b      	movs	r3, #11
 800018e:	b2da      	uxtb	r2, r3
 8000190:	4b5d      	ldr	r3, [pc, #372]	; (8000308 <main+0x1bc>)
 8000192:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000194:	4b5c      	ldr	r3, [pc, #368]	; (8000308 <main+0x1bc>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	b29b      	uxth	r3, r3
 800019a:	4619      	mov	r1, r3
 800019c:	4858      	ldr	r0, [pc, #352]	; (8000300 <main+0x1b4>)
 800019e:	f007 fa29 	bl	80075f4 <CDC_Transmit_FS>
		if (HAL_I2C_IsDeviceReady(&hi2c2,ADDR_DIS_1<<1,1,1) != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001a2:	2301      	movs	r3, #1
 80001a4:	2201      	movs	r2, #1
 80001a6:	21e0      	movs	r1, #224	; 0xe0
 80001a8:	4858      	ldr	r0, [pc, #352]	; (800030c <main+0x1c0>)
 80001aa:	f001 fe27 	bl	8001dfc <HAL_I2C_IsDeviceReady>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d077      	beq.n	80002a4 <main+0x158>
		{
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_DIS_1<<1, DISTANCE_ADDR1, 1, 100);
 80001b4:	2364      	movs	r3, #100	; 0x64
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	2301      	movs	r3, #1
 80001ba:	225e      	movs	r2, #94	; 0x5e
 80001bc:	21e0      	movs	r1, #224	; 0xe0
 80001be:	4853      	ldr	r0, [pc, #332]	; (800030c <main+0x1c0>)
 80001c0:	f001 f8ba 	bl	8001338 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_DIS_1<<1,&datai2c[0], 1, 100);
 80001c4:	2364      	movs	r3, #100	; 0x64
 80001c6:	9300      	str	r3, [sp, #0]
 80001c8:	2301      	movs	r3, #1
 80001ca:	4a51      	ldr	r2, [pc, #324]	; (8000310 <main+0x1c4>)
 80001cc:	21e0      	movs	r1, #224	; 0xe0
 80001ce:	484f      	ldr	r0, [pc, #316]	; (800030c <main+0x1c0>)
 80001d0:	f001 f9b0 	bl	8001534 <HAL_I2C_Master_Receive>
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_DIS_1<<1, DISTANCE_ADDR2, 1, 100);
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	9300      	str	r3, [sp, #0]
 80001d8:	2301      	movs	r3, #1
 80001da:	225f      	movs	r2, #95	; 0x5f
 80001dc:	21e0      	movs	r1, #224	; 0xe0
 80001de:	484b      	ldr	r0, [pc, #300]	; (800030c <main+0x1c0>)
 80001e0:	f001 f8aa 	bl	8001338 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_DIS_1<<1,&datai2c[1], 1, 100);
 80001e4:	2364      	movs	r3, #100	; 0x64
 80001e6:	9300      	str	r3, [sp, #0]
 80001e8:	2301      	movs	r3, #1
 80001ea:	4a4a      	ldr	r2, [pc, #296]	; (8000314 <main+0x1c8>)
 80001ec:	21e0      	movs	r1, #224	; 0xe0
 80001ee:	4847      	ldr	r0, [pc, #284]	; (800030c <main+0x1c0>)
 80001f0:	f001 f9a0 	bl	8001534 <HAL_I2C_Master_Receive>
			distance_cm = (datai2c[0]*16+datai2c[1])/64;//calculo de distancia
 80001f4:	4b46      	ldr	r3, [pc, #280]	; (8000310 <main+0x1c4>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	011b      	lsls	r3, r3, #4
 80001fa:	4a45      	ldr	r2, [pc, #276]	; (8000310 <main+0x1c4>)
 80001fc:	7852      	ldrb	r2, [r2, #1]
 80001fe:	4413      	add	r3, r2
 8000200:	2b00      	cmp	r3, #0
 8000202:	da00      	bge.n	8000206 <main+0xba>
 8000204:	333f      	adds	r3, #63	; 0x3f
 8000206:	119b      	asrs	r3, r3, #6
 8000208:	b2da      	uxtb	r2, r3
 800020a:	4b43      	ldr	r3, [pc, #268]	; (8000318 <main+0x1cc>)
 800020c:	701a      	strb	r2, [r3, #0]
			CDC_tx_size=sprintf(CDC_tx_buff,"distancia1 %02X\n\r",distance_cm);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800020e:	4b42      	ldr	r3, [pc, #264]	; (8000318 <main+0x1cc>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	461a      	mov	r2, r3
 8000214:	4941      	ldr	r1, [pc, #260]	; (800031c <main+0x1d0>)
 8000216:	483a      	ldr	r0, [pc, #232]	; (8000300 <main+0x1b4>)
 8000218:	f007 fde8 	bl	8007dec <siprintf>
 800021c:	4603      	mov	r3, r0
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b39      	ldr	r3, [pc, #228]	; (8000308 <main+0x1bc>)
 8000222:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000224:	4b38      	ldr	r3, [pc, #224]	; (8000308 <main+0x1bc>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b29b      	uxth	r3, r3
 800022a:	4619      	mov	r1, r3
 800022c:	4834      	ldr	r0, [pc, #208]	; (8000300 <main+0x1b4>)
 800022e:	f007 f9e1 	bl	80075f4 <CDC_Transmit_FS>
			result=HAL_I2C_Mem_Read(&hi2c2,ADDR_DIS_1<<1,SHIFT_ADDR,I2C_MEMADD_SIZE_8BIT,&data,1,100);
 8000232:	2364      	movs	r3, #100	; 0x64
 8000234:	9302      	str	r3, [sp, #8]
 8000236:	2301      	movs	r3, #1
 8000238:	9301      	str	r3, [sp, #4]
 800023a:	4b39      	ldr	r3, [pc, #228]	; (8000320 <main+0x1d4>)
 800023c:	9300      	str	r3, [sp, #0]
 800023e:	2301      	movs	r3, #1
 8000240:	2235      	movs	r2, #53	; 0x35
 8000242:	21e0      	movs	r1, #224	; 0xe0
 8000244:	4831      	ldr	r0, [pc, #196]	; (800030c <main+0x1c0>)
 8000246:	f001 fba3 	bl	8001990 <HAL_I2C_Mem_Read>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	4b35      	ldr	r3, [pc, #212]	; (8000324 <main+0x1d8>)
 8000250:	701a      	strb	r2, [r3, #0]
			if(result!=HAL_OK){
 8000252:	4b34      	ldr	r3, [pc, #208]	; (8000324 <main+0x1d8>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d012      	beq.n	8000280 <main+0x134>
				CDC_tx_size=sprintf(CDC_tx_buff,"Paila %d\n\r",result);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800025a:	4b32      	ldr	r3, [pc, #200]	; (8000324 <main+0x1d8>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	461a      	mov	r2, r3
 8000260:	4931      	ldr	r1, [pc, #196]	; (8000328 <main+0x1dc>)
 8000262:	4827      	ldr	r0, [pc, #156]	; (8000300 <main+0x1b4>)
 8000264:	f007 fdc2 	bl	8007dec <siprintf>
 8000268:	4603      	mov	r3, r0
 800026a:	b2da      	uxtb	r2, r3
 800026c:	4b26      	ldr	r3, [pc, #152]	; (8000308 <main+0x1bc>)
 800026e:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000270:	4b25      	ldr	r3, [pc, #148]	; (8000308 <main+0x1bc>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b29b      	uxth	r3, r3
 8000276:	4619      	mov	r1, r3
 8000278:	4821      	ldr	r0, [pc, #132]	; (8000300 <main+0x1b4>)
 800027a:	f007 f9bb 	bl	80075f4 <CDC_Transmit_FS>
 800027e:	e011      	b.n	80002a4 <main+0x158>

			}else{
				CDC_tx_size=sprintf(CDC_tx_buff,"distancia2 %02X\n\r",data);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 8000280:	4b27      	ldr	r3, [pc, #156]	; (8000320 <main+0x1d4>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	461a      	mov	r2, r3
 8000286:	4929      	ldr	r1, [pc, #164]	; (800032c <main+0x1e0>)
 8000288:	481d      	ldr	r0, [pc, #116]	; (8000300 <main+0x1b4>)
 800028a:	f007 fdaf 	bl	8007dec <siprintf>
 800028e:	4603      	mov	r3, r0
 8000290:	b2da      	uxtb	r2, r3
 8000292:	4b1d      	ldr	r3, [pc, #116]	; (8000308 <main+0x1bc>)
 8000294:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <main+0x1bc>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	b29b      	uxth	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	4818      	ldr	r0, [pc, #96]	; (8000300 <main+0x1b4>)
 80002a0:	f007 f9a8 	bl	80075f4 <CDC_Transmit_FS>
			}
		}
		if (HAL_I2C_IsDeviceReady(&hi2c2,ADDR_MPU<<1,1,1) != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80002a4:	2301      	movs	r3, #1
 80002a6:	2201      	movs	r2, #1
 80002a8:	21d0      	movs	r1, #208	; 0xd0
 80002aa:	4818      	ldr	r0, [pc, #96]	; (800030c <main+0x1c0>)
 80002ac:	f001 fda6 	bl	8001dfc <HAL_I2C_IsDeviceReady>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f43f af5f 	beq.w	8000176 <main+0x2a>
				{
					HAL_I2C_Master_Transmit(&hi2c2,ADDR_MPU<<1,ACCEL_XOUT_H , 1, 100);
 80002b8:	2364      	movs	r3, #100	; 0x64
 80002ba:	9300      	str	r3, [sp, #0]
 80002bc:	2301      	movs	r3, #1
 80002be:	223b      	movs	r2, #59	; 0x3b
 80002c0:	21d0      	movs	r1, #208	; 0xd0
 80002c2:	4812      	ldr	r0, [pc, #72]	; (800030c <main+0x1c0>)
 80002c4:	f001 f838 	bl	8001338 <HAL_I2C_Master_Transmit>
					HAL_I2C_Master_Receive(&hi2c2,ADDR_MPU<<1,&datai2c[0], 1, 100);
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <main+0x1c4>)
 80002d0:	21d0      	movs	r1, #208	; 0xd0
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x1c0>)
 80002d4:	f001 f92e 	bl	8001534 <HAL_I2C_Master_Receive>
					CDC_tx_size=sprintf(CDC_tx_buff,"mpu %02X\n\r",datai2c[0]);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0x1c4>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	461a      	mov	r2, r3
 80002de:	4914      	ldr	r1, [pc, #80]	; (8000330 <main+0x1e4>)
 80002e0:	4807      	ldr	r0, [pc, #28]	; (8000300 <main+0x1b4>)
 80002e2:	f007 fd83 	bl	8007dec <siprintf>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b07      	ldr	r3, [pc, #28]	; (8000308 <main+0x1bc>)
 80002ec:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <main+0x1bc>)
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	4619      	mov	r1, r3
 80002f6:	4802      	ldr	r0, [pc, #8]	; (8000300 <main+0x1b4>)
 80002f8:	f007 f97c 	bl	80075f4 <CDC_Transmit_FS>
		HAL_Delay(1000);
 80002fc:	e73b      	b.n	8000176 <main+0x2a>
 80002fe:	bf00      	nop
 8000300:	200004c4 	.word	0x200004c4
 8000304:	08008628 	.word	0x08008628
 8000308:	20000540 	.word	0x20000540
 800030c:	20000470 	.word	0x20000470
 8000310:	20000544 	.word	0x20000544
 8000314:	20000545 	.word	0x20000545
 8000318:	20000588 	.word	0x20000588
 800031c:	08008634 	.word	0x08008634
 8000320:	20000541 	.word	0x20000541
 8000324:	20000546 	.word	0x20000546
 8000328:	08008648 	.word	0x08008648
 800032c:	08008654 	.word	0x08008654
 8000330:	08008668 	.word	0x08008668

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b094      	sub	sp, #80	; 0x50
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f007 fd4a 	bl	8007ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
 8000350:	605a      	str	r2, [r3, #4]
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	60da      	str	r2, [r3, #12]
 8000356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000364:	2301      	movs	r3, #1
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000372:	2301      	movs	r3, #1
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000376:	2302      	movs	r3, #2
 8000378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800037e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000384:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038a:	4618      	mov	r0, r3
 800038c:	f003 f912 	bl	80035b4 <HAL_RCC_OscConfig>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000396:	f000 f9cb 	bl	8000730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039a:	230f      	movs	r3, #15
 800039c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039e:	2302      	movs	r3, #2
 80003a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003b0:	f107 0314 	add.w	r3, r7, #20
 80003b4:	2101      	movs	r1, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f003 fb7c 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003c2:	f000 f9b5 	bl	8000730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003c6:	2310      	movs	r3, #16
 80003c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80003ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80003ce:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fcf6 	bl	8003dc4 <HAL_RCCEx_PeriphCLKConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003de:	f000 f9a7 	bl	8000730 <Error_Handler>
  }
}
 80003e2:	bf00      	nop
 80003e4:	3750      	adds	r7, #80	; 0x50
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}

080003ea <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	2100      	movs	r1, #0
 80003f2:	2014      	movs	r0, #20
 80003f4:	f000 fccf 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80003f8:	2014      	movs	r0, #20
 80003fa:	f000 fce8 	bl	8000dce <HAL_NVIC_EnableIRQ>
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
	...

08000404 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000408:	4b12      	ldr	r3, [pc, #72]	; (8000454 <MX_I2C2_Init+0x50>)
 800040a:	4a13      	ldr	r2, [pc, #76]	; (8000458 <MX_I2C2_Init+0x54>)
 800040c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800040e:	4b11      	ldr	r3, [pc, #68]	; (8000454 <MX_I2C2_Init+0x50>)
 8000410:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_I2C2_Init+0x58>)
 8000412:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <MX_I2C2_Init+0x50>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <MX_I2C2_Init+0x50>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <MX_I2C2_Init+0x50>)
 8000422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000426:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <MX_I2C2_Init+0x50>)
 800042a:	2200      	movs	r2, #0
 800042c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <MX_I2C2_Init+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000434:	4b07      	ldr	r3, [pc, #28]	; (8000454 <MX_I2C2_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043a:	4b06      	ldr	r3, [pc, #24]	; (8000454 <MX_I2C2_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <MX_I2C2_Init+0x50>)
 8000442:	f000 fe51 	bl	80010e8 <HAL_I2C_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800044c:	f000 f970 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000470 	.word	0x20000470
 8000458:	40005800 	.word	0x40005800
 800045c:	000186a0 	.word	0x000186a0

08000460 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b08e      	sub	sp, #56	; 0x38
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000474:	f107 0320 	add.w	r3, r7, #32
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]
 800048e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000490:	4b2d      	ldr	r3, [pc, #180]	; (8000548 <MX_TIM2_Init+0xe8>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 8000498:	4b2b      	ldr	r3, [pc, #172]	; (8000548 <MX_TIM2_Init+0xe8>)
 800049a:	2230      	movs	r2, #48	; 0x30
 800049c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b2a      	ldr	r3, [pc, #168]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80004a4:	4b28      	ldr	r3, [pc, #160]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004a6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80004aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b26      	ldr	r3, [pc, #152]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004b2:	4b25      	ldr	r3, [pc, #148]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004b4:	2280      	movs	r2, #128	; 0x80
 80004b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004b8:	4823      	ldr	r0, [pc, #140]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004ba:	f003 fd39 	bl	8003f30 <HAL_TIM_Base_Init>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004c4:	f000 f934 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d2:	4619      	mov	r1, r3
 80004d4:	481c      	ldr	r0, [pc, #112]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004d6:	f003 ff59 	bl	800438c <HAL_TIM_ConfigClockSource>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004e0:	f000 f926 	bl	8000730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004e4:	4818      	ldr	r0, [pc, #96]	; (8000548 <MX_TIM2_Init+0xe8>)
 80004e6:	f003 fd4e 	bl	8003f86 <HAL_TIM_PWM_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80004f0:	f000 f91e 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f4:	2300      	movs	r3, #0
 80004f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f8:	2300      	movs	r3, #0
 80004fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004fc:	f107 0320 	add.w	r3, r7, #32
 8000500:	4619      	mov	r1, r3
 8000502:	4811      	ldr	r0, [pc, #68]	; (8000548 <MX_TIM2_Init+0xe8>)
 8000504:	f004 faa6 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800050e:	f000 f90f 	bl	8000730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000512:	2360      	movs	r3, #96	; 0x60
 8000514:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 8000516:	f44f 7361 	mov.w	r3, #900	; 0x384
 800051a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000524:	1d3b      	adds	r3, r7, #4
 8000526:	2200      	movs	r2, #0
 8000528:	4619      	mov	r1, r3
 800052a:	4807      	ldr	r0, [pc, #28]	; (8000548 <MX_TIM2_Init+0xe8>)
 800052c:	f003 fe68 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000536:	f000 f8fb 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800053a:	4803      	ldr	r0, [pc, #12]	; (8000548 <MX_TIM2_Init+0xe8>)
 800053c:	f000 f9cc 	bl	80008d8 <HAL_TIM_MspPostInit>

}
 8000540:	bf00      	nop
 8000542:	3738      	adds	r7, #56	; 0x38
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000548 	.word	0x20000548

0800054c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000560:	463b      	mov	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <MX_TIM3_Init+0x90>)
 800056a:	4a1d      	ldr	r2, [pc, #116]	; (80005e0 <MX_TIM3_Init+0x94>)
 800056c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800056e:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_TIM3_Init+0x90>)
 8000570:	2200      	movs	r2, #0
 8000572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_TIM3_Init+0x90>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_TIM3_Init+0x90>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_TIM3_Init+0x90>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_TIM3_Init+0x90>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_TIM3_Init+0x90>)
 800058e:	f003 fccf 	bl	8003f30 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000598:	f000 f8ca 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_TIM3_Init+0x90>)
 80005aa:	f003 feef 	bl	800438c <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80005b4:	f000 f8bc 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_TIM3_Init+0x90>)
 80005c6:	f004 fa45 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80005d0:	f000 f8ae 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000500 	.word	0x20000500
 80005e0:	40000400 	.word	0x40000400

080005e4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000600:	4b1d      	ldr	r3, [pc, #116]	; (8000678 <MX_TIM4_Init+0x94>)
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_TIM4_Init+0x98>)
 8000604:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_TIM4_Init+0x94>)
 8000608:	2230      	movs	r2, #48	; 0x30
 800060a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_TIM4_Init+0x94>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 8000612:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_TIM4_Init+0x94>)
 8000614:	f247 5230 	movw	r2, #30000	; 0x7530
 8000618:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_TIM4_Init+0x94>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_TIM4_Init+0x94>)
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000626:	4814      	ldr	r0, [pc, #80]	; (8000678 <MX_TIM4_Init+0x94>)
 8000628:	f003 fc82 	bl	8003f30 <HAL_TIM_Base_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000632:	f000 f87d 	bl	8000730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800063c:	f107 0308 	add.w	r3, r7, #8
 8000640:	4619      	mov	r1, r3
 8000642:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_TIM4_Init+0x94>)
 8000644:	f003 fea2 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800064e:	f000 f86f 	bl	8000730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000656:	2300      	movs	r3, #0
 8000658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <MX_TIM4_Init+0x94>)
 8000660:	f004 f9f8 	bl	8004a54 <HAL_TIMEx_MasterConfigSynchronization>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800066a:	f000 f861 	bl	8000730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000042c 	.word	0x2000042c
 800067c:	40000800 	.word	0x40000800

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	4b24      	ldr	r3, [pc, #144]	; (8000728 <MX_GPIO_Init+0xa8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a23      	ldr	r2, [pc, #140]	; (8000728 <MX_GPIO_Init+0xa8>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0310 	and.w	r3, r3, #16
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006b2:	f043 0320 	orr.w	r3, r3, #32
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0320 	and.w	r3, r3, #32
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_GPIO_Init+0xa8>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <MX_GPIO_Init+0xac>)
 80006fc:	f000 fcdc 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2301      	movs	r3, #1
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2302      	movs	r3, #2
 8000710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_GPIO_Init+0xac>)
 800071a:	f000 fb73 	bl	8000e04 <HAL_GPIO_Init>

}
 800071e:	bf00      	nop
 8000720:	3720      	adds	r7, #32
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40011000 	.word	0x40011000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	bc80      	pop	{r7}
 800073a:	4770      	bx	lr

0800073c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <HAL_MspInit+0x6c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <HAL_MspInit+0x6c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_MspInit+0x6c>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_MspInit+0x6c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <HAL_MspInit+0x6c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <HAL_MspInit+0x6c>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2005      	movs	r0, #5
 8000778:	f000 fb0d 	bl	8000d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800077c:	2005      	movs	r0, #5
 800077e:	f000 fb26 	bl	8000dce <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_MspInit+0x70>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_MspInit+0x70>)
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40010000 	.word	0x40010000

080007b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b088      	sub	sp, #32
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_I2C_MspInit+0x74>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d124      	bne.n	800081a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <HAL_I2C_MspInit+0x78>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a14      	ldr	r2, [pc, #80]	; (8000828 <HAL_I2C_MspInit+0x78>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_I2C_MspInit+0x78>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0308 	and.w	r3, r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ee:	2312      	movs	r3, #18
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0310 	add.w	r3, r7, #16
 80007fa:	4619      	mov	r1, r3
 80007fc:	480b      	ldr	r0, [pc, #44]	; (800082c <HAL_I2C_MspInit+0x7c>)
 80007fe:	f000 fb01 	bl	8000e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_I2C_MspInit+0x78>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	4a08      	ldr	r2, [pc, #32]	; (8000828 <HAL_I2C_MspInit+0x78>)
 8000808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080c:	61d3      	str	r3, [r2, #28]
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <HAL_I2C_MspInit+0x78>)
 8000810:	69db      	ldr	r3, [r3, #28]
 8000812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3720      	adds	r7, #32
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40005800 	.word	0x40005800
 8000828:	40021000 	.word	0x40021000
 800082c:	40010c00 	.word	0x40010c00

08000830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000840:	d114      	bne.n	800086c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	201c      	movs	r0, #28
 8000860:	f000 fa99 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000864:	201c      	movs	r0, #28
 8000866:	f000 fab2 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800086a:	e02a      	b.n	80008c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_TIM_Base_MspInit+0xa0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10c      	bne.n	8000890 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	4a14      	ldr	r2, [pc, #80]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	61d3      	str	r3, [r2, #28]
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 8000884:	69db      	ldr	r3, [r3, #28]
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
}
 800088e:	e018      	b.n	80008c2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <HAL_TIM_Base_MspInit+0xa4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d113      	bne.n	80008c2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 800089c:	69db      	ldr	r3, [r3, #28]
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	61d3      	str	r3, [r2, #28]
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_TIM_Base_MspInit+0x9c>)
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	201e      	movs	r0, #30
 80008b8:	f000 fa6d 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008bc:	201e      	movs	r0, #30
 80008be:	f000 fa86 	bl	8000dce <HAL_NVIC_EnableIRQ>
}
 80008c2:	bf00      	nop
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40000400 	.word	0x40000400
 80008d4:	40000800 	.word	0x40000800

080008d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f6:	d117      	bne.n	8000928 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Motor_1_Pin;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Motor_1_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <HAL_TIM_MspPostInit+0x5c>)
 8000924:	f000 fa6e 	bl	8000e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <HardFault_Handler+0x4>

0800094a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <BusFault_Handler+0x4>

08000956 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f8f2 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800099c:	4802      	ldr	r0, [pc, #8]	; (80009a8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800099e:	f002 f82e 	bl	80029fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20001224 	.word	0x20001224

080009ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <TIM2_IRQHandler+0x10>)
 80009b2:	f003 fb1c 	bl	8003fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000548 	.word	0x20000548

080009c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <TIM4_IRQHandler+0x10>)
 80009c6:	f003 fb12 	bl	8003fee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000042c 	.word	0x2000042c

080009d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <_sbrk+0x50>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d102      	bne.n	80009ea <_sbrk+0x16>
		heap_end = &end;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <_sbrk+0x50>)
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <_sbrk+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <_sbrk+0x50>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <_sbrk+0x50>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	466a      	mov	r2, sp
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d907      	bls.n	8000a0e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80009fe:	f007 f9c3 	bl	8007d88 <__errno>
 8000a02:	4602      	mov	r2, r0
 8000a04:	230c      	movs	r3, #12
 8000a06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	e006      	b.n	8000a1c <_sbrk+0x48>
	}

	heap_end += incr;
 8000a0e:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <_sbrk+0x50>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <_sbrk+0x50>)
 8000a18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3710      	adds	r7, #16
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200001fc 	.word	0x200001fc
 8000a28:	20001498 	.word	0x20001498

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <SystemInit+0x5c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <SystemInit+0x5c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x5c>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <SystemInit+0x5c>)
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SystemInit+0x60>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x5c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <SystemInit+0x5c>)
 8000a4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0x5c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SystemInit+0x5c>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SystemInit+0x5c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <SystemInit+0x5c>)
 8000a6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SystemInit+0x5c>)
 8000a72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a76:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <SystemInit+0x64>)
 8000a7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	f8ff0000 	.word	0xf8ff0000
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffb7 	bl	8000a2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f007 f969 	bl	8007d94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fb43 	bl	800014c <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ac8:	08008724 	.word	0x08008724
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad0:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000ad4:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000ad8:	20001494 	.word	0x20001494

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x28>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f945 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 f808 	bl	8000b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fe1e 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_InitTick+0x54>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <HAL_InitTick+0x58>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 f95d 	bl	8000dea <HAL_SYSTICK_Config>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e00e      	b.n	8000b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d80a      	bhi.n	8000b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f925 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_InitTick+0x5c>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a03      	ldr	r2, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	2000058c 	.word	0x2000058c

08000b90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	2000058c 	.word	0x2000058c

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff fff0 	bl	8000b90 <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_Delay+0x40>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	bf00      	nop
 8000bcc:	f7ff ffe0 	bl	8000b90 <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4906      	ldr	r1, [pc, #24]	; (8000c80 <__NVIC_EnableIRQ+0x34>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	e000e100 	.word	0xe000e100

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	; (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff90 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff2d 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff42 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ff90 	bl	8000cd8 <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff5f 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff35 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffa2 	bl	8000d3c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b08b      	sub	sp, #44	; 0x2c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e16:	e127      	b.n	8001068 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	f040 8116 	bne.w	8001062 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b12      	cmp	r3, #18
 8000e3c:	d034      	beq.n	8000ea8 <HAL_GPIO_Init+0xa4>
 8000e3e:	2b12      	cmp	r3, #18
 8000e40:	d80d      	bhi.n	8000e5e <HAL_GPIO_Init+0x5a>
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d02b      	beq.n	8000e9e <HAL_GPIO_Init+0x9a>
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d804      	bhi.n	8000e54 <HAL_GPIO_Init+0x50>
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d031      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d01c      	beq.n	8000e8c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e52:	e048      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d043      	beq.n	8000ee0 <HAL_GPIO_Init+0xdc>
 8000e58:	2b11      	cmp	r3, #17
 8000e5a:	d01b      	beq.n	8000e94 <HAL_GPIO_Init+0x90>
          break;
 8000e5c:	e043      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e5e:	4a89      	ldr	r2, [pc, #548]	; (8001084 <HAL_GPIO_Init+0x280>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d026      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
 8000e64:	4a87      	ldr	r2, [pc, #540]	; (8001084 <HAL_GPIO_Init+0x280>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d806      	bhi.n	8000e78 <HAL_GPIO_Init+0x74>
 8000e6a:	4a87      	ldr	r2, [pc, #540]	; (8001088 <HAL_GPIO_Init+0x284>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d020      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
 8000e70:	4a86      	ldr	r2, [pc, #536]	; (800108c <HAL_GPIO_Init+0x288>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d01d      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
          break;
 8000e76:	e036      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e78:	4a85      	ldr	r2, [pc, #532]	; (8001090 <HAL_GPIO_Init+0x28c>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d019      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
 8000e7e:	4a85      	ldr	r2, [pc, #532]	; (8001094 <HAL_GPIO_Init+0x290>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d016      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
 8000e84:	4a84      	ldr	r2, [pc, #528]	; (8001098 <HAL_GPIO_Init+0x294>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0xae>
          break;
 8000e8a:	e02c      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	623b      	str	r3, [r7, #32]
          break;
 8000e92:	e028      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	623b      	str	r3, [r7, #32]
          break;
 8000e9c:	e023      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	3308      	adds	r3, #8
 8000ea4:	623b      	str	r3, [r7, #32]
          break;
 8000ea6:	e01e      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	330c      	adds	r3, #12
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	e019      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d102      	bne.n	8000ec0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e012      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d105      	bne.n	8000ed4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ec8:	2308      	movs	r3, #8
 8000eca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	611a      	str	r2, [r3, #16]
          break;
 8000ed2:	e008      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ed4:	2308      	movs	r3, #8
 8000ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	615a      	str	r2, [r3, #20]
          break;
 8000ede:	e002      	b.n	8000ee6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	2bff      	cmp	r3, #255	; 0xff
 8000eea:	d801      	bhi.n	8000ef0 <HAL_GPIO_Init+0xec>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	e001      	b.n	8000ef4 <HAL_GPIO_Init+0xf0>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3304      	adds	r3, #4
 8000ef4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	2bff      	cmp	r3, #255	; 0xff
 8000efa:	d802      	bhi.n	8000f02 <HAL_GPIO_Init+0xfe>
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	e002      	b.n	8000f08 <HAL_GPIO_Init+0x104>
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3b08      	subs	r3, #8
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	210f      	movs	r1, #15
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	6a39      	ldr	r1, [r7, #32]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	431a      	orrs	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f000 8096 	beq.w	8001062 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b59      	ldr	r3, [pc, #356]	; (800109c <HAL_GPIO_Init+0x298>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a58      	ldr	r2, [pc, #352]	; (800109c <HAL_GPIO_Init+0x298>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b56      	ldr	r3, [pc, #344]	; (800109c <HAL_GPIO_Init+0x298>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f4e:	4a54      	ldr	r2, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x29c>)
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	68fa      	ldr	r2, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x2a0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x19e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x2a4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x19a>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x2a8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x196>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x2ac>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x192>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x1a0>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x1a0>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x1a0>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x1a0>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fb4:	493a      	ldr	r1, [pc, #232]	; (80010a0 <HAL_GPIO_Init+0x29c>)
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d006      	beq.n	8000fdc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fce:	4b39      	ldr	r3, [pc, #228]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	4938      	ldr	r1, [pc, #224]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	600b      	str	r3, [r1, #0]
 8000fda:	e006      	b.n	8000fea <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fdc:	4b35      	ldr	r3, [pc, #212]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	4933      	ldr	r1, [pc, #204]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d006      	beq.n	8001004 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ff6:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	492e      	ldr	r1, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	604b      	str	r3, [r1, #4]
 8001002:	e006      	b.n	8001012 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001006:	685a      	ldr	r2, [r3, #4]
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	43db      	mvns	r3, r3
 800100c:	4929      	ldr	r1, [pc, #164]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 800100e:	4013      	ands	r3, r2
 8001010:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800101e:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001020:	689a      	ldr	r2, [r3, #8]
 8001022:	4924      	ldr	r1, [pc, #144]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	608b      	str	r3, [r1, #8]
 800102a:	e006      	b.n	800103a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 800102e:	689a      	ldr	r2, [r3, #8]
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	43db      	mvns	r3, r3
 8001034:	491f      	ldr	r1, [pc, #124]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001036:	4013      	ands	r3, r2
 8001038:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001046:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	491a      	ldr	r1, [pc, #104]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	60cb      	str	r3, [r1, #12]
 8001052:	e006      	b.n	8001062 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	43db      	mvns	r3, r3
 800105c:	4915      	ldr	r1, [pc, #84]	; (80010b4 <HAL_GPIO_Init+0x2b0>)
 800105e:	4013      	ands	r3, r2
 8001060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	3301      	adds	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	fa22 f303 	lsr.w	r3, r2, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	f47f aed0 	bne.w	8000e18 <HAL_GPIO_Init+0x14>
  }
}
 8001078:	bf00      	nop
 800107a:	372c      	adds	r7, #44	; 0x2c
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	10210000 	.word	0x10210000
 8001088:	10110000 	.word	0x10110000
 800108c:	10120000 	.word	0x10120000
 8001090:	10310000 	.word	0x10310000
 8001094:	10320000 	.word	0x10320000
 8001098:	10220000 	.word	0x10220000
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40011400 	.word	0x40011400
 80010b4:	40010400 	.word	0x40010400

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	611a      	str	r2, [r3, #16]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e10f      	b.n	800131a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fb4e 	bl	80007b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	; 0x24
 8001118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800112c:	f002 fe18 	bl	8003d60 <HAL_RCC_GetPCLK1Freq>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a7b      	ldr	r2, [pc, #492]	; (8001324 <HAL_I2C_Init+0x23c>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d807      	bhi.n	800114c <HAL_I2C_Init+0x64>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	4a7a      	ldr	r2, [pc, #488]	; (8001328 <HAL_I2C_Init+0x240>)
 8001140:	4293      	cmp	r3, r2
 8001142:	bf94      	ite	ls
 8001144:	2301      	movls	r3, #1
 8001146:	2300      	movhi	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	e006      	b.n	800115a <HAL_I2C_Init+0x72>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4a77      	ldr	r2, [pc, #476]	; (800132c <HAL_I2C_Init+0x244>)
 8001150:	4293      	cmp	r3, r2
 8001152:	bf94      	ite	ls
 8001154:	2301      	movls	r3, #1
 8001156:	2300      	movhi	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0db      	b.n	800131a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4a72      	ldr	r2, [pc, #456]	; (8001330 <HAL_I2C_Init+0x248>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9b      	lsrs	r3, r3, #18
 800116c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	430a      	orrs	r2, r1
 8001180:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a64      	ldr	r2, [pc, #400]	; (8001324 <HAL_I2C_Init+0x23c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d802      	bhi.n	800119c <HAL_I2C_Init+0xb4>
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	3301      	adds	r3, #1
 800119a:	e009      	b.n	80011b0 <HAL_I2C_Init+0xc8>
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a63      	ldr	r2, [pc, #396]	; (8001334 <HAL_I2C_Init+0x24c>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	099b      	lsrs	r3, r3, #6
 80011ae:	3301      	adds	r3, #1
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6812      	ldr	r2, [r2, #0]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80011c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4956      	ldr	r1, [pc, #344]	; (8001324 <HAL_I2C_Init+0x23c>)
 80011cc:	428b      	cmp	r3, r1
 80011ce:	d80d      	bhi.n	80011ec <HAL_I2C_Init+0x104>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1e59      	subs	r1, r3, #1
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fbb1 f3f3 	udiv	r3, r1, r3
 80011de:	3301      	adds	r3, #1
 80011e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e4:	2b04      	cmp	r3, #4
 80011e6:	bf38      	it	cc
 80011e8:	2304      	movcc	r3, #4
 80011ea:	e04f      	b.n	800128c <HAL_I2C_Init+0x1a4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d111      	bne.n	8001218 <HAL_I2C_Init+0x130>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1e58      	subs	r0, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6859      	ldr	r1, [r3, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	440b      	add	r3, r1
 8001202:	fbb0 f3f3 	udiv	r3, r0, r3
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800120c:	2b00      	cmp	r3, #0
 800120e:	bf0c      	ite	eq
 8001210:	2301      	moveq	r3, #1
 8001212:	2300      	movne	r3, #0
 8001214:	b2db      	uxtb	r3, r3
 8001216:	e012      	b.n	800123e <HAL_I2C_Init+0x156>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	1e58      	subs	r0, r3, #1
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6859      	ldr	r1, [r3, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	440b      	add	r3, r1
 8001226:	0099      	lsls	r1, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	fbb0 f3f3 	udiv	r3, r0, r3
 800122e:	3301      	adds	r3, #1
 8001230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001234:	2b00      	cmp	r3, #0
 8001236:	bf0c      	ite	eq
 8001238:	2301      	moveq	r3, #1
 800123a:	2300      	movne	r3, #0
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_I2C_Init+0x15e>
 8001242:	2301      	movs	r3, #1
 8001244:	e022      	b.n	800128c <HAL_I2C_Init+0x1a4>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10e      	bne.n	800126c <HAL_I2C_Init+0x184>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1e58      	subs	r0, r3, #1
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6859      	ldr	r1, [r3, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	440b      	add	r3, r1
 800125c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001260:	3301      	adds	r3, #1
 8001262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126a:	e00f      	b.n	800128c <HAL_I2C_Init+0x1a4>
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1e58      	subs	r0, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6859      	ldr	r1, [r3, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	0099      	lsls	r1, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001282:	3301      	adds	r3, #1
 8001284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	6809      	ldr	r1, [r1, #0]
 8001290:	4313      	orrs	r3, r2
 8001292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69da      	ldr	r2, [r3, #28]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80012ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6911      	ldr	r1, [r2, #16]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68d2      	ldr	r2, [r2, #12]
 80012c6:	4311      	orrs	r1, r2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2220      	movs	r2, #32
 8001306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	000186a0 	.word	0x000186a0
 8001328:	001e847f 	.word	0x001e847f
 800132c:	003d08ff 	.word	0x003d08ff
 8001330:	431bde83 	.word	0x431bde83
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	461a      	mov	r2, r3
 8001344:	460b      	mov	r3, r1
 8001346:	817b      	strh	r3, [r7, #10]
 8001348:	4613      	mov	r3, r2
 800134a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff fc20 	bl	8000b90 <HAL_GetTick>
 8001350:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b20      	cmp	r3, #32
 800135c:	f040 80e0 	bne.w	8001520 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2319      	movs	r3, #25
 8001366:	2201      	movs	r2, #1
 8001368:	4970      	ldr	r1, [pc, #448]	; (800152c <HAL_I2C_Master_Transmit+0x1f4>)
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f001 f864 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001376:	2302      	movs	r3, #2
 8001378:	e0d3      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_I2C_Master_Transmit+0x50>
 8001384:	2302      	movs	r3, #2
 8001386:	e0cc      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b01      	cmp	r3, #1
 800139c:	d007      	beq.n	80013ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2221      	movs	r2, #33	; 0x21
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2210      	movs	r2, #16
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4a50      	ldr	r2, [pc, #320]	; (8001530 <HAL_I2C_Master_Transmit+0x1f8>)
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013f0:	8979      	ldrh	r1, [r7, #10]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	6a3a      	ldr	r2, [r7, #32]
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 fe22 	bl	8002040 <I2C_MasterRequestWrite>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e08d      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800141c:	e066      	b.n	80014ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	6a39      	ldr	r1, [r7, #32]
 8001422:	68f8      	ldr	r0, [r7, #12]
 8001424:	f001 f8de 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00d      	beq.n	800144a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	2b04      	cmp	r3, #4
 8001434:	d107      	bne.n	8001446 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001444:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e06b      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	781a      	ldrb	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	1c5a      	adds	r2, r3, #1
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001472:	3b01      	subs	r3, #1
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	695b      	ldr	r3, [r3, #20]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b04      	cmp	r3, #4
 8001486:	d11b      	bne.n	80014c0 <HAL_I2C_Master_Transmit+0x188>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148c:	2b00      	cmp	r3, #0
 800148e:	d017      	beq.n	80014c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	781a      	ldrb	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	3b01      	subs	r3, #1
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	6a39      	ldr	r1, [r7, #32]
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f001 f8ce 	bl	8002666 <I2C_WaitOnBTFFlagUntilTimeout>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00d      	beq.n	80014ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	2b04      	cmp	r3, #4
 80014d6:	d107      	bne.n	80014e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e01a      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d194      	bne.n	800141e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001502:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2220      	movs	r2, #32
 8001508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800151c:	2300      	movs	r3, #0
 800151e:	e000      	b.n	8001522 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001520:	2302      	movs	r3, #2
  }
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	00100002 	.word	0x00100002
 8001530:	ffff0000 	.word	0xffff0000

08001534 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af02      	add	r7, sp, #8
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	461a      	mov	r2, r3
 8001540:	460b      	mov	r3, r1
 8001542:	817b      	strh	r3, [r7, #10]
 8001544:	4613      	mov	r3, r2
 8001546:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff fb22 	bl	8000b90 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b20      	cmp	r3, #32
 8001558:	f040 8213 	bne.w	8001982 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	2319      	movs	r3, #25
 8001562:	2201      	movs	r2, #1
 8001564:	497e      	ldr	r1, [pc, #504]	; (8001760 <HAL_I2C_Master_Receive+0x22c>)
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 ff66 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	e206      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_I2C_Master_Receive+0x50>
 8001580:	2302      	movs	r3, #2
 8001582:	e1ff      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b01      	cmp	r3, #1
 8001598:	d007      	beq.n	80015aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2222      	movs	r2, #34	; 0x22
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2210      	movs	r2, #16
 80015c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	893a      	ldrh	r2, [r7, #8]
 80015da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_I2C_Master_Receive+0x230>)
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80015ec:	8979      	ldrh	r1, [r7, #10]
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fd9a 	bl	800212c <I2C_MasterRequestRead>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e1c0      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001606:	2b00      	cmp	r3, #0
 8001608:	d113      	bne.n	8001632 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	623b      	str	r3, [r7, #32]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	623b      	str	r3, [r7, #32]
 800161e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	e194      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11d      	bne.n	8001676 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001648:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800164a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001670:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001672:	b662      	cpsie	i
 8001674:	e172      	b.n	800195c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167a:	2b02      	cmp	r3, #2
 800167c:	d11d      	bne.n	80016ba <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800168c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800168e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80016b6:	b662      	cpsie	i
 80016b8:	e150      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80016c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80016e0:	e13c      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	f200 80f5 	bhi.w	80018d6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d123      	bne.n	800173c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 fff5 	bl	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e13d      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	3b01      	subs	r3, #1
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	855a      	strh	r2, [r3, #42]	; 0x2a
 800173a:	e10f      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	2b02      	cmp	r3, #2
 8001742:	d150      	bne.n	80017e6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800174a:	2200      	movs	r2, #0
 800174c:	4906      	ldr	r1, [pc, #24]	; (8001768 <HAL_I2C_Master_Receive+0x234>)
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fe72 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e112      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
 800175e:	bf00      	nop
 8001760:	00100002 	.word	0x00100002
 8001764:	ffff0000 	.word	0xffff0000
 8001768:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800177c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179a:	3b01      	subs	r3, #1
 800179c:	b29a      	uxth	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80017b0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	b2d2      	uxtb	r2, r2
 80017be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	3b01      	subs	r3, #1
 80017de:	b29a      	uxth	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80017e4:	e0ba      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ec:	2200      	movs	r2, #0
 80017ee:	4967      	ldr	r1, [pc, #412]	; (800198c <HAL_I2C_Master_Receive+0x458>)
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 fe21 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e0c1      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800180e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001810:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184a:	2200      	movs	r2, #0
 800184c:	494f      	ldr	r1, [pc, #316]	; (800198c <HAL_I2C_Master_Receive+0x458>)
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fdf2 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e092      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800186c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	3b01      	subs	r3, #1
 800188c:	b29a      	uxth	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018a0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018d4:	e042      	b.n	800195c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 ff04 	bl	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e04c      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691a      	ldr	r2, [r3, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	3b01      	subs	r3, #1
 8001908:	b29a      	uxth	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001912:	b29b      	uxth	r3, r3
 8001914:	3b01      	subs	r3, #1
 8001916:	b29a      	uxth	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	2b04      	cmp	r3, #4
 8001928:	d118      	bne.n	800195c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f aebe 	bne.w	80016e2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2220      	movs	r2, #32
 800196a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800197e:	2300      	movs	r3, #0
 8001980:	e000      	b.n	8001984 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001982:	2302      	movs	r3, #2
  }
}
 8001984:	4618      	mov	r0, r3
 8001986:	3728      	adds	r7, #40	; 0x28
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	00010004 	.word	0x00010004

08001990 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af02      	add	r7, sp, #8
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	4608      	mov	r0, r1
 800199a:	4611      	mov	r1, r2
 800199c:	461a      	mov	r2, r3
 800199e:	4603      	mov	r3, r0
 80019a0:	817b      	strh	r3, [r7, #10]
 80019a2:	460b      	mov	r3, r1
 80019a4:	813b      	strh	r3, [r7, #8]
 80019a6:	4613      	mov	r3, r2
 80019a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019aa:	f7ff f8f1 	bl	8000b90 <HAL_GetTick>
 80019ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	f040 8218 	bne.w	8001dee <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	2319      	movs	r3, #25
 80019c4:	2201      	movs	r2, #1
 80019c6:	4981      	ldr	r1, [pc, #516]	; (8001bcc <HAL_I2C_Mem_Read+0x23c>)
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fd35 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	e20b      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Mem_Read+0x56>
 80019e2:	2302      	movs	r3, #2
 80019e4:	e204      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d007      	beq.n	8001a0c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f042 0201 	orr.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2222      	movs	r2, #34	; 0x22
 8001a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a61      	ldr	r2, [pc, #388]	; (8001bd0 <HAL_I2C_Mem_Read+0x240>)
 8001a4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a4e:	88f8      	ldrh	r0, [r7, #6]
 8001a50:	893a      	ldrh	r2, [r7, #8]
 8001a52:	8979      	ldrh	r1, [r7, #10]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a5a:	9300      	str	r3, [sp, #0]
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fc1a 	bl	8002298 <I2C_RequestMemoryRead>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e1c0      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d113      	bne.n	8001a9e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	623b      	str	r3, [r7, #32]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e194      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d11d      	bne.n	8001ae2 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ade:	b662      	cpsie	i
 8001ae0:	e172      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d11d      	bne.n	8001b26 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001afa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b22:	b662      	cpsie	i
 8001b24:	e150      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b34:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b4c:	e13c      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	f200 80f5 	bhi.w	8001d42 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d123      	bne.n	8001ba8 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fdbf 	bl	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e13d      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691a      	ldr	r2, [r3, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba6:	e10f      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d150      	bne.n	8001c52 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4906      	ldr	r1, [pc, #24]	; (8001bd4 <HAL_I2C_Mem_Read+0x244>)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 fc3c 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e112      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
 8001bca:	bf00      	nop
 8001bcc:	00100002 	.word	0x00100002
 8001bd0:	ffff0000 	.word	0xffff0000
 8001bd4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c1c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c50:	e0ba      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4967      	ldr	r1, [pc, #412]	; (8001df8 <HAL_I2C_Mem_Read+0x468>)
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 fbeb 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0c1      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691a      	ldr	r2, [r3, #16]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	494f      	ldr	r1, [pc, #316]	; (8001df8 <HAL_I2C_Mem_Read+0x468>)
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f000 fbbc 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e092      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cd8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d0c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	691a      	ldr	r2, [r3, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	1c5a      	adds	r2, r3, #1
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d40:	e042      	b.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fcce 	bl	80026e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e04c      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f003 0304 	and.w	r3, r3, #4
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d118      	bne.n	8001dc8 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f aebe 	bne.w	8001b4e <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001dea:	2300      	movs	r3, #0
 8001dec:	e000      	b.n	8001df0 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001dee:	2302      	movs	r3, #2
  }
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3728      	adds	r7, #40	; 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	00010004 	.word	0x00010004

08001dfc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08a      	sub	sp, #40	; 0x28
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001e0c:	f7fe fec0 	bl	8000b90 <HAL_GetTick>
 8001e10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001e12:	2301      	movs	r3, #1
 8001e14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	f040 8105 	bne.w	800202e <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	2319      	movs	r3, #25
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4982      	ldr	r1, [pc, #520]	; (8002038 <HAL_I2C_IsDeviceReady+0x23c>)
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 fb02 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e0f8      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_I2C_IsDeviceReady+0x50>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e0f1      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d007      	beq.n	8001e72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2224      	movs	r2, #36	; 0x24
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a6a      	ldr	r2, [pc, #424]	; (800203c <HAL_I2C_IsDeviceReady+0x240>)
 8001e94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 fac0 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e0b6      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ec2:	897b      	ldrh	r3, [r7, #10]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ed0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001ed2:	f7fe fe5d 	bl	8000b90 <HAL_GetTick>
 8001ed6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	bf0c      	ite	eq
 8001ee6:	2301      	moveq	r3, #1
 8001ee8:	2300      	movne	r3, #0
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	bf0c      	ite	eq
 8001efe:	2301      	moveq	r3, #1
 8001f00:	2300      	movne	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f06:	e025      	b.n	8001f54 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001f08:	f7fe fe42 	bl	8000b90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <HAL_I2C_IsDeviceReady+0x122>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d103      	bne.n	8001f26 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	22a0      	movs	r2, #160	; 0xa0
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	bf0c      	ite	eq
 8001f34:	2301      	moveq	r3, #1
 8001f36:	2300      	movne	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f4a:	bf0c      	ite	eq
 8001f4c:	2301      	moveq	r3, #1
 8001f4e:	2300      	movne	r3, #0
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2ba0      	cmp	r3, #160	; 0xa0
 8001f5e:	d005      	beq.n	8001f6c <HAL_I2C_IsDeviceReady+0x170>
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_I2C_IsDeviceReady+0x170>
 8001f66:	7dbb      	ldrb	r3, [r7, #22]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0cd      	beq.n	8001f08 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d129      	bne.n	8001fd6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f90:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2319      	movs	r3, #25
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4921      	ldr	r1, [pc, #132]	; (8002038 <HAL_I2C_IsDeviceReady+0x23c>)
 8001fb2:	68f8      	ldr	r0, [r7, #12]
 8001fb4:	f000 fa40 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e036      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e02c      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2319      	movs	r3, #25
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	490f      	ldr	r1, [pc, #60]	; (8002038 <HAL_I2C_IsDeviceReady+0x23c>)
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa1c 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e012      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	3301      	adds	r3, #1
 800200e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	f4ff af3e 	bcc.w	8001e96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 800202e:	2302      	movs	r3, #2
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3720      	adds	r7, #32
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	00100002 	.word	0x00100002
 800203c:	ffff0000 	.word	0xffff0000

08002040 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	460b      	mov	r3, r1
 800204e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b08      	cmp	r3, #8
 800205a:	d006      	beq.n	800206a <I2C_MasterRequestWrite+0x2a>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d003      	beq.n	800206a <I2C_MasterRequestWrite+0x2a>
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002068:	d108      	bne.n	800207c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e00b      	b.n	8002094 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	2b12      	cmp	r3, #18
 8002082:	d107      	bne.n	8002094 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002092:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f9c9 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e035      	b.n	800211c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020b8:	d108      	bne.n	80020cc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ba:	897b      	ldrh	r3, [r7, #10]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80020c8:	611a      	str	r2, [r3, #16]
 80020ca:	e01b      	b.n	8002104 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	11db      	asrs	r3, r3, #7
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	f003 0306 	and.w	r3, r3, #6
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f063 030f 	orn	r3, r3, #15
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	490e      	ldr	r1, [pc, #56]	; (8002124 <I2C_MasterRequestWrite+0xe4>)
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f9fb 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e010      	b.n	800211c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020fa:	897b      	ldrh	r3, [r7, #10]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4907      	ldr	r1, [pc, #28]	; (8002128 <I2C_MasterRequestWrite+0xe8>)
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f9eb 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	00010008 	.word	0x00010008
 8002128:	00010002 	.word	0x00010002

0800212c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af02      	add	r7, sp, #8
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	460b      	mov	r3, r1
 800213a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002150:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d006      	beq.n	8002166 <I2C_MasterRequestRead+0x3a>
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d003      	beq.n	8002166 <I2C_MasterRequestRead+0x3a>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002164:	d108      	bne.n	8002178 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e00b      	b.n	8002190 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	2b11      	cmp	r3, #17
 800217e:	d107      	bne.n	8002190 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800218e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f000 f94b 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e06d      	b.n	8002288 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021b4:	d108      	bne.n	80021c8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021b6:	897b      	ldrh	r3, [r7, #10]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	e053      	b.n	8002270 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021c8:	897b      	ldrh	r3, [r7, #10]
 80021ca:	11db      	asrs	r3, r3, #7
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	f003 0306 	and.w	r3, r3, #6
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	f063 030f 	orn	r3, r3, #15
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	492a      	ldr	r1, [pc, #168]	; (8002290 <I2C_MasterRequestRead+0x164>)
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f97d 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e048      	b.n	8002288 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80021f6:	897b      	ldrh	r3, [r7, #10]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4923      	ldr	r1, [pc, #140]	; (8002294 <I2C_MasterRequestRead+0x168>)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f96d 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e038      	b.n	8002288 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800223a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f8f5 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e017      	b.n	8002288 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002258:	897b      	ldrh	r3, [r7, #10]
 800225a:	11db      	asrs	r3, r3, #7
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f003 0306 	and.w	r3, r3, #6
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f063 030e 	orn	r3, r3, #14
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <I2C_MasterRequestRead+0x168>)
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f935 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	00010008 	.word	0x00010008
 8002294:	00010002 	.word	0x00010002

08002298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	af02      	add	r7, sp, #8
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	817b      	strh	r3, [r7, #10]
 80022aa:	460b      	mov	r3, r1
 80022ac:	813b      	strh	r3, [r7, #8]
 80022ae:	4613      	mov	r3, r2
 80022b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	2200      	movs	r2, #0
 80022da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 f8aa 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e09e      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ee:	897b      	ldrh	r3, [r7, #10]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002300:	6a3a      	ldr	r2, [r7, #32]
 8002302:	494c      	ldr	r1, [pc, #304]	; (8002434 <I2C_RequestMemoryRead+0x19c>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f8ee 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e08b      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f958 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00d      	beq.n	8002356 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	2b04      	cmp	r3, #4
 8002340:	d107      	bne.n	8002352 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06a      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800235c:	893b      	ldrh	r3, [r7, #8]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	e021      	b.n	80023ac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002368:	893b      	ldrh	r3, [r7, #8]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f932 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2b04      	cmp	r3, #4
 800238c:	d107      	bne.n	800239e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e044      	b.n	800242c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023a2:	893b      	ldrh	r3, [r7, #8]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	6a39      	ldr	r1, [r7, #32]
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f917 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d107      	bne.n	80023d4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e029      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f81f 	bl	8002438 <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e013      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002404:	897b      	ldrh	r3, [r7, #10]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	b2da      	uxtb	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	6a3a      	ldr	r2, [r7, #32]
 8002418:	4906      	ldr	r1, [pc, #24]	; (8002434 <I2C_RequestMemoryRead+0x19c>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f863 	bl	80024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	00010002 	.word	0x00010002

08002438 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002448:	e025      	b.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d021      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7fe fb9d 	bl	8000b90 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d116      	bne.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e023      	b.n	80024de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	0c1b      	lsrs	r3, r3, #16
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d10d      	bne.n	80024bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	43da      	mvns	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4013      	ands	r3, r2
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	461a      	mov	r2, r3
 80024ba:	e00c      	b.n	80024d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d0b6      	beq.n	800244a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f4:	e051      	b.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002504:	d123      	bne.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002514:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800251e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f043 0204 	orr.w	r2, r3, #4
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e046      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002554:	d021      	beq.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002556:	f7fe fb1b 	bl	8000b90 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	d302      	bcc.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d116      	bne.n	800259a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f043 0220 	orr.w	r2, r3, #32
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e020      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	0c1b      	lsrs	r3, r3, #16
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d10c      	bne.n	80025be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	bf14      	ite	ne
 80025b6:	2301      	movne	r3, #1
 80025b8:	2300      	moveq	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	e00b      	b.n	80025d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	43da      	mvns	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	4013      	ands	r3, r2
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d18d      	bne.n	80024f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f0:	e02d      	b.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8ce 	bl	8002794 <I2C_IsAcknowledgeFailed>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e02d      	b.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d021      	beq.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7fe fac1 	bl	8000b90 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d116      	bne.n	800264e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e007      	b.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d1ca      	bne.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	60b9      	str	r1, [r7, #8]
 8002670:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002672:	e02d      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 f88d 	bl	8002794 <I2C_IsAcknowledgeFailed>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e02d      	b.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268a:	d021      	beq.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268c:	f7fe fa80 	bl	8000b90 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	429a      	cmp	r2, r3
 800269a:	d302      	bcc.n	80026a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e007      	b.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d1ca      	bne.n	8002674 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026f4:	e042      	b.n	800277c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b10      	cmp	r3, #16
 8002702:	d119      	bne.n	8002738 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0210 	mvn.w	r2, #16
 800270c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e029      	b.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002738:	f7fe fa2a 	bl	8000b90 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	429a      	cmp	r2, r3
 8002746:	d302      	bcc.n	800274e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d116      	bne.n	800277c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	f043 0220 	orr.w	r2, r3, #32
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e007      	b.n	800278c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d1b5      	bne.n	80026f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d11b      	bne.n	80027e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f043 0204 	orr.w	r2, r3, #4
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af06      	add	r7, sp, #24
 80027f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0d3      	b.n	80029aa <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f005 f820 	bl	800785c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f002 f990 	bl	8004b4e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	687e      	ldr	r6, [r7, #4]
 8002836:	466d      	mov	r5, sp
 8002838:	f106 0410 	add.w	r4, r6, #16
 800283c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800283e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002840:	6823      	ldr	r3, [r4, #0]
 8002842:	602b      	str	r3, [r5, #0]
 8002844:	1d33      	adds	r3, r6, #4
 8002846:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002848:	6838      	ldr	r0, [r7, #0]
 800284a:	f002 f959 	bl	8004b00 <USB_CoreInit>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0a4      	b.n	80029aa <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2100      	movs	r1, #0
 8002866:	4618      	mov	r0, r3
 8002868:	f002 f98d 	bl	8004b86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e035      	b.n	80028de <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	015b      	lsls	r3, r3, #5
 8002878:	4413      	add	r3, r2
 800287a:	3329      	adds	r3, #41	; 0x29
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	4413      	add	r3, r2
 8002888:	3328      	adds	r3, #40	; 0x28
 800288a:	7bfa      	ldrb	r2, [r7, #15]
 800288c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	7bfa      	ldrb	r2, [r7, #15]
 8002892:	b291      	uxth	r1, r2
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	015b      	lsls	r3, r3, #5
 8002898:	4413      	add	r3, r2
 800289a:	3336      	adds	r3, #54	; 0x36
 800289c:	460a      	mov	r2, r1
 800289e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028a0:	7bfb      	ldrb	r3, [r7, #15]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	4413      	add	r3, r2
 80028a8:	332b      	adds	r3, #43	; 0x2b
 80028aa:	2200      	movs	r2, #0
 80028ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	015b      	lsls	r3, r3, #5
 80028b4:	4413      	add	r3, r2
 80028b6:	3338      	adds	r3, #56	; 0x38
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	015b      	lsls	r3, r3, #5
 80028c2:	4413      	add	r3, r2
 80028c4:	333c      	adds	r3, #60	; 0x3c
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	3302      	adds	r3, #2
 80028d0:	015b      	lsls	r3, r3, #5
 80028d2:	4413      	add	r3, r2
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	3301      	adds	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
 80028de:	7bfa      	ldrb	r2, [r7, #15]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3c4      	bcc.n	8002872 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]
 80028ec:	e031      	b.n	8002952 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028ee:	7bfb      	ldrb	r3, [r7, #15]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	015b      	lsls	r3, r3, #5
 80028f4:	4413      	add	r3, r2
 80028f6:	f203 1329 	addw	r3, r3, #297	; 0x129
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	015b      	lsls	r3, r3, #5
 8002904:	4413      	add	r3, r2
 8002906:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800290a:	7bfa      	ldrb	r2, [r7, #15]
 800290c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	015b      	lsls	r3, r3, #5
 8002914:	4413      	add	r3, r2
 8002916:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	015b      	lsls	r3, r3, #5
 8002924:	4413      	add	r3, r2
 8002926:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800292e:	7bfb      	ldrb	r3, [r7, #15]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	015b      	lsls	r3, r3, #5
 8002934:	4413      	add	r3, r2
 8002936:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	330a      	adds	r3, #10
 8002944:	015b      	lsls	r3, r3, #5
 8002946:	4413      	add	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294c:	7bfb      	ldrb	r3, [r7, #15]
 800294e:	3301      	adds	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
 8002952:	7bfa      	ldrb	r2, [r7, #15]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	d3c8      	bcc.n	80028ee <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	687e      	ldr	r6, [r7, #4]
 8002964:	466d      	mov	r5, sp
 8002966:	f106 0410 	add.w	r4, r6, #16
 800296a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800296c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	1d33      	adds	r3, r6, #4
 8002974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002976:	6838      	ldr	r0, [r7, #0]
 8002978:	f002 f911 	bl	8004b9e <USB_DevInit>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e00d      	b.n	80029aa <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 f94f 	bl	8005c46 <USB_DevDisconnect>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_PCD_Start+0x16>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e016      	b.n	80029f6 <HAL_PCD_Start+0x44>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80029d0:	2101      	movs	r1, #1
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f005 f9a1 	bl	8007d1a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 f928 	bl	8005c32 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 f89a 	bl	8004b20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 f925 	bl	8005c5a <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a1a:	d102      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 faf3 	bl	8003008 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f003 f917 	bl	8005c5a <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a36:	d112      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f004 ff70 	bl	8007936 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8de 	bl	8002c1a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f003 f8f9 	bl	8005c5a <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a72:	d10b      	bne.n	8002a8c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a86:	b292      	uxth	r2, r2
 8002a88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 f8e2 	bl	8005c5a <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aa0:	d10b      	bne.n	8002aba <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab4:	b292      	uxth	r2, r2
 8002ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f003 f8cb 	bl	8005c5a <USB_ReadInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	d126      	bne.n	8002b1e <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0204 	bic.w	r2, r2, #4
 8002ae2:	b292      	uxth	r2, r2
 8002ae4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0208 	bic.w	r2, r2, #8
 8002afa:	b292      	uxth	r2, r2
 8002afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f004 ff51 	bl	80079a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b18:	b292      	uxth	r2, r2
 8002b1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 f899 	bl	8005c5a <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d13d      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b3c:	b29a      	uxth	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0208 	orr.w	r2, r2, #8
 8002b46:	b292      	uxth	r2, r2
 8002b48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5e:	b292      	uxth	r2, r2
 8002b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0204 	orr.w	r2, r2, #4
 8002b76:	b292      	uxth	r2, r2
 8002b78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f003 f86a 	bl	8005c5a <USB_ReadInterrupts>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	d10b      	bne.n	8002baa <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f004 fee2 	bl	8007974 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f850 	bl	8005c5a <USB_ReadInterrupts>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d10e      	bne.n	8002be4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002bd8:	b292      	uxth	r2, r2
 8002bda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f004 fe9b 	bl	800791a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f003 f836 	bl	8005c5a <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf8:	d10b      	bne.n	8002c12 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c0c:	b292      	uxth	r2, r2
 8002c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_PCD_SetAddress+0x1a>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e013      	b.n	8002c5c <HAL_PCD_SetAddress+0x42>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 ffdd 	bl	8005c0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	70fb      	strb	r3, [r7, #3]
 8002c76:	460b      	mov	r3, r1
 8002c78:	803b      	strh	r3, [r7, #0]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da0b      	bge.n	8002ca2 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	015b      	lsls	r3, r3, #5
 8002c92:	3328      	adds	r3, #40	; 0x28
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	4413      	add	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	705a      	strb	r2, [r3, #1]
 8002ca0:	e00b      	b.n	8002cba <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	015b      	lsls	r3, r3, #5
 8002caa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cc6:	883a      	ldrh	r2, [r7, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	78ba      	ldrb	r2, [r7, #2]
 8002cd0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d004      	beq.n	8002ce4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ce4:	78bb      	ldrb	r3, [r7, #2]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d102      	bne.n	8002cf0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_PCD_EP_Open+0x9a>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e00e      	b.n	8002d1c <HAL_PCD_EP_Open+0xb8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 ff6b 	bl	8004be8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002d1a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da0b      	bge.n	8002d50 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	78fb      	ldrb	r3, [r7, #3]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	3328      	adds	r3, #40	; 0x28
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
 8002d4e:	e00b      	b.n	8002d68 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_PCD_EP_Close+0x5e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e00e      	b.n	8002da0 <HAL_PCD_EP_Close+0x7c>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68f9      	ldr	r1, [r7, #12]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f002 fa17 	bl	80051c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	460b      	mov	r3, r1
 8002db6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db8:	7afb      	ldrb	r3, [r7, #11]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	2200      	movs	r2, #0
 8002de0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dee:	7afb      	ldrb	r3, [r7, #11]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d106      	bne.n	8002e06 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 fb76 	bl	80054f0 <USB_EPStartXfer>
 8002e04:	e005      	b.n	8002e12 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6979      	ldr	r1, [r7, #20]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f002 fb6f 	bl	80054f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	330a      	adds	r3, #10
 8002e32:	015b      	lsls	r3, r3, #5
 8002e34:	4413      	add	r3, r2
 8002e36:	3304      	adds	r3, #4
 8002e38:	681b      	ldr	r3, [r3, #0]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	460b      	mov	r3, r1
 8002e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	015b      	lsls	r3, r3, #5
 8002e5c:	3328      	adds	r3, #40	; 0x28
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	4413      	add	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7c:	7afb      	ldrb	r3, [r7, #11]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e88:	7afb      	ldrb	r3, [r7, #11]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6979      	ldr	r1, [r7, #20]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f002 fb29 	bl	80054f0 <USB_EPStartXfer>
 8002e9e:	e005      	b.n	8002eac <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6979      	ldr	r1, [r7, #20]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 fb22 	bl	80054f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b084      	sub	sp, #16
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 0207 	and.w	r2, r3, #7
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d901      	bls.n	8002ed4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e046      	b.n	8002f62 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	da0b      	bge.n	8002ef4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002edc:	78fb      	ldrb	r3, [r7, #3]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	015b      	lsls	r3, r3, #5
 8002ee4:	3328      	adds	r3, #40	; 0x28
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	705a      	strb	r2, [r3, #1]
 8002ef2:	e009      	b.n	8002f08 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	4413      	add	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_PCD_EP_SetStall+0x72>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e01c      	b.n	8002f62 <HAL_PCD_EP_SetStall+0xac>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68f9      	ldr	r1, [r7, #12]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f002 fd92 	bl	8005a60 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d108      	bne.n	8002f58 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002f50:	4619      	mov	r1, r3
 8002f52:	4610      	mov	r0, r2
 8002f54:	f002 fe90 	bl	8005c78 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b084      	sub	sp, #16
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	460b      	mov	r3, r1
 8002f74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f76:	78fb      	ldrb	r3, [r7, #3]
 8002f78:	f003 020f 	and.w	r2, r3, #15
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d901      	bls.n	8002f88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e03a      	b.n	8002ffe <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da0b      	bge.n	8002fa8 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	3328      	adds	r3, #40	; 0x28
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	705a      	strb	r2, [r3, #1]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	015b      	lsls	r3, r3, #5
 8002fb0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_PCD_EP_ClrStall+0x76>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e00e      	b.n	8002ffe <HAL_PCD_EP_ClrStall+0x94>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68f9      	ldr	r1, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 fd78 	bl	8005ae4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b089      	sub	sp, #36	; 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003010:	e282      	b.n	8003518 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800301c:	8afb      	ldrh	r3, [r7, #22]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f003 030f 	and.w	r3, r3, #15
 8003024:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003026:	7d7b      	ldrb	r3, [r7, #21]
 8003028:	2b00      	cmp	r3, #0
 800302a:	f040 8142 	bne.w	80032b2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800302e:	8afb      	ldrh	r3, [r7, #22]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d151      	bne.n	80030dc <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	b29c      	uxth	r4, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003052:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3328      	adds	r3, #40	; 0x28
 800305e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	3302      	adds	r3, #2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4413      	add	r3, r2
 800307e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	441a      	add	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f004 fc25 	bl	80078ec <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f000 8234 	beq.w	8003518 <PCD_EP_ISR_Handler+0x510>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f040 822f 	bne.w	8003518 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	b292      	uxth	r2, r2
 80030ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030da:	e21d      	b.n	8003518 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030e2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80030ec:	8a7b      	ldrh	r3, [r7, #18]
 80030ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d033      	beq.n	800315e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030fe:	b29b      	uxth	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	3306      	adds	r3, #6
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	4413      	add	r3, r2
 8003114:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f503 710c 	add.w	r1, r3, #560	; 0x230
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003134:	b29b      	uxth	r3, r3
 8003136:	f002 fdee 	bl	8005d16 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29a      	uxth	r2, r3
 8003142:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003146:	4013      	ands	r3, r2
 8003148:	b29c      	uxth	r4, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003152:	b292      	uxth	r2, r2
 8003154:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f004 fb9e 	bl	8007898 <HAL_PCD_SetupStageCallback>
 800315c:	e1dc      	b.n	8003518 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800315e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f280 81d8 	bge.w	8003518 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29a      	uxth	r2, r3
 8003170:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003174:	4013      	ands	r3, r2
 8003176:	b29c      	uxth	r4, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003180:	b292      	uxth	r2, r2
 8003182:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	3306      	adds	r3, #6
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4413      	add	r3, r2
 80031a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	69db      	ldr	r3, [r3, #28]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d019      	beq.n	80031ec <PCD_EP_ISR_Handler+0x1e4>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6959      	ldr	r1, [r3, #20]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	f002 fda0 	bl	8005d16 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	441a      	add	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80031e4:	2100      	movs	r1, #0
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f004 fb68 	bl	80078bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	461c      	mov	r4, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	441c      	add	r4, r3
 80031fe:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8003202:	461c      	mov	r4, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10e      	bne.n	800322a <PCD_EP_ISR_Handler+0x222>
 800320c:	8823      	ldrh	r3, [r4, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003214:	b29b      	uxth	r3, r3
 8003216:	8023      	strh	r3, [r4, #0]
 8003218:	8823      	ldrh	r3, [r4, #0]
 800321a:	b29b      	uxth	r3, r3
 800321c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003224:	b29b      	uxth	r3, r3
 8003226:	8023      	strh	r3, [r4, #0]
 8003228:	e02d      	b.n	8003286 <PCD_EP_ISR_Handler+0x27e>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b3e      	cmp	r3, #62	; 0x3e
 8003230:	d812      	bhi.n	8003258 <PCD_EP_ISR_Handler+0x250>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <PCD_EP_ISR_Handler+0x244>
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	3301      	adds	r3, #1
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	b29b      	uxth	r3, r3
 8003250:	029b      	lsls	r3, r3, #10
 8003252:	b29b      	uxth	r3, r3
 8003254:	8023      	strh	r3, [r4, #0]
 8003256:	e016      	b.n	8003286 <PCD_EP_ISR_Handler+0x27e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	095b      	lsrs	r3, r3, #5
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <PCD_EP_ISR_Handler+0x26a>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	3b01      	subs	r3, #1
 8003270:	61bb      	str	r3, [r7, #24]
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	b29b      	uxth	r3, r3
 8003276:	029b      	lsls	r3, r3, #10
 8003278:	b29b      	uxth	r3, r3
 800327a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800327e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003282:	b29b      	uxth	r3, r3
 8003284:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	b29c      	uxth	r4, r3
 8003298:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800329c:	b29c      	uxth	r4, r3
 800329e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032a2:	b29c      	uxth	r4, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	4ba2      	ldr	r3, [pc, #648]	; (8003534 <PCD_EP_ISR_Handler+0x52c>)
 80032aa:	4323      	orrs	r3, r4
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]
 80032b0:	e132      	b.n	8003518 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	461a      	mov	r2, r3
 80032b8:	7d7b      	ldrb	r3, [r7, #21]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f280 80d1 	bge.w	800346e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	b29a      	uxth	r2, r3
 80032dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29c      	uxth	r4, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	7d7b      	ldrb	r3, [r7, #21]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80032f4:	b292      	uxth	r2, r2
 80032f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032f8:	7d7b      	ldrb	r3, [r7, #21]
 80032fa:	015b      	lsls	r3, r3, #5
 80032fc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4413      	add	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	7b1b      	ldrb	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d121      	bne.n	8003352 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4413      	add	r3, r2
 8003322:	3306      	adds	r3, #6
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003336:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003338:	8bfb      	ldrh	r3, [r7, #30]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d072      	beq.n	8003424 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6959      	ldr	r1, [r3, #20]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88da      	ldrh	r2, [r3, #6]
 800334a:	8bfb      	ldrh	r3, [r7, #30]
 800334c:	f002 fce3 	bl	8005d16 <USB_ReadPMA>
 8003350:	e068      	b.n	8003424 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d021      	beq.n	80033b0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4413      	add	r3, r2
 8003380:	3302      	adds	r3, #2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	4413      	add	r3, r2
 800338a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003394:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8003396:	8bfb      	ldrh	r3, [r7, #30]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d02a      	beq.n	80033f2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6818      	ldr	r0, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6959      	ldr	r1, [r3, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	891a      	ldrh	r2, [r3, #8]
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	f002 fcb4 	bl	8005d16 <USB_ReadPMA>
 80033ae:	e020      	b.n	80033f2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	3306      	adds	r3, #6
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6812      	ldr	r2, [r2, #0]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033d8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80033da:	8bfb      	ldrh	r3, [r7, #30]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6818      	ldr	r0, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6959      	ldr	r1, [r3, #20]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	895a      	ldrh	r2, [r3, #10]
 80033ec:	8bfb      	ldrh	r3, [r7, #30]
 80033ee:	f002 fc92 	bl	8005d16 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340c:	b29c      	uxth	r4, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	441a      	add	r2, r3
 800341c:	4b46      	ldr	r3, [pc, #280]	; (8003538 <PCD_EP_ISR_Handler+0x530>)
 800341e:	4323      	orrs	r3, r4
 8003420:	b29b      	uxth	r3, r3
 8003422:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	69da      	ldr	r2, [r3, #28]
 8003428:	8bfb      	ldrh	r3, [r7, #30]
 800342a:	441a      	add	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	695a      	ldr	r2, [r3, #20]
 8003434:	8bfb      	ldrh	r3, [r7, #30]
 8003436:	441a      	add	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <PCD_EP_ISR_Handler+0x446>
 8003444:	8bfa      	ldrh	r2, [r7, #30]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	d206      	bcs.n	800345c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	4619      	mov	r1, r3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f004 fa31 	bl	80078bc <HAL_PCD_DataOutStageCallback>
 800345a:	e008      	b.n	800346e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	7819      	ldrb	r1, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f7ff fc9d 	bl	8002da8 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800346e:	8a7b      	ldrh	r3, [r7, #18]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d04f      	beq.n	8003518 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003478:	7d7b      	ldrb	r3, [r7, #21]
 800347a:	015b      	lsls	r3, r3, #5
 800347c:	3328      	adds	r3, #40	; 0x28
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4413      	add	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	7d7b      	ldrb	r3, [r7, #21]
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4413      	add	r3, r2
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	b29b      	uxth	r3, r3
 8003494:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349c:	b29c      	uxth	r4, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	7d7b      	ldrb	r3, [r7, #21]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	441a      	add	r2, r3
 80034aa:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80034ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	3302      	adds	r3, #2
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	441a      	add	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f004 f9f4 	bl	80078ec <HAL_PCD_DataInStageCallback>
 8003504:	e008      	b.n	8003518 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	7819      	ldrb	r1, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff fc96 	bl	8002e44 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003520:	b29b      	uxth	r3, r3
 8003522:	b21b      	sxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	f6ff ad74 	blt.w	8003012 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3724      	adds	r7, #36	; 0x24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd90      	pop	{r4, r7, pc}
 8003534:	ffff8080 	.word	0xffff8080
 8003538:	ffff80c0 	.word	0xffff80c0

0800353c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800353c:	b480      	push	{r7}
 800353e:	b087      	sub	sp, #28
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	4613      	mov	r3, r2
 800354c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800354e:	897b      	ldrh	r3, [r7, #10]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	f003 0307 	and.w	r3, r3, #7
 8003560:	015b      	lsls	r3, r3, #5
 8003562:	3328      	adds	r3, #40	; 0x28
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4413      	add	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
 800356a:	e006      	b.n	800357a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800356c:	897b      	ldrh	r3, [r7, #10]
 800356e:	015b      	lsls	r3, r3, #5
 8003570:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800357a:	893b      	ldrh	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	b29a      	uxth	r2, r3
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	80da      	strh	r2, [r3, #6]
 800358e:	e00b      	b.n	80035a8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2201      	movs	r2, #1
 8003594:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	b29a      	uxth	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0c1b      	lsrs	r3, r3, #16
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e26c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8087 	beq.w	80036e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d4:	4b92      	ldr	r3, [pc, #584]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f003 030c 	and.w	r3, r3, #12
 80035dc:	2b04      	cmp	r3, #4
 80035de:	d00c      	beq.n	80035fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035e0:	4b8f      	ldr	r3, [pc, #572]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 030c 	and.w	r3, r3, #12
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d112      	bne.n	8003612 <HAL_RCC_OscConfig+0x5e>
 80035ec:	4b8c      	ldr	r3, [pc, #560]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d10b      	bne.n	8003612 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d06c      	beq.n	80036e0 <HAL_RCC_OscConfig+0x12c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d168      	bne.n	80036e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e246      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x76>
 800361c:	4b80      	ldr	r3, [pc, #512]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a7f      	ldr	r2, [pc, #508]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003626:	6013      	str	r3, [r2, #0]
 8003628:	e02e      	b.n	8003688 <HAL_RCC_OscConfig+0xd4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x98>
 8003632:	4b7b      	ldr	r3, [pc, #492]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7a      	ldr	r2, [pc, #488]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b78      	ldr	r3, [pc, #480]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a77      	ldr	r2, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003648:	6013      	str	r3, [r2, #0]
 800364a:	e01d      	b.n	8003688 <HAL_RCC_OscConfig+0xd4>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003654:	d10c      	bne.n	8003670 <HAL_RCC_OscConfig+0xbc>
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a71      	ldr	r2, [pc, #452]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800365c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	4b6f      	ldr	r3, [pc, #444]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6e      	ldr	r2, [pc, #440]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e00b      	b.n	8003688 <HAL_RCC_OscConfig+0xd4>
 8003670:	4b6b      	ldr	r3, [pc, #428]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6a      	ldr	r2, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a67      	ldr	r2, [pc, #412]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d013      	beq.n	80036b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fd fa7e 	bl	8000b90 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003698:	f7fd fa7a 	bl	8000b90 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b64      	cmp	r3, #100	; 0x64
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e1fa      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	4b5d      	ldr	r3, [pc, #372]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0xe4>
 80036b6:	e014      	b.n	80036e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fa6a 	bl	8000b90 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c0:	f7fd fa66 	bl	8000b90 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b64      	cmp	r3, #100	; 0x64
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e1e6      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	4b53      	ldr	r3, [pc, #332]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x10c>
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d063      	beq.n	80037b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036ee:	4b4c      	ldr	r3, [pc, #304]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 030c 	and.w	r3, r3, #12
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00b      	beq.n	8003712 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80036fa:	4b49      	ldr	r3, [pc, #292]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b08      	cmp	r3, #8
 8003704:	d11c      	bne.n	8003740 <HAL_RCC_OscConfig+0x18c>
 8003706:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d116      	bne.n	8003740 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003712:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <HAL_RCC_OscConfig+0x176>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d001      	beq.n	800372a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e1ba      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372a:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	4939      	ldr	r1, [pc, #228]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800373a:	4313      	orrs	r3, r2
 800373c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800373e:	e03a      	b.n	80037b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d020      	beq.n	800378a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003748:	4b36      	ldr	r3, [pc, #216]	; (8003824 <HAL_RCC_OscConfig+0x270>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374e:	f7fd fa1f 	bl	8000b90 <HAL_GetTick>
 8003752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	e008      	b.n	8003768 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003756:	f7fd fa1b 	bl	8000b90 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e19b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003768:	4b2d      	ldr	r3, [pc, #180]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0f0      	beq.n	8003756 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003774:	4b2a      	ldr	r3, [pc, #168]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4927      	ldr	r1, [pc, #156]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 8003784:	4313      	orrs	r3, r2
 8003786:	600b      	str	r3, [r1, #0]
 8003788:	e015      	b.n	80037b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800378a:	4b26      	ldr	r3, [pc, #152]	; (8003824 <HAL_RCC_OscConfig+0x270>)
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fd f9fe 	bl	8000b90 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003798:	f7fd f9fa 	bl	8000b90 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e17a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f0      	bne.n	8003798 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d03a      	beq.n	8003838 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d019      	beq.n	80037fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <HAL_RCC_OscConfig+0x274>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fd f9de 	bl	8000b90 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fd f9da 	bl	8000b90 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e15a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d0f0      	beq.n	80037d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80037f6:	2001      	movs	r0, #1
 80037f8:	f000 fac6 	bl	8003d88 <RCC_Delay>
 80037fc:	e01c      	b.n	8003838 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fe:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <HAL_RCC_OscConfig+0x274>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fd f9c4 	bl	8000b90 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380a:	e00f      	b.n	800382c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380c:	f7fd f9c0 	bl	8000b90 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d908      	bls.n	800382c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e140      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000
 8003824:	42420000 	.word	0x42420000
 8003828:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	4b9e      	ldr	r3, [pc, #632]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e9      	bne.n	800380c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a6 	beq.w	8003992 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b97      	ldr	r3, [pc, #604]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b94      	ldr	r3, [pc, #592]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4a93      	ldr	r2, [pc, #588]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003860:	61d3      	str	r3, [r2, #28]
 8003862:	4b91      	ldr	r3, [pc, #580]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003872:	4b8e      	ldr	r3, [pc, #568]	; (8003aac <HAL_RCC_OscConfig+0x4f8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387a:	2b00      	cmp	r3, #0
 800387c:	d118      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387e:	4b8b      	ldr	r3, [pc, #556]	; (8003aac <HAL_RCC_OscConfig+0x4f8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a8a      	ldr	r2, [pc, #552]	; (8003aac <HAL_RCC_OscConfig+0x4f8>)
 8003884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003888:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388a:	f7fd f981 	bl	8000b90 <HAL_GetTick>
 800388e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd f97d 	bl	8000b90 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b64      	cmp	r3, #100	; 0x64
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e0fd      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4b81      	ldr	r3, [pc, #516]	; (8003aac <HAL_RCC_OscConfig+0x4f8>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0f0      	beq.n	8003892 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d106      	bne.n	80038c6 <HAL_RCC_OscConfig+0x312>
 80038b8:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a7a      	ldr	r2, [pc, #488]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	6213      	str	r3, [r2, #32]
 80038c4:	e02d      	b.n	8003922 <HAL_RCC_OscConfig+0x36e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x334>
 80038ce:	4b76      	ldr	r3, [pc, #472]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	4a75      	ldr	r2, [pc, #468]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	6213      	str	r3, [r2, #32]
 80038da:	4b73      	ldr	r3, [pc, #460]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	4a72      	ldr	r2, [pc, #456]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038e0:	f023 0304 	bic.w	r3, r3, #4
 80038e4:	6213      	str	r3, [r2, #32]
 80038e6:	e01c      	b.n	8003922 <HAL_RCC_OscConfig+0x36e>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_OscConfig+0x356>
 80038f0:	4b6d      	ldr	r3, [pc, #436]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	4a6c      	ldr	r2, [pc, #432]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6213      	str	r3, [r2, #32]
 80038fc:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4a69      	ldr	r2, [pc, #420]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	6213      	str	r3, [r2, #32]
 8003908:	e00b      	b.n	8003922 <HAL_RCC_OscConfig+0x36e>
 800390a:	4b67      	ldr	r3, [pc, #412]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	4a66      	ldr	r2, [pc, #408]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003910:	f023 0301 	bic.w	r3, r3, #1
 8003914:	6213      	str	r3, [r2, #32]
 8003916:	4b64      	ldr	r3, [pc, #400]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	4a63      	ldr	r2, [pc, #396]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800391c:	f023 0304 	bic.w	r3, r3, #4
 8003920:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d015      	beq.n	8003956 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd f931 	bl	8000b90 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003930:	e00a      	b.n	8003948 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fd f92d 	bl	8000b90 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003940:	4293      	cmp	r3, r2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0ab      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0ee      	beq.n	8003932 <HAL_RCC_OscConfig+0x37e>
 8003954:	e014      	b.n	8003980 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003956:	f7fd f91b 	bl	8000b90 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd f917 	bl	8000b90 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e095      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1ee      	bne.n	800395e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003980:	7dfb      	ldrb	r3, [r7, #23]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4b48      	ldr	r3, [pc, #288]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003988:	69db      	ldr	r3, [r3, #28]
 800398a:	4a47      	ldr	r2, [pc, #284]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8081 	beq.w	8003a9e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800399c:	4b42      	ldr	r3, [pc, #264]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 030c 	and.w	r3, r3, #12
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d061      	beq.n	8003a6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d146      	bne.n	8003a3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b0:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_OscConfig+0x4fc>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b6:	f7fd f8eb 	bl	8000b90 <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039be:	f7fd f8e7 	bl	8000b90 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e067      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d0:	4b35      	ldr	r3, [pc, #212]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039e4:	d108      	bne.n	80039f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80039e6:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	492d      	ldr	r1, [pc, #180]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a19      	ldr	r1, [r3, #32]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	430b      	orrs	r3, r1
 8003a0a:	4927      	ldr	r1, [pc, #156]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_RCC_OscConfig+0x4fc>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a16:	f7fd f8bb 	bl	8000b90 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a1e:	f7fd f8b7 	bl	8000b90 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e037      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a30:	4b1d      	ldr	r3, [pc, #116]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0f0      	beq.n	8003a1e <HAL_RCC_OscConfig+0x46a>
 8003a3c:	e02f      	b.n	8003a9e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_RCC_OscConfig+0x4fc>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd f8a4 	bl	8000b90 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd f8a0 	bl	8000b90 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e020      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x498>
 8003a6a:	e018      	b.n	8003a9e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e013      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_OscConfig+0x4f4>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	40007000 	.word	0x40007000
 8003ab0:	42420060 	.word	0x42420060

08003ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0d0      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b6a      	ldr	r3, [pc, #424]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b67      	ldr	r3, [pc, #412]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4965      	ldr	r1, [pc, #404]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a58      	ldr	r2, [pc, #352]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d040      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d115      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b41      	ldr	r3, [pc, #260]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e073      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3d      	ldr	r3, [pc, #244]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06b      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4936      	ldr	r1, [pc, #216]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fc fff4 	bl	8000b90 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fc fff0 	bl	8000b90 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e053      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b27      	ldr	r3, [pc, #156]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d210      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b24      	ldr	r3, [pc, #144]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 0207 	bic.w	r2, r3, #7
 8003bea:	4922      	ldr	r1, [pc, #136]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	4a0a      	ldr	r2, [pc, #40]	; (8003c7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	fa21 f303 	lsr.w	r3, r1, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_ClockConfig+0x1cc>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1d0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc ff52 	bl	8000b0c <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	080086d0 	.word	0x080086d0
 8003c80:	20000000 	.word	0x20000000
 8003c84:	20000004 	.word	0x20000004

08003c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	b490      	push	{r4, r7}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c90:	1d3c      	adds	r4, r7, #4
 8003c92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c98:	4b28      	ldr	r3, [pc, #160]	; (8003d3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61bb      	str	r3, [r7, #24]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d003      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x46>
 8003cc6:	e02d      	b.n	8003d24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cca:	623b      	str	r3, [r7, #32]
      break;
 8003ccc:	e02d      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	0c9b      	lsrs	r3, r3, #18
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cda:	4413      	add	r3, r2
 8003cdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ce0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d013      	beq.n	8003d14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cec:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	0c5b      	lsrs	r3, r3, #17
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4a0f      	ldr	r2, [pc, #60]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d06:	fb02 f203 	mul.w	r2, r2, r3
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24
 8003d12:	e004      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d18:	fb02 f303 	mul.w	r3, r2, r3
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	623b      	str	r3, [r7, #32]
      break;
 8003d22:	e002      	b.n	8003d2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d26:	623b      	str	r3, [r7, #32]
      break;
 8003d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bc90      	pop	{r4, r7}
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	08008674 	.word	0x08008674
 8003d3c:	08008684 	.word	0x08008684
 8003d40:	40021000 	.word	0x40021000
 8003d44:	007a1200 	.word	0x007a1200
 8003d48:	003d0900 	.word	0x003d0900

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d50:	4b02      	ldr	r3, [pc, #8]	; (8003d5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bc80      	pop	{r7}
 8003d5a:	4770      	bx	lr
 8003d5c:	20000000 	.word	0x20000000

08003d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d64:	f7ff fff2 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003d68:	4601      	mov	r1, r0
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4a03      	ldr	r2, [pc, #12]	; (8003d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d76:	5cd3      	ldrb	r3, [r2, r3]
 8003d78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40021000 	.word	0x40021000
 8003d84:	080086e0 	.word	0x080086e0

08003d88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d90:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <RCC_Delay+0x34>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a0a      	ldr	r2, [pc, #40]	; (8003dc0 <RCC_Delay+0x38>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0a5b      	lsrs	r3, r3, #9
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003da4:	bf00      	nop
  }
  while (Delay --);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1e5a      	subs	r2, r3, #1
 8003daa:	60fa      	str	r2, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f9      	bne.n	8003da4 <RCC_Delay+0x1c>
}
 8003db0:	bf00      	nop
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	10624dd3 	.word	0x10624dd3

08003dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	613b      	str	r3, [r7, #16]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d07d      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de4:	4b4f      	ldr	r3, [pc, #316]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b4c      	ldr	r3, [pc, #304]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	4a4b      	ldr	r2, [pc, #300]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	61d3      	str	r3, [r2, #28]
 8003dfc:	4b49      	ldr	r3, [pc, #292]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d118      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e18:	4b43      	ldr	r3, [pc, #268]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a42      	ldr	r2, [pc, #264]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e24:	f7fc feb4 	bl	8000b90 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2a:	e008      	b.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fc feb0 	bl	8000b90 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b64      	cmp	r3, #100	; 0x64
 8003e38:	d901      	bls.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e06d      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	4b3a      	ldr	r3, [pc, #232]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e4a:	4b36      	ldr	r3, [pc, #216]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d02e      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d027      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e68:	4b2e      	ldr	r3, [pc, #184]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e72:	4b2e      	ldr	r3, [pc, #184]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e78:	4b2c      	ldr	r3, [pc, #176]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e7e:	4a29      	ldr	r2, [pc, #164]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d014      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8e:	f7fc fe7f 	bl	8000b90 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e94:	e00a      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e96:	f7fc fe7b 	bl	8000b90 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e036      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0ee      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb8:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	4917      	ldr	r1, [pc, #92]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003eca:	7dfb      	ldrb	r3, [r7, #23]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ee8:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	490b      	ldr	r1, [pc, #44]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	4904      	ldr	r1, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	42420440 	.word	0x42420440

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e01d      	b.n	8003f7e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7fc fc6a 	bl	8000830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 faf0 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e01d      	b.n	8003fd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d106      	bne.n	8003fb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f815 	bl	8003fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f000 fac5 	bl	8004554 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b082      	sub	sp, #8
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d122      	bne.n	800404a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b02      	cmp	r3, #2
 8004010:	d11b      	bne.n	800404a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f06f 0202 	mvn.w	r2, #2
 800401a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fa74 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004036:	e005      	b.n	8004044 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fa67 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f000 fa76 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b04      	cmp	r3, #4
 8004056:	d122      	bne.n	800409e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d11b      	bne.n	800409e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f06f 0204 	mvn.w	r2, #4
 800406e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 fa4a 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 800408a:	e005      	b.n	8004098 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa3d 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fa4c 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d122      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d11b      	bne.n	80040f2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f06f 0208 	mvn.w	r2, #8
 80040c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2204      	movs	r2, #4
 80040c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 fa20 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 80040de:	e005      	b.n	80040ec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa13 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fa22 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b10      	cmp	r3, #16
 80040fe:	d122      	bne.n	8004146 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d11b      	bne.n	8004146 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f06f 0210 	mvn.w	r2, #16
 8004116:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2208      	movs	r2, #8
 800411c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004128:	2b00      	cmp	r3, #0
 800412a:	d003      	beq.n	8004134 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f9f6 	bl	800451e <HAL_TIM_IC_CaptureCallback>
 8004132:	e005      	b.n	8004140 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f9e9 	bl	800450c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9f8 	bl	8004530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d10e      	bne.n	8004172 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0201 	mvn.w	r2, #1
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f9c4 	bl	80044fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417c:	2b80      	cmp	r3, #128	; 0x80
 800417e:	d10e      	bne.n	800419e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b80      	cmp	r3, #128	; 0x80
 800418c:	d107      	bne.n	800419e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fca8 	bl	8004aee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d10e      	bne.n	80041ca <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d107      	bne.n	80041ca <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f9bc 	bl	8004542 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0320 	and.w	r3, r3, #32
 80041d4:	2b20      	cmp	r3, #32
 80041d6:	d10e      	bne.n	80041f6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d107      	bne.n	80041f6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f06f 0220 	mvn.w	r2, #32
 80041ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fc73 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004216:	2302      	movs	r3, #2
 8004218:	e0b4      	b.n	8004384 <HAL_TIM_PWM_ConfigChannel+0x184>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	f200 809f 	bhi.w	8004370 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004371 	.word	0x08004371
 8004240:	08004371 	.word	0x08004371
 8004244:	08004371 	.word	0x08004371
 8004248:	080042ad 	.word	0x080042ad
 800424c:	08004371 	.word	0x08004371
 8004250:	08004371 	.word	0x08004371
 8004254:	08004371 	.word	0x08004371
 8004258:	080042ef 	.word	0x080042ef
 800425c:	08004371 	.word	0x08004371
 8004260:	08004371 	.word	0x08004371
 8004264:	08004371 	.word	0x08004371
 8004268:	0800432f 	.word	0x0800432f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f9d0 	bl	8004618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      break;
 80042aa:	e062      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fa16 	bl	80046e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e041      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fa5f 	bl	80047b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
      break;
 800432c:	e021      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 faa9 	bl	800488c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
      break;
 800436e:	e000      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004370:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0a6      	b.n	80044f2 <HAL_TIM_ConfigClockSource+0x166>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d067      	beq.n	80044ac <HAL_TIM_ConfigClockSource+0x120>
 80043dc:	2b40      	cmp	r3, #64	; 0x40
 80043de:	d80b      	bhi.n	80043f8 <HAL_TIM_ConfigClockSource+0x6c>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d073      	beq.n	80044cc <HAL_TIM_ConfigClockSource+0x140>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d802      	bhi.n	80043ee <HAL_TIM_ConfigClockSource+0x62>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d06f      	beq.n	80044cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80043ec:	e078      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043ee:	2b20      	cmp	r3, #32
 80043f0:	d06c      	beq.n	80044cc <HAL_TIM_ConfigClockSource+0x140>
 80043f2:	2b30      	cmp	r3, #48	; 0x30
 80043f4:	d06a      	beq.n	80044cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80043f6:	e073      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d00d      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x8c>
 80043fc:	2b70      	cmp	r3, #112	; 0x70
 80043fe:	d804      	bhi.n	800440a <HAL_TIM_ConfigClockSource+0x7e>
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d033      	beq.n	800446c <HAL_TIM_ConfigClockSource+0xe0>
 8004404:	2b60      	cmp	r3, #96	; 0x60
 8004406:	d041      	beq.n	800448c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004408:	e06a      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800440a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800440e:	d066      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x152>
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d017      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004416:	e063      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6899      	ldr	r1, [r3, #8]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	f000 faf5 	bl	8004a16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800443a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]
      break;
 8004444:	e04c      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6899      	ldr	r1, [r3, #8]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f000 fade 	bl	8004a16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004468:	609a      	str	r2, [r3, #8]
      break;
 800446a:	e039      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	461a      	mov	r2, r3
 800447a:	f000 fa55 	bl	8004928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2150      	movs	r1, #80	; 0x50
 8004484:	4618      	mov	r0, r3
 8004486:	f000 faac 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 800448a:	e029      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6859      	ldr	r1, [r3, #4]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	461a      	mov	r2, r3
 800449a:	f000 fa73 	bl	8004984 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2160      	movs	r1, #96	; 0x60
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 fa9c 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 80044aa:	e019      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	6859      	ldr	r1, [r3, #4]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	461a      	mov	r2, r3
 80044ba:	f000 fa35 	bl	8004928 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2140      	movs	r1, #64	; 0x40
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fa8c 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 80044ca:	e009      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f000 fa83 	bl	80049e2 <TIM_ITRx_SetConfig>
      break;
 80044dc:	e000      	b.n	80044e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80044de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr

0800451e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800451e:	b480      	push	{r7}
 8004520:	b083      	sub	sp, #12
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr

08004554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <TIM_Base_SetConfig+0xb8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00b      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004572:	d007      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a26      	ldr	r2, [pc, #152]	; (8004610 <TIM_Base_SetConfig+0xbc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d003      	beq.n	8004584 <TIM_Base_SetConfig+0x30>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a25      	ldr	r2, [pc, #148]	; (8004614 <TIM_Base_SetConfig+0xc0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <TIM_Base_SetConfig+0xb8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d00b      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a4:	d007      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a19      	ldr	r2, [pc, #100]	; (8004610 <TIM_Base_SetConfig+0xbc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d003      	beq.n	80045b6 <TIM_Base_SetConfig+0x62>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a18      	ldr	r2, [pc, #96]	; (8004614 <TIM_Base_SetConfig+0xc0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d108      	bne.n	80045c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a07      	ldr	r2, [pc, #28]	; (800460c <TIM_Base_SetConfig+0xb8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d103      	bne.n	80045fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	691a      	ldr	r2, [r3, #16]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	615a      	str	r2, [r3, #20]
}
 8004602:	bf00      	nop
 8004604:	3714      	adds	r7, #20
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr
 800460c:	40012c00 	.word	0x40012c00
 8004610:	40000400 	.word	0x40000400
 8004614:	40000800 	.word	0x40000800

08004618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0303 	bic.w	r3, r3, #3
 800464e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f023 0302 	bic.w	r3, r3, #2
 8004660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1c      	ldr	r2, [pc, #112]	; (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10c      	bne.n	800468e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0308 	bic.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <TIM_OC1_SetConfig+0xc8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d111      	bne.n	80046ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800469c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	621a      	str	r2, [r3, #32]
}
 80046d4:	bf00      	nop
 80046d6:	371c      	adds	r7, #28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bc80      	pop	{r7}
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40012c00 	.word	0x40012c00

080046e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0210 	bic.w	r2, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	699b      	ldr	r3, [r3, #24]
 800470a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800471a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	021b      	lsls	r3, r3, #8
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4313      	orrs	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0320 	bic.w	r3, r3, #32
 800472e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a1d      	ldr	r2, [pc, #116]	; (80047b4 <TIM_OC2_SetConfig+0xd0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10d      	bne.n	8004760 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	4313      	orrs	r3, r2
 8004756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <TIM_OC2_SetConfig+0xd0>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d113      	bne.n	8004790 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bc80      	pop	{r7}
 80047b2:	4770      	bx	lr
 80047b4:	40012c00 	.word	0x40012c00

080047b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b087      	sub	sp, #28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0303 	bic.w	r3, r3, #3
 80047ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	021b      	lsls	r3, r3, #8
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <TIM_OC3_SetConfig+0xd0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d10d      	bne.n	8004832 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800481c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	021b      	lsls	r3, r3, #8
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a14      	ldr	r2, [pc, #80]	; (8004888 <TIM_OC3_SetConfig+0xd0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d113      	bne.n	8004862 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4313      	orrs	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	011b      	lsls	r3, r3, #4
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	621a      	str	r2, [r3, #32]
}
 800487c:	bf00      	nop
 800487e:	371c      	adds	r7, #28
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00

0800488c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	031b      	lsls	r3, r3, #12
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <TIM_OC4_SetConfig+0x98>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d109      	bne.n	8004900 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	019b      	lsls	r3, r3, #6
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	621a      	str	r2, [r3, #32]
}
 800491a:	bf00      	nop
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	bc80      	pop	{r7}
 8004922:	4770      	bx	lr
 8004924:	40012c00 	.word	0x40012c00

08004928 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0201 	bic.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004952:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f023 030a 	bic.w	r3, r3, #10
 8004964:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	621a      	str	r2, [r3, #32]
}
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004984:	b480      	push	{r7}
 8004986:	b087      	sub	sp, #28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f023 0210 	bic.w	r2, r3, #16
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	031b      	lsls	r3, r3, #12
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f043 0307 	orr.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	609a      	str	r2, [r3, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr

08004a16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b087      	sub	sp, #28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	021a      	lsls	r2, r3, #8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	609a      	str	r2, [r3, #8]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e032      	b.n	8004ad2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bc80      	pop	{r7}
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr

08004aee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af6:	bf00      	nop
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bc80      	pop	{r7}
 8004afe:	4770      	bx	lr

08004b00 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b00:	b084      	sub	sp, #16
 8004b02:	b480      	push	{r7}
 8004b04:	b083      	sub	sp, #12
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	f107 0014 	add.w	r0, r7, #20
 8004b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bc80      	pop	{r7}
 8004b1c:	b004      	add	sp, #16
 8004b1e:	4770      	bx	lr

08004b20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b28:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b2c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	89fb      	ldrh	r3, [r7, #14]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004b56:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004b5a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	b21a      	sxth	r2, r3
 8004b66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	b21b      	sxth	r3, r3
 8004b6e:	4013      	ands	r3, r2
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr

08004b86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	460b      	mov	r3, r1
 8004b90:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr

08004b9e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	f107 0014 	add.w	r0, r7, #20
 8004bac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff ffa5 	bl	8004b20 <USB_EnableGlobalInt>

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004be2:	b004      	add	sp, #16
 8004be4:	4770      	bx	lr
	...

08004be8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be8:	b490      	push	{r4, r7}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	881b      	ldrh	r3, [r3, #0]
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	78db      	ldrb	r3, [r3, #3]
 8004c12:	2b03      	cmp	r3, #3
 8004c14:	d819      	bhi.n	8004c4a <USB_ActivateEndpoint+0x62>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <USB_ActivateEndpoint+0x34>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c2d 	.word	0x08004c2d
 8004c20:	08004c41 	.word	0x08004c41
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c37 	.word	0x08004c37
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004c2c:	89bb      	ldrh	r3, [r7, #12]
 8004c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c32:	81bb      	strh	r3, [r7, #12]
      break;
 8004c34:	e00d      	b.n	8004c52 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004c36:	89bb      	ldrh	r3, [r7, #12]
 8004c38:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004c3c:	81bb      	strh	r3, [r7, #12]
      break;
 8004c3e:	e008      	b.n	8004c52 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004c40:	89bb      	ldrh	r3, [r7, #12]
 8004c42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c46:	81bb      	strh	r3, [r7, #12]
      break;
 8004c48:	e003      	b.n	8004c52 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4e:	e000      	b.n	8004c52 <USB_ActivateEndpoint+0x6a>
      break;
 8004c50:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	441a      	add	r2, r3
 8004c5c:	89bb      	ldrh	r3, [r7, #12]
 8004c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	881b      	ldrh	r3, [r3, #0]
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	4313      	orrs	r3, r2
 8004c92:	b29c      	uxth	r4, r3
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	4b8a      	ldr	r3, [pc, #552]	; (8004ec8 <USB_ActivateEndpoint+0x2e0>)
 8004ca0:	4323      	orrs	r3, r4
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	7b1b      	ldrb	r3, [r3, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 8112 	bne.w	8004ed4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	785b      	ldrb	r3, [r3, #1]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d067      	beq.n	8004d88 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004cb8:	687c      	ldr	r4, [r7, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	441c      	add	r4, r3
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	4423      	add	r3, r4
 8004ccc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cd0:	461c      	mov	r4, r3
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	085b      	lsrs	r3, r3, #1
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	005b      	lsls	r3, r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29c      	uxth	r4, r3
 8004cee:	4623      	mov	r3, r4
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d014      	beq.n	8004d22 <USB_ActivateEndpoint+0x13a>
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	881b      	ldrh	r3, [r3, #0]
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0e:	b29c      	uxth	r4, r3
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	441a      	add	r2, r3
 8004d1a:	4b6c      	ldr	r3, [pc, #432]	; (8004ecc <USB_ActivateEndpoint+0x2e4>)
 8004d1c:	4323      	orrs	r3, r4
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	78db      	ldrb	r3, [r3, #3]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d018      	beq.n	8004d5c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	881b      	ldrh	r3, [r3, #0]
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d40:	b29c      	uxth	r4, r3
 8004d42:	f084 0320 	eor.w	r3, r4, #32
 8004d46:	b29c      	uxth	r4, r3
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <USB_ActivateEndpoint+0x2e0>)
 8004d54:	4323      	orrs	r3, r4
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
 8004d5a:	e22b      	b.n	80051b4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d72:	b29c      	uxth	r4, r3
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	441a      	add	r2, r3
 8004d7e:	4b52      	ldr	r3, [pc, #328]	; (8004ec8 <USB_ActivateEndpoint+0x2e0>)
 8004d80:	4323      	orrs	r3, r4
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
 8004d86:	e215      	b.n	80051b4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004d88:	687c      	ldr	r4, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	441c      	add	r4, r3
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	4423      	add	r3, r4
 8004d9c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004da0:	461c      	mov	r4, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	88db      	ldrh	r3, [r3, #6]
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004db0:	687c      	ldr	r4, [r7, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	441c      	add	r4, r3
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4423      	add	r3, r4
 8004dc4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004dc8:	461c      	mov	r4, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <USB_ActivateEndpoint+0x208>
 8004dd2:	8823      	ldrh	r3, [r4, #0]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8023      	strh	r3, [r4, #0]
 8004dde:	8823      	ldrh	r3, [r4, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8023      	strh	r3, [r4, #0]
 8004dee:	e02d      	b.n	8004e4c <USB_ActivateEndpoint+0x264>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b3e      	cmp	r3, #62	; 0x3e
 8004df6:	d812      	bhi.n	8004e1e <USB_ActivateEndpoint+0x236>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	085b      	lsrs	r3, r3, #1
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d002      	beq.n	8004e12 <USB_ActivateEndpoint+0x22a>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	029b      	lsls	r3, r3, #10
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	8023      	strh	r3, [r4, #0]
 8004e1c:	e016      	b.n	8004e4c <USB_ActivateEndpoint+0x264>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	60bb      	str	r3, [r7, #8]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <USB_ActivateEndpoint+0x250>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	029b      	lsls	r3, r3, #10
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	b29c      	uxth	r4, r3
 8004e5a:	4623      	mov	r3, r4
 8004e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d014      	beq.n	8004e8e <USB_ActivateEndpoint+0x2a6>
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	b29c      	uxth	r4, r3
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	441a      	add	r2, r3
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <USB_ActivateEndpoint+0x2e8>)
 8004e88:	4323      	orrs	r3, r4
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	b29c      	uxth	r4, r3
 8004ea6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004eaa:	b29c      	uxth	r4, r3
 8004eac:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004eb0:	b29c      	uxth	r4, r3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	441a      	add	r2, r3
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <USB_ActivateEndpoint+0x2e0>)
 8004ebe:	4323      	orrs	r3, r4
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
 8004ec4:	e176      	b.n	80051b4 <USB_ActivateEndpoint+0x5cc>
 8004ec6:	bf00      	nop
 8004ec8:	ffff8080 	.word	0xffff8080
 8004ecc:	ffff80c0 	.word	0xffff80c0
 8004ed0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	b29c      	uxth	r4, r3
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	441a      	add	r2, r3
 8004ef6:	4b96      	ldr	r3, [pc, #600]	; (8005150 <USB_ActivateEndpoint+0x568>)
 8004ef8:	4323      	orrs	r3, r4
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004efe:	687c      	ldr	r4, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	441c      	add	r4, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4423      	add	r3, r4
 8004f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f16:	461c      	mov	r4, r3
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	891b      	ldrh	r3, [r3, #8]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8023      	strh	r3, [r4, #0]
 8004f26:	687c      	ldr	r4, [r7, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	441c      	add	r4, r3
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	4423      	add	r3, r4
 8004f3a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004f3e:	461c      	mov	r4, r3
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	895b      	ldrh	r3, [r3, #10]
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f040 8088 	bne.w	8005068 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	881b      	ldrh	r3, [r3, #0]
 8004f64:	b29c      	uxth	r4, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d014      	beq.n	8004f9a <USB_ActivateEndpoint+0x3b2>
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f86:	b29c      	uxth	r4, r3
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	441a      	add	r2, r3
 8004f92:	4b70      	ldr	r3, [pc, #448]	; (8005154 <USB_ActivateEndpoint+0x56c>)
 8004f94:	4323      	orrs	r3, r4
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	881b      	ldrh	r3, [r3, #0]
 8004fa6:	b29c      	uxth	r4, r3
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d014      	beq.n	8004fdc <USB_ActivateEndpoint+0x3f4>
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	881b      	ldrh	r3, [r3, #0]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	b29c      	uxth	r4, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	4b60      	ldr	r3, [pc, #384]	; (8005158 <USB_ActivateEndpoint+0x570>)
 8004fd6:	4323      	orrs	r3, r4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	b29c      	uxth	r4, r3
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	441a      	add	r2, r3
 8004ffe:	4b56      	ldr	r3, [pc, #344]	; (8005158 <USB_ActivateEndpoint+0x570>)
 8005000:	4323      	orrs	r3, r4
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501c:	b29c      	uxth	r4, r3
 800501e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005022:	b29c      	uxth	r4, r3
 8005024:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005028:	b29c      	uxth	r4, r3
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	441a      	add	r2, r3
 8005034:	4b49      	ldr	r3, [pc, #292]	; (800515c <USB_ActivateEndpoint+0x574>)
 8005036:	4323      	orrs	r3, r4
 8005038:	b29b      	uxth	r3, r3
 800503a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	b29b      	uxth	r3, r3
 800504a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	b29c      	uxth	r4, r3
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	441a      	add	r2, r3
 800505e:	4b3f      	ldr	r3, [pc, #252]	; (800515c <USB_ActivateEndpoint+0x574>)
 8005060:	4323      	orrs	r3, r4
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]
 8005066:	e0a5      	b.n	80051b4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	881b      	ldrh	r3, [r3, #0]
 8005074:	b29c      	uxth	r4, r3
 8005076:	4623      	mov	r3, r4
 8005078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d014      	beq.n	80050aa <USB_ActivateEndpoint+0x4c2>
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	4413      	add	r3, r2
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	b29c      	uxth	r4, r3
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	441a      	add	r2, r3
 80050a2:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <USB_ActivateEndpoint+0x56c>)
 80050a4:	4323      	orrs	r3, r4
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	881b      	ldrh	r3, [r3, #0]
 80050b6:	b29c      	uxth	r4, r3
 80050b8:	4623      	mov	r3, r4
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d014      	beq.n	80050ec <USB_ActivateEndpoint+0x504>
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d8:	b29c      	uxth	r4, r3
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	441a      	add	r2, r3
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <USB_ActivateEndpoint+0x570>)
 80050e6:	4323      	orrs	r3, r4
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	b29c      	uxth	r4, r3
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	441a      	add	r2, r3
 800510e:	4b11      	ldr	r3, [pc, #68]	; (8005154 <USB_ActivateEndpoint+0x56c>)
 8005110:	4323      	orrs	r3, r4
 8005112:	b29b      	uxth	r3, r3
 8005114:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	78db      	ldrb	r3, [r3, #3]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d020      	beq.n	8005160 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005134:	b29c      	uxth	r4, r3
 8005136:	f084 0320 	eor.w	r3, r4, #32
 800513a:	b29c      	uxth	r4, r3
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	441a      	add	r2, r3
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <USB_ActivateEndpoint+0x574>)
 8005148:	4323      	orrs	r3, r4
 800514a:	b29b      	uxth	r3, r3
 800514c:	8013      	strh	r3, [r2, #0]
 800514e:	e01c      	b.n	800518a <USB_ActivateEndpoint+0x5a2>
 8005150:	ffff8180 	.word	0xffff8180
 8005154:	ffffc080 	.word	0xffffc080
 8005158:	ffff80c0 	.word	0xffff80c0
 800515c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005176:	b29c      	uxth	r4, r3
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <USB_ActivateEndpoint+0x5d8>)
 8005184:	4323      	orrs	r3, r4
 8005186:	b29b      	uxth	r3, r3
 8005188:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	b29c      	uxth	r4, r3
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <USB_ActivateEndpoint+0x5d8>)
 80051ae:	4323      	orrs	r3, r4
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80051b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc90      	pop	{r4, r7}
 80051be:	4770      	bx	lr
 80051c0:	ffff8080 	.word	0xffff8080

080051c4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051c4:	b490      	push	{r4, r7}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	7b1b      	ldrb	r3, [r3, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d171      	bne.n	80052ba <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d036      	beq.n	800524c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29c      	uxth	r4, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d014      	beq.n	8005220 <USB_DeactivateEndpoint+0x5c>
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	b29c      	uxth	r4, r3
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	441a      	add	r2, r3
 8005218:	4b6b      	ldr	r3, [pc, #428]	; (80053c8 <USB_DeactivateEndpoint+0x204>)
 800521a:	4323      	orrs	r3, r4
 800521c:	b29b      	uxth	r3, r3
 800521e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005236:	b29c      	uxth	r4, r3
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	441a      	add	r2, r3
 8005242:	4b62      	ldr	r3, [pc, #392]	; (80053cc <USB_DeactivateEndpoint+0x208>)
 8005244:	4323      	orrs	r3, r4
 8005246:	b29b      	uxth	r3, r3
 8005248:	8013      	strh	r3, [r2, #0]
 800524a:	e144      	b.n	80054d6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29c      	uxth	r4, r3
 800525a:	4623      	mov	r3, r4
 800525c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d014      	beq.n	800528e <USB_DeactivateEndpoint+0xca>
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	b29b      	uxth	r3, r3
 8005272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	b29c      	uxth	r4, r3
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	4b52      	ldr	r3, [pc, #328]	; (80053d0 <USB_DeactivateEndpoint+0x20c>)
 8005288:	4323      	orrs	r3, r4
 800528a:	b29b      	uxth	r3, r3
 800528c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b29b      	uxth	r3, r3
 800529c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a4:	b29c      	uxth	r4, r3
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	441a      	add	r2, r3
 80052b0:	4b46      	ldr	r3, [pc, #280]	; (80053cc <USB_DeactivateEndpoint+0x208>)
 80052b2:	4323      	orrs	r3, r4
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8013      	strh	r3, [r2, #0]
 80052b8:	e10d      	b.n	80054d6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	785b      	ldrb	r3, [r3, #1]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 8088 	bne.w	80053d4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	b29c      	uxth	r4, r3
 80052d2:	4623      	mov	r3, r4
 80052d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d014      	beq.n	8005306 <USB_DeactivateEndpoint+0x142>
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	b29c      	uxth	r4, r3
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	441a      	add	r2, r3
 80052fe:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <USB_DeactivateEndpoint+0x20c>)
 8005300:	4323      	orrs	r3, r4
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29c      	uxth	r4, r3
 8005314:	4623      	mov	r3, r4
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	d014      	beq.n	8005348 <USB_DeactivateEndpoint+0x184>
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005334:	b29c      	uxth	r4, r3
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	441a      	add	r2, r3
 8005340:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <USB_DeactivateEndpoint+0x204>)
 8005342:	4323      	orrs	r3, r4
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	b29c      	uxth	r4, r3
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	441a      	add	r2, r3
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <USB_DeactivateEndpoint+0x204>)
 800536c:	4323      	orrs	r3, r4
 800536e:	b29b      	uxth	r3, r3
 8005370:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005388:	b29c      	uxth	r4, r3
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	4b0d      	ldr	r3, [pc, #52]	; (80053cc <USB_DeactivateEndpoint+0x208>)
 8005396:	4323      	orrs	r3, r4
 8005398:	b29b      	uxth	r3, r3
 800539a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	4413      	add	r3, r2
 80053a6:	881b      	ldrh	r3, [r3, #0]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b2:	b29c      	uxth	r4, r3
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	441a      	add	r2, r3
 80053be:	4b03      	ldr	r3, [pc, #12]	; (80053cc <USB_DeactivateEndpoint+0x208>)
 80053c0:	4323      	orrs	r3, r4
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	8013      	strh	r3, [r2, #0]
 80053c6:	e086      	b.n	80054d6 <USB_DeactivateEndpoint+0x312>
 80053c8:	ffff80c0 	.word	0xffff80c0
 80053cc:	ffff8080 	.word	0xffff8080
 80053d0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d014      	beq.n	8005416 <USB_DeactivateEndpoint+0x252>
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005402:	b29c      	uxth	r4, r3
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	4b35      	ldr	r3, [pc, #212]	; (80054e4 <USB_DeactivateEndpoint+0x320>)
 8005410:	4323      	orrs	r3, r4
 8005412:	b29b      	uxth	r3, r3
 8005414:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29c      	uxth	r4, r3
 8005424:	4623      	mov	r3, r4
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b00      	cmp	r3, #0
 800542c:	d014      	beq.n	8005458 <USB_DeactivateEndpoint+0x294>
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005444:	b29c      	uxth	r4, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	441a      	add	r2, r3
 8005450:	4b25      	ldr	r3, [pc, #148]	; (80054e8 <USB_DeactivateEndpoint+0x324>)
 8005452:	4323      	orrs	r3, r4
 8005454:	b29b      	uxth	r3, r3
 8005456:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	b29c      	uxth	r4, r3
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	441a      	add	r2, r3
 800547a:	4b1a      	ldr	r3, [pc, #104]	; (80054e4 <USB_DeactivateEndpoint+0x320>)
 800547c:	4323      	orrs	r3, r4
 800547e:	b29b      	uxth	r3, r3
 8005480:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4413      	add	r3, r2
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	b29b      	uxth	r3, r3
 8005490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005498:	b29c      	uxth	r4, r3
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	441a      	add	r2, r3
 80054a4:	4b11      	ldr	r3, [pc, #68]	; (80054ec <USB_DeactivateEndpoint+0x328>)
 80054a6:	4323      	orrs	r3, r4
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054c2:	b29c      	uxth	r4, r3
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	4b07      	ldr	r3, [pc, #28]	; (80054ec <USB_DeactivateEndpoint+0x328>)
 80054d0:	4323      	orrs	r3, r4
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bc90      	pop	{r4, r7}
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	ffffc080 	.word	0xffffc080
 80054e8:	ffff80c0 	.word	0xffff80c0
 80054ec:	ffff8080 	.word	0xffff8080

080054f0 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054f0:	b590      	push	{r4, r7, lr}
 80054f2:	b08d      	sub	sp, #52	; 0x34
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	785b      	ldrb	r3, [r3, #1]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f040 8160 	bne.w	80057c4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	699a      	ldr	r2, [r3, #24]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	429a      	cmp	r2, r3
 800550e:	d909      	bls.n	8005524 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	1ad2      	subs	r2, r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	619a      	str	r2, [r3, #24]
 8005522:	e005      	b.n	8005530 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2200      	movs	r2, #0
 800552e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	7b1b      	ldrb	r3, [r3, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d119      	bne.n	800556c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6959      	ldr	r1, [r3, #20]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	88da      	ldrh	r2, [r3, #6]
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	b29b      	uxth	r3, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fba2 	bl	8005c8e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800554a:	687c      	ldr	r4, [r7, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005552:	b29b      	uxth	r3, r3
 8005554:	441c      	add	r4, r3
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	4423      	add	r3, r4
 800555e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005562:	461c      	mov	r4, r3
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	b29b      	uxth	r3, r3
 8005568:	8023      	strh	r3, [r4, #0]
 800556a:	e10f      	b.n	800578c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b00      	cmp	r3, #0
 8005580:	d065      	beq.n	800564e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005582:	687c      	ldr	r4, [r7, #4]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d148      	bne.n	800561e <USB_EPStartXfer+0x12e>
 800558c:	687c      	ldr	r4, [r7, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	441c      	add	r4, r3
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	4423      	add	r3, r4
 80055a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055a4:	461c      	mov	r4, r3
 80055a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10e      	bne.n	80055ca <USB_EPStartXfer+0xda>
 80055ac:	8823      	ldrh	r3, [r4, #0]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	8023      	strh	r3, [r4, #0]
 80055b8:	8823      	ldrh	r3, [r4, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	8023      	strh	r3, [r4, #0]
 80055c8:	e03d      	b.n	8005646 <USB_EPStartXfer+0x156>
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	2b3e      	cmp	r3, #62	; 0x3e
 80055ce:	d810      	bhi.n	80055f2 <USB_EPStartXfer+0x102>
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	085b      	lsrs	r3, r3, #1
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
 80055d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <USB_EPStartXfer+0xf6>
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	3301      	adds	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	029b      	lsls	r3, r3, #10
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	8023      	strh	r3, [r4, #0]
 80055f0:	e029      	b.n	8005646 <USB_EPStartXfer+0x156>
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <USB_EPStartXfer+0x118>
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	3b01      	subs	r3, #1
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	b29b      	uxth	r3, r3
 800560c:	029b      	lsls	r3, r3, #10
 800560e:	b29b      	uxth	r3, r3
 8005610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005618:	b29b      	uxth	r3, r3
 800561a:	8023      	strh	r3, [r4, #0]
 800561c:	e013      	b.n	8005646 <USB_EPStartXfer+0x156>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d10f      	bne.n	8005646 <USB_EPStartXfer+0x156>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800562c:	b29b      	uxth	r3, r3
 800562e:	441c      	add	r4, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	4423      	add	r3, r4
 8005638:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	b29a      	uxth	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	895b      	ldrh	r3, [r3, #10]
 800564a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800564c:	e063      	b.n	8005716 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	785b      	ldrb	r3, [r3, #1]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d148      	bne.n	80056e8 <USB_EPStartXfer+0x1f8>
 8005656:	687c      	ldr	r4, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565e:	b29b      	uxth	r3, r3
 8005660:	441c      	add	r4, r3
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4423      	add	r3, r4
 800566a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800566e:	461c      	mov	r4, r3
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10e      	bne.n	8005694 <USB_EPStartXfer+0x1a4>
 8005676:	8823      	ldrh	r3, [r4, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800567e:	b29b      	uxth	r3, r3
 8005680:	8023      	strh	r3, [r4, #0]
 8005682:	8823      	ldrh	r3, [r4, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800568e:	b29b      	uxth	r3, r3
 8005690:	8023      	strh	r3, [r4, #0]
 8005692:	e03d      	b.n	8005710 <USB_EPStartXfer+0x220>
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	2b3e      	cmp	r3, #62	; 0x3e
 8005698:	d810      	bhi.n	80056bc <USB_EPStartXfer+0x1cc>
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <USB_EPStartXfer+0x1c0>
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	3301      	adds	r3, #1
 80056ae:	623b      	str	r3, [r7, #32]
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	029b      	lsls	r3, r3, #10
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	8023      	strh	r3, [r4, #0]
 80056ba:	e029      	b.n	8005710 <USB_EPStartXfer+0x220>
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	623b      	str	r3, [r7, #32]
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d102      	bne.n	80056d2 <USB_EPStartXfer+0x1e2>
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	623b      	str	r3, [r7, #32]
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	8023      	strh	r3, [r4, #0]
 80056e6:	e013      	b.n	8005710 <USB_EPStartXfer+0x220>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10f      	bne.n	8005710 <USB_EPStartXfer+0x220>
 80056f0:	687c      	ldr	r4, [r7, #4]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	441c      	add	r4, r3
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	4423      	add	r3, r4
 8005704:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005708:	461c      	mov	r4, r3
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	b29b      	uxth	r3, r3
 800570e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	891b      	ldrh	r3, [r3, #8]
 8005714:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6959      	ldr	r1, [r3, #20]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	b29b      	uxth	r3, r3
 800571e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fab4 	bl	8005c8e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d115      	bne.n	800575a <USB_EPStartXfer+0x26a>
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	b29b      	uxth	r3, r3
 800573c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005744:	b29c      	uxth	r4, r3
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	441a      	add	r2, r3
 8005750:	4b9a      	ldr	r3, [pc, #616]	; (80059bc <USB_EPStartXfer+0x4cc>)
 8005752:	4323      	orrs	r3, r4
 8005754:	b29b      	uxth	r3, r3
 8005756:	8013      	strh	r3, [r2, #0]
 8005758:	e018      	b.n	800578c <USB_EPStartXfer+0x29c>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d114      	bne.n	800578c <USB_EPStartXfer+0x29c>
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	4413      	add	r3, r2
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005778:	b29c      	uxth	r4, r3
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	441a      	add	r2, r3
 8005784:	4b8e      	ldr	r3, [pc, #568]	; (80059c0 <USB_EPStartXfer+0x4d0>)
 8005786:	4323      	orrs	r3, r4
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	4413      	add	r3, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	b29b      	uxth	r3, r3
 800579a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800579e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a2:	b29c      	uxth	r4, r3
 80057a4:	f084 0310 	eor.w	r3, r4, #16
 80057a8:	b29c      	uxth	r4, r3
 80057aa:	f084 0320 	eor.w	r3, r4, #32
 80057ae:	b29c      	uxth	r4, r3
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	441a      	add	r2, r3
 80057ba:	4b82      	ldr	r3, [pc, #520]	; (80059c4 <USB_EPStartXfer+0x4d4>)
 80057bc:	4323      	orrs	r3, r4
 80057be:	b29b      	uxth	r3, r3
 80057c0:	8013      	strh	r3, [r2, #0]
 80057c2:	e146      	b.n	8005a52 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	699a      	ldr	r2, [r3, #24]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d909      	bls.n	80057e4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	699a      	ldr	r2, [r3, #24]
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	1ad2      	subs	r2, r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	619a      	str	r2, [r3, #24]
 80057e2:	e005      	b.n	80057f0 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2200      	movs	r2, #0
 80057ee:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	7b1b      	ldrb	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d148      	bne.n	800588a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057f8:	687c      	ldr	r4, [r7, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005800:	b29b      	uxth	r3, r3
 8005802:	441c      	add	r4, r3
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	011b      	lsls	r3, r3, #4
 800580a:	4423      	add	r3, r4
 800580c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005810:	461c      	mov	r4, r3
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10e      	bne.n	8005836 <USB_EPStartXfer+0x346>
 8005818:	8823      	ldrh	r3, [r4, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005820:	b29b      	uxth	r3, r3
 8005822:	8023      	strh	r3, [r4, #0]
 8005824:	8823      	ldrh	r3, [r4, #0]
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800582c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005830:	b29b      	uxth	r3, r3
 8005832:	8023      	strh	r3, [r4, #0]
 8005834:	e0f2      	b.n	8005a1c <USB_EPStartXfer+0x52c>
 8005836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005838:	2b3e      	cmp	r3, #62	; 0x3e
 800583a:	d810      	bhi.n	800585e <USB_EPStartXfer+0x36e>
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	61fb      	str	r3, [r7, #28]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <USB_EPStartXfer+0x362>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	3301      	adds	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	b29b      	uxth	r3, r3
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	b29b      	uxth	r3, r3
 800585a:	8023      	strh	r3, [r4, #0]
 800585c:	e0de      	b.n	8005a1c <USB_EPStartXfer+0x52c>
 800585e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2b00      	cmp	r3, #0
 800586c:	d102      	bne.n	8005874 <USB_EPStartXfer+0x384>
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	3b01      	subs	r3, #1
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	b29b      	uxth	r3, r3
 8005878:	029b      	lsls	r3, r3, #10
 800587a:	b29b      	uxth	r3, r3
 800587c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005880:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005884:	b29b      	uxth	r3, r3
 8005886:	8023      	strh	r3, [r4, #0]
 8005888:	e0c8      	b.n	8005a1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d148      	bne.n	8005924 <USB_EPStartXfer+0x434>
 8005892:	687c      	ldr	r4, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800589a:	b29b      	uxth	r3, r3
 800589c:	441c      	add	r4, r3
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	011b      	lsls	r3, r3, #4
 80058a4:	4423      	add	r3, r4
 80058a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058aa:	461c      	mov	r4, r3
 80058ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10e      	bne.n	80058d0 <USB_EPStartXfer+0x3e0>
 80058b2:	8823      	ldrh	r3, [r4, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	8023      	strh	r3, [r4, #0]
 80058be:	8823      	ldrh	r3, [r4, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	8023      	strh	r3, [r4, #0]
 80058ce:	e03d      	b.n	800594c <USB_EPStartXfer+0x45c>
 80058d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d2:	2b3e      	cmp	r3, #62	; 0x3e
 80058d4:	d810      	bhi.n	80058f8 <USB_EPStartXfer+0x408>
 80058d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d8:	085b      	lsrs	r3, r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <USB_EPStartXfer+0x3fc>
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	029b      	lsls	r3, r3, #10
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	8023      	strh	r3, [r4, #0]
 80058f6:	e029      	b.n	800594c <USB_EPStartXfer+0x45c>
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	095b      	lsrs	r3, r3, #5
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <USB_EPStartXfer+0x41e>
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	3b01      	subs	r3, #1
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	b29b      	uxth	r3, r3
 8005912:	029b      	lsls	r3, r3, #10
 8005914:	b29b      	uxth	r3, r3
 8005916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591e:	b29b      	uxth	r3, r3
 8005920:	8023      	strh	r3, [r4, #0]
 8005922:	e013      	b.n	800594c <USB_EPStartXfer+0x45c>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d10f      	bne.n	800594c <USB_EPStartXfer+0x45c>
 800592c:	687c      	ldr	r4, [r7, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005934:	b29b      	uxth	r3, r3
 8005936:	441c      	add	r4, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	4423      	add	r3, r4
 8005940:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005944:	461c      	mov	r4, r3
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	b29b      	uxth	r3, r3
 800594a:	8023      	strh	r3, [r4, #0]
 800594c:	687c      	ldr	r4, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d14e      	bne.n	80059f4 <USB_EPStartXfer+0x504>
 8005956:	687c      	ldr	r4, [r7, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	441c      	add	r4, r3
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	4423      	add	r3, r4
 800596a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800596e:	461c      	mov	r4, r3
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	2b00      	cmp	r3, #0
 8005974:	d10e      	bne.n	8005994 <USB_EPStartXfer+0x4a4>
 8005976:	8823      	ldrh	r3, [r4, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800597e:	b29b      	uxth	r3, r3
 8005980:	8023      	strh	r3, [r4, #0]
 8005982:	8823      	ldrh	r3, [r4, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800598e:	b29b      	uxth	r3, r3
 8005990:	8023      	strh	r3, [r4, #0]
 8005992:	e043      	b.n	8005a1c <USB_EPStartXfer+0x52c>
 8005994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005996:	2b3e      	cmp	r3, #62	; 0x3e
 8005998:	d816      	bhi.n	80059c8 <USB_EPStartXfer+0x4d8>
 800599a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <USB_EPStartXfer+0x4c0>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3301      	adds	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	8023      	strh	r3, [r4, #0]
 80059ba:	e02f      	b.n	8005a1c <USB_EPStartXfer+0x52c>
 80059bc:	ffff80c0 	.word	0xffff80c0
 80059c0:	ffffc080 	.word	0xffffc080
 80059c4:	ffff8080 	.word	0xffff8080
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d102      	bne.n	80059de <USB_EPStartXfer+0x4ee>
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3b01      	subs	r3, #1
 80059dc:	617b      	str	r3, [r7, #20]
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	029b      	lsls	r3, r3, #10
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	8023      	strh	r3, [r4, #0]
 80059f2:	e013      	b.n	8005a1c <USB_EPStartXfer+0x52c>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	785b      	ldrb	r3, [r3, #1]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d10f      	bne.n	8005a1c <USB_EPStartXfer+0x52c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	441c      	add	r4, r3
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	011b      	lsls	r3, r3, #4
 8005a0c:	4423      	add	r3, r4
 8005a0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a12:	613b      	str	r3, [r7, #16]
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	4413      	add	r3, r2
 8005a26:	881b      	ldrh	r3, [r3, #0]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	b29c      	uxth	r4, r3
 8005a34:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005a38:	b29c      	uxth	r4, r3
 8005a3a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005a3e:	b29c      	uxth	r4, r3
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	441a      	add	r2, r3
 8005a4a:	4b04      	ldr	r3, [pc, #16]	; (8005a5c <USB_EPStartXfer+0x56c>)
 8005a4c:	4323      	orrs	r3, r4
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3734      	adds	r7, #52	; 0x34
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd90      	pop	{r4, r7, pc}
 8005a5c:	ffff8080 	.word	0xffff8080

08005a60 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a60:	b490      	push	{r4, r7}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d018      	beq.n	8005aa4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	4413      	add	r3, r2
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	b29c      	uxth	r4, r3
 8005a8a:	f084 0310 	eor.w	r3, r4, #16
 8005a8e:	b29c      	uxth	r4, r3
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	441a      	add	r2, r3
 8005a9a:	4b11      	ldr	r3, [pc, #68]	; (8005ae0 <USB_EPSetStall+0x80>)
 8005a9c:	4323      	orrs	r3, r4
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8013      	strh	r3, [r2, #0]
 8005aa2:	e017      	b.n	8005ad4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	881b      	ldrh	r3, [r3, #0]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aba:	b29c      	uxth	r4, r3
 8005abc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ac0:	b29c      	uxth	r4, r3
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	441a      	add	r2, r3
 8005acc:	4b04      	ldr	r3, [pc, #16]	; (8005ae0 <USB_EPSetStall+0x80>)
 8005ace:	4323      	orrs	r3, r4
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bc90      	pop	{r4, r7}
 8005ade:	4770      	bx	lr
 8005ae0:	ffff8080 	.word	0xffff8080

08005ae4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ae4:	b490      	push	{r4, r7}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	7b1b      	ldrb	r3, [r3, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d17d      	bne.n	8005bf2 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d03d      	beq.n	8005b7a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b29c      	uxth	r4, r3
 8005b0c:	4623      	mov	r3, r4
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d014      	beq.n	8005b40 <USB_EPClearStall+0x5c>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	b29c      	uxth	r4, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	4b31      	ldr	r3, [pc, #196]	; (8005c00 <USB_EPClearStall+0x11c>)
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d054      	beq.n	8005bf2 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4413      	add	r3, r2
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b5e:	b29c      	uxth	r4, r3
 8005b60:	f084 0320 	eor.w	r3, r4, #32
 8005b64:	b29c      	uxth	r4, r3
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	441a      	add	r2, r3
 8005b70:	4b24      	ldr	r3, [pc, #144]	; (8005c04 <USB_EPClearStall+0x120>)
 8005b72:	4323      	orrs	r3, r4
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8013      	strh	r3, [r2, #0]
 8005b78:	e03b      	b.n	8005bf2 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	b29c      	uxth	r4, r3
 8005b88:	4623      	mov	r3, r4
 8005b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d014      	beq.n	8005bbc <USB_EPClearStall+0xd8>
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba8:	b29c      	uxth	r4, r3
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	4b14      	ldr	r3, [pc, #80]	; (8005c08 <USB_EPClearStall+0x124>)
 8005bb6:	4323      	orrs	r3, r4
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	b29c      	uxth	r4, r3
 8005bd4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005bd8:	b29c      	uxth	r4, r3
 8005bda:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005bde:	b29c      	uxth	r4, r3
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <USB_EPClearStall+0x120>)
 8005bec:	4323      	orrs	r3, r4
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc90      	pop	{r4, r7}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	ffff80c0 	.word	0xffff80c0
 8005c04:	ffff8080 	.word	0xffff8080
 8005c08:	ffffc080 	.word	0xffffc080

08005c0c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d103      	bne.n	8005c26 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2280      	movs	r2, #128	; 0x80
 8005c22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr

08005c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr

08005c5a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr

08005c78 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bc80      	pop	{r7}
 8005c8c:	4770      	bx	lr

08005c8e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b08d      	sub	sp, #52	; 0x34
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	80fb      	strh	r3, [r7, #6]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005ca4:	88bb      	ldrh	r3, [r7, #4]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	085b      	lsrs	r3, r3, #1
 8005caa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	005a      	lsls	r2, r3, #1
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005cc0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc6:	e01e      	b.n	8005d06 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	3302      	adds	r3, #2
 8005cf8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	3b01      	subs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1dd      	bne.n	8005cc8 <USB_WritePMA+0x3a>
  }
}
 8005d0c:	bf00      	nop
 8005d0e:	3734      	adds	r7, #52	; 0x34
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr

08005d16 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b08b      	sub	sp, #44	; 0x2c
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4611      	mov	r1, r2
 8005d22:	461a      	mov	r2, r3
 8005d24:	460b      	mov	r3, r1
 8005d26:	80fb      	strh	r3, [r7, #6]
 8005d28:	4613      	mov	r3, r2
 8005d2a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005d2c:	88bb      	ldrh	r3, [r7, #4]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005d3c:	88fb      	ldrh	r3, [r7, #6]
 8005d3e:	005a      	lsls	r2, r3, #1
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d48:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4e:	e01b      	b.n	8005d88 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	3302      	adds	r3, #2
 8005d80:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	3b01      	subs	r3, #1
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
 8005d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e0      	bne.n	8005d50 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005d8e:	88bb      	ldrh	r3, [r7, #4]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d007      	beq.n	8005daa <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005d9a:	6a3b      	ldr	r3, [r7, #32]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	701a      	strb	r2, [r3, #0]
  }
}
 8005daa:	bf00      	nop
 8005dac:	372c      	adds	r7, #44	; 0x2c
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bc80      	pop	{r7}
 8005db2:	4770      	bx	lr

08005db4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	7c1b      	ldrb	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d115      	bne.n	8005df8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd0:	2202      	movs	r2, #2
 8005dd2:	2181      	movs	r1, #129	; 0x81
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fe6a 	bl	8007aae <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de4:	2202      	movs	r2, #2
 8005de6:	2101      	movs	r1, #1
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 fe60 	bl	8007aae <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005df6:	e012      	b.n	8005e1e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005df8:	2340      	movs	r3, #64	; 0x40
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	2181      	movs	r1, #129	; 0x81
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f001 fe55 	bl	8007aae <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e0a:	2340      	movs	r3, #64	; 0x40
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	2101      	movs	r1, #1
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fe4c 	bl	8007aae <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e1e:	2308      	movs	r3, #8
 8005e20:	2203      	movs	r2, #3
 8005e22:	2182      	movs	r1, #130	; 0x82
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 fe42 	bl	8007aae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005e34:	f001 ff5c 	bl	8007cf0 <USBD_static_malloc>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d102      	bne.n	8005e50 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
 8005e4e:	e026      	b.n	8005e9e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	7c1b      	ldrb	r3, [r3, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e84:	2101      	movs	r1, #1
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f001 fefb 	bl	8007c82 <USBD_LL_PrepareReceive>
 8005e8c:	e007      	b.n	8005e9e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	2101      	movs	r1, #1
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 fef2 	bl	8007c82 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f001 fe1d 	bl	8007afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fe16 	bl	8007afa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ed6:	2182      	movs	r1, #130	; 0x82
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fe0e 	bl	8007afa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00e      	beq.n	8005f0c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 ff02 	bl	8007d08 <USBD_static_free>
    pdev->pClassData = NULL;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b086      	sub	sp, #24
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f26:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d039      	beq.n	8005fb4 <USBD_CDC_Setup+0x9e>
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d17c      	bne.n	800603e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	88db      	ldrh	r3, [r3, #6]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d029      	beq.n	8005fa0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da11      	bge.n	8005f7a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005f62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	88d2      	ldrh	r2, [r2, #6]
 8005f68:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f6a:	6939      	ldr	r1, [r7, #16]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	88db      	ldrh	r3, [r3, #6]
 8005f70:	461a      	mov	r2, r3
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 f9f6 	bl	8007364 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005f78:	e068      	b.n	800604c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785a      	ldrb	r2, [r3, #1]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	88db      	ldrh	r3, [r3, #6]
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005f90:	6939      	ldr	r1, [r7, #16]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	88db      	ldrh	r3, [r3, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f001 fa11 	bl	80073c0 <USBD_CtlPrepareRx>
      break;
 8005f9e:	e055      	b.n	800604c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	7850      	ldrb	r0, [r2, #1]
 8005fac:	2200      	movs	r2, #0
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	4798      	blx	r3
      break;
 8005fb2:	e04b      	b.n	800604c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b0a      	cmp	r3, #10
 8005fba:	d017      	beq.n	8005fec <USBD_CDC_Setup+0xd6>
 8005fbc:	2b0b      	cmp	r3, #11
 8005fbe:	d029      	beq.n	8006014 <USBD_CDC_Setup+0xfe>
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d133      	bne.n	800602c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d107      	bne.n	8005fde <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005fce:	f107 030c 	add.w	r3, r7, #12
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f001 f9c4 	bl	8007364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fdc:	e02e      	b.n	800603c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 f955 	bl	8007290 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fe6:	2302      	movs	r3, #2
 8005fe8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fea:	e027      	b.n	800603c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d107      	bne.n	8006006 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005ff6:	f107 030f 	add.w	r3, r7, #15
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 f9b0 	bl	8007364 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006004:	e01a      	b.n	800603c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006006:	6839      	ldr	r1, [r7, #0]
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f941 	bl	8007290 <USBD_CtlError>
            ret = USBD_FAIL;
 800600e:	2302      	movs	r3, #2
 8006010:	75fb      	strb	r3, [r7, #23]
          break;
 8006012:	e013      	b.n	800603c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601a:	2b03      	cmp	r3, #3
 800601c:	d00d      	beq.n	800603a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 f935 	bl	8007290 <USBD_CtlError>
            ret = USBD_FAIL;
 8006026:	2302      	movs	r3, #2
 8006028:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800602a:	e006      	b.n	800603a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f001 f92e 	bl	8007290 <USBD_CtlError>
          ret = USBD_FAIL;
 8006034:	2302      	movs	r3, #2
 8006036:	75fb      	strb	r3, [r7, #23]
          break;
 8006038:	e000      	b.n	800603c <USBD_CDC_Setup+0x126>
          break;
 800603a:	bf00      	nop
      }
      break;
 800603c:	e006      	b.n	800604c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800603e:	6839      	ldr	r1, [r7, #0]
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 f925 	bl	8007290 <USBD_CtlError>
      ret = USBD_FAIL;
 8006046:	2302      	movs	r3, #2
 8006048:	75fb      	strb	r3, [r7, #23]
      break;
 800604a:	bf00      	nop
  }

  return ret;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006070:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006078:	2b00      	cmp	r3, #0
 800607a:	d037      	beq.n	80060ec <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	331c      	adds	r3, #28
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d026      	beq.n	80060e0 <USBD_CDC_DataIn+0x8a>
 8006092:	78fa      	ldrb	r2, [r7, #3]
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	331c      	adds	r3, #28
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	0152      	lsls	r2, r2, #5
 80060aa:	440a      	add	r2, r1
 80060ac:	3238      	adds	r2, #56	; 0x38
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80060b4:	fb02 f201 	mul.w	r2, r2, r1
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d110      	bne.n	80060e0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	331c      	adds	r3, #28
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060d2:	78f9      	ldrb	r1, [r7, #3]
 80060d4:	2300      	movs	r3, #0
 80060d6:	2200      	movs	r2, #0
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f001 fdaf 	bl	8007c3c <USBD_LL_Transmit>
 80060de:	e003      	b.n	80060e8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e000      	b.n	80060ee <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 80060ec:	2302      	movs	r3, #2
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	460b      	mov	r3, r1
 8006100:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f001 fdda 	bl	8007cc8 <USBD_LL_GetRxDataSize>
 8006114:	4602      	mov	r2, r0
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800613a:	4611      	mov	r1, r2
 800613c:	4798      	blx	r3

    return USBD_OK;
 800613e:	2300      	movs	r3, #0
 8006140:	e000      	b.n	8006144 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006142:	2302      	movs	r3, #2
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006162:	2b00      	cmp	r3, #0
 8006164:	d015      	beq.n	8006192 <USBD_CDC_EP0_RxReady+0x46>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800616c:	2bff      	cmp	r3, #255	; 0xff
 800616e:	d010      	beq.n	8006192 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800617e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006186:	b292      	uxth	r2, r2
 8006188:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2243      	movs	r2, #67	; 0x43
 80061a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80061aa:	4b03      	ldr	r3, [pc, #12]	; (80061b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bc80      	pop	{r7}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	20000094 	.word	0x20000094

080061bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2243      	movs	r2, #67	; 0x43
 80061c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80061ca:	4b03      	ldr	r3, [pc, #12]	; (80061d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000050 	.word	0x20000050

080061dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2243      	movs	r2, #67	; 0x43
 80061e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80061ea:	4b03      	ldr	r3, [pc, #12]	; (80061f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bc80      	pop	{r7}
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	200000d8 	.word	0x200000d8

080061fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	220a      	movs	r2, #10
 8006208:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800620a:	4b03      	ldr	r3, [pc, #12]	; (8006218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	2000000c 	.word	0x2000000c

0800621c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006226:	2302      	movs	r3, #2
 8006228:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	683a      	ldr	r2, [r7, #0]
 8006234:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800623c:	7bfb      	ldrb	r3, [r7, #15]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	bc80      	pop	{r7}
 8006278:	4770      	bx	lr

0800627a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800627a:	b480      	push	{r7}
 800627c:	b085      	sub	sp, #20
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
 8006282:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	683a      	ldr	r2, [r7, #0]
 8006290:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr

080062a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01c      	beq.n	80062f4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d115      	bne.n	80062f0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	2181      	movs	r1, #129	; 0x81
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f001 fca8 	bl	8007c3c <USBD_LL_Transmit>

      return USBD_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e002      	b.n	80062f6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d017      	beq.n	8006348 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	7c1b      	ldrb	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800632a:	2101      	movs	r1, #1
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fca8 	bl	8007c82 <USBD_LL_PrepareReceive>
 8006332:	e007      	b.n	8006344 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	2101      	movs	r1, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fc9f 	bl	8007c82 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	e000      	b.n	800634a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006348:	2302      	movs	r3, #2
  }
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	4613      	mov	r3, r2
 800635e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006366:	2302      	movs	r3, #2
 8006368:	e01a      	b.n	80063a0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68ba      	ldr	r2, [r7, #8]
 8006386:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	79fa      	ldrb	r2, [r7, #7]
 8006396:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f001 fb13 	bl	80079c4 <USBD_LL_Init>

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73fb      	strb	r3, [r7, #15]
 80063c8:	e001      	b.n	80063ce <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80063ca:	2302      	movs	r3, #2
 80063cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bc80      	pop	{r7}
 80063d8:	4770      	bx	lr

080063da <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b082      	sub	sp, #8
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 fb48 	bl	8007a78 <USBD_LL_Start>

  return USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	bc80      	pop	{r7}
 8006404:	4770      	bx	lr

08006406 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006412:	2302      	movs	r3, #2
 8006414:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	78fa      	ldrb	r2, [r7, #3]
 800642a:	4611      	mov	r1, r2
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	4798      	blx	r3
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	78fa      	ldrb	r2, [r7, #3]
 800645a:	4611      	mov	r1, r2
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	4798      	blx	r3

  return USBD_OK;
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b082      	sub	sp, #8
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	4618      	mov	r0, r3
 800647e:	f000 fecb 	bl	8007218 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006490:	461a      	mov	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d00c      	beq.n	80064c0 <USBD_LL_SetupStage+0x56>
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d302      	bcc.n	80064b0 <USBD_LL_SetupStage+0x46>
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d010      	beq.n	80064d0 <USBD_LL_SetupStage+0x66>
 80064ae:	e017      	b.n	80064e0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064b6:	4619      	mov	r1, r3
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f9cb 	bl	8006854 <USBD_StdDevReq>
      break;
 80064be:	e01a      	b.n	80064f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fa2d 	bl	8006928 <USBD_StdItfReq>
      break;
 80064ce:	e012      	b.n	80064f6 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fa6b 	bl	80069b4 <USBD_StdEPReq>
      break;
 80064de:	e00a      	b.n	80064f6 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 fb22 	bl	8007b38 <USBD_LL_StallEP>
      break;
 80064f4:	bf00      	nop
  }

  return USBD_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	460b      	mov	r3, r1
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d14b      	bne.n	80065ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800651a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006522:	2b03      	cmp	r3, #3
 8006524:	d134      	bne.n	8006590 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	429a      	cmp	r2, r3
 8006530:	d919      	bls.n	8006566 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	68da      	ldr	r2, [r3, #12]
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006548:	429a      	cmp	r2, r3
 800654a:	d203      	bcs.n	8006554 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006550:	b29b      	uxth	r3, r3
 8006552:	e002      	b.n	800655a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006558:	b29b      	uxth	r3, r3
 800655a:	461a      	mov	r2, r3
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 ff4c 	bl	80073fc <USBD_CtlContinueRx>
 8006564:	e038      	b.n	80065d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006578:	2b03      	cmp	r3, #3
 800657a:	d105      	bne.n	8006588 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 ff49 	bl	8007420 <USBD_CtlSendStatus>
 800658e:	e023      	b.n	80065d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006596:	2b05      	cmp	r3, #5
 8006598:	d11e      	bne.n	80065d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80065a2:	2100      	movs	r1, #0
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f001 fac7 	bl	8007b38 <USBD_LL_StallEP>
 80065aa:	e015      	b.n	80065d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00d      	beq.n	80065d4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d108      	bne.n	80065d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	7afa      	ldrb	r2, [r7, #11]
 80065cc:	4611      	mov	r1, r2
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	4798      	blx	r3
 80065d2:	e001      	b.n	80065d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065d4:	2302      	movs	r3, #2
 80065d6:	e000      	b.n	80065da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b086      	sub	sp, #24
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	60f8      	str	r0, [r7, #12]
 80065ea:	460b      	mov	r3, r1
 80065ec:	607a      	str	r2, [r7, #4]
 80065ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d17f      	bne.n	80066f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3314      	adds	r3, #20
 80065fa:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006602:	2b02      	cmp	r3, #2
 8006604:	d15c      	bne.n	80066c0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	429a      	cmp	r2, r3
 8006610:	d915      	bls.n	800663e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	1ad2      	subs	r2, r2, r3
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	b29b      	uxth	r3, r3
 8006626:	461a      	mov	r2, r3
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 feb6 	bl	800739c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006630:	2300      	movs	r3, #0
 8006632:	2200      	movs	r2, #0
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f001 fb23 	bl	8007c82 <USBD_LL_PrepareReceive>
 800663c:	e04e      	b.n	80066dc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	6912      	ldr	r2, [r2, #16]
 8006646:	fbb3 f1f2 	udiv	r1, r3, r2
 800664a:	fb02 f201 	mul.w	r2, r2, r1
 800664e:	1a9b      	subs	r3, r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d11c      	bne.n	800668e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800665c:	429a      	cmp	r2, r3
 800665e:	d316      	bcc.n	800668e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800666a:	429a      	cmp	r2, r3
 800666c:	d20f      	bcs.n	800668e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800666e:	2200      	movs	r2, #0
 8006670:	2100      	movs	r1, #0
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 fe92 	bl	800739c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006680:	2300      	movs	r3, #0
 8006682:	2200      	movs	r2, #0
 8006684:	2100      	movs	r1, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f001 fafb 	bl	8007c82 <USBD_LL_PrepareReceive>
 800668c:	e026      	b.n	80066dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d105      	bne.n	80066b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80066b0:	2180      	movs	r1, #128	; 0x80
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f001 fa40 	bl	8007b38 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fec4 	bl	8007446 <USBD_CtlReceiveStatus>
 80066be:	e00d      	b.n	80066dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d004      	beq.n	80066d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d103      	bne.n	80066dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80066d4:	2180      	movs	r1, #128	; 0x80
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f001 fa2e 	bl	8007b38 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d11d      	bne.n	8006722 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f7ff fe83 	bl	80063f2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066f4:	e015      	b.n	8006722 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006708:	2b03      	cmp	r3, #3
 800670a:	d108      	bne.n	800671e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	7afa      	ldrb	r2, [r7, #11]
 8006716:	4611      	mov	r1, r2
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	4798      	blx	r3
 800671c:	e001      	b.n	8006722 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800671e:	2302      	movs	r3, #2
 8006720:	e000      	b.n	8006724 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006734:	2340      	movs	r3, #64	; 0x40
 8006736:	2200      	movs	r2, #0
 8006738:	2100      	movs	r1, #0
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 f9b7 	bl	8007aae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2240      	movs	r2, #64	; 0x40
 800674c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006750:	2340      	movs	r3, #64	; 0x40
 8006752:	2200      	movs	r2, #0
 8006754:	2180      	movs	r1, #128	; 0x80
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 f9a9 	bl	8007aae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2240      	movs	r2, #64	; 0x40
 8006766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800678c:	2b00      	cmp	r3, #0
 800678e:	d009      	beq.n	80067a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	6852      	ldr	r2, [r2, #4]
 800679c:	b2d2      	uxtb	r2, r2
 800679e:	4611      	mov	r1, r2
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	4798      	blx	r3
  }

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	460b      	mov	r3, r1
 80067b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	78fa      	ldrb	r2, [r7, #3]
 80067be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2204      	movs	r2, #4
 80067e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bc80      	pop	{r7}
 80067f2:	4770      	bx	lr

080067f4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006802:	2b04      	cmp	r3, #4
 8006804:	d105      	bne.n	8006812 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800682c:	2b03      	cmp	r3, #3
 800682e:	d10b      	bne.n	8006848 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006836:	69db      	ldr	r3, [r3, #28]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800686a:	2b20      	cmp	r3, #32
 800686c:	d004      	beq.n	8006878 <USBD_StdDevReq+0x24>
 800686e:	2b40      	cmp	r3, #64	; 0x40
 8006870:	d002      	beq.n	8006878 <USBD_StdDevReq+0x24>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d008      	beq.n	8006888 <USBD_StdDevReq+0x34>
 8006876:	e04c      	b.n	8006912 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	6839      	ldr	r1, [r7, #0]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
      break;
 8006886:	e049      	b.n	800691c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b09      	cmp	r3, #9
 800688e:	d83a      	bhi.n	8006906 <USBD_StdDevReq+0xb2>
 8006890:	a201      	add	r2, pc, #4	; (adr r2, 8006898 <USBD_StdDevReq+0x44>)
 8006892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006896:	bf00      	nop
 8006898:	080068e9 	.word	0x080068e9
 800689c:	080068fd 	.word	0x080068fd
 80068a0:	08006907 	.word	0x08006907
 80068a4:	080068f3 	.word	0x080068f3
 80068a8:	08006907 	.word	0x08006907
 80068ac:	080068cb 	.word	0x080068cb
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	08006907 	.word	0x08006907
 80068b8:	080068df 	.word	0x080068df
 80068bc:	080068d5 	.word	0x080068d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068c0:	6839      	ldr	r1, [r7, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9d4 	bl	8006c70 <USBD_GetDescriptor>
          break;
 80068c8:	e022      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ca:	6839      	ldr	r1, [r7, #0]
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fb37 	bl	8006f40 <USBD_SetAddress>
          break;
 80068d2:	e01d      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fb74 	bl	8006fc4 <USBD_SetConfig>
          break;
 80068dc:	e018      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fbfd 	bl	80070e0 <USBD_GetConfig>
          break;
 80068e6:	e013      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc2c 	bl	8007148 <USBD_GetStatus>
          break;
 80068f0:	e00e      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fc5a 	bl	80071ae <USBD_SetFeature>
          break;
 80068fa:	e009      	b.n	8006910 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fc69 	bl	80071d6 <USBD_ClrFeature>
          break;
 8006904:	e004      	b.n	8006910 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006906:	6839      	ldr	r1, [r7, #0]
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fcc1 	bl	8007290 <USBD_CtlError>
          break;
 800690e:	bf00      	nop
      }
      break;
 8006910:	e004      	b.n	800691c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006912:	6839      	ldr	r1, [r7, #0]
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fcbb 	bl	8007290 <USBD_CtlError>
      break;
 800691a:	bf00      	nop
  }

  return ret;
 800691c:	7bfb      	ldrb	r3, [r7, #15]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop

08006928 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693e:	2b20      	cmp	r3, #32
 8006940:	d003      	beq.n	800694a <USBD_StdItfReq+0x22>
 8006942:	2b40      	cmp	r3, #64	; 0x40
 8006944:	d001      	beq.n	800694a <USBD_StdItfReq+0x22>
 8006946:	2b00      	cmp	r3, #0
 8006948:	d12a      	bne.n	80069a0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006950:	3b01      	subs	r3, #1
 8006952:	2b02      	cmp	r3, #2
 8006954:	d81d      	bhi.n	8006992 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	889b      	ldrh	r3, [r3, #4]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	d813      	bhi.n	8006988 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	4798      	blx	r3
 800696e:	4603      	mov	r3, r0
 8006970:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d110      	bne.n	800699c <USBD_StdItfReq+0x74>
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10d      	bne.n	800699c <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fd4d 	bl	8007420 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006986:	e009      	b.n	800699c <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc80 	bl	8007290 <USBD_CtlError>
          break;
 8006990:	e004      	b.n	800699c <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fc7b 	bl	8007290 <USBD_CtlError>
          break;
 800699a:	e000      	b.n	800699e <USBD_StdItfReq+0x76>
          break;
 800699c:	bf00      	nop
      }
      break;
 800699e:	e004      	b.n	80069aa <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fc74 	bl	8007290 <USBD_CtlError>
      break;
 80069a8:	bf00      	nop
  }

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	889b      	ldrh	r3, [r3, #4]
 80069c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069d0:	2b20      	cmp	r3, #32
 80069d2:	d004      	beq.n	80069de <USBD_StdEPReq+0x2a>
 80069d4:	2b40      	cmp	r3, #64	; 0x40
 80069d6:	d002      	beq.n	80069de <USBD_StdEPReq+0x2a>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <USBD_StdEPReq+0x3a>
 80069dc:	e13d      	b.n	8006c5a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	4798      	blx	r3
      break;
 80069ec:	e13a      	b.n	8006c64 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d10a      	bne.n	8006a10 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
 8006a08:	4603      	mov	r3, r0
 8006a0a:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
 8006a0e:	e12a      	b.n	8006c66 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	785b      	ldrb	r3, [r3, #1]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d03e      	beq.n	8006a96 <USBD_StdEPReq+0xe2>
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d002      	beq.n	8006a22 <USBD_StdEPReq+0x6e>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d070      	beq.n	8006b02 <USBD_StdEPReq+0x14e>
 8006a20:	e115      	b.n	8006c4e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d002      	beq.n	8006a32 <USBD_StdEPReq+0x7e>
 8006a2c:	2b03      	cmp	r3, #3
 8006a2e:	d015      	beq.n	8006a5c <USBD_StdEPReq+0xa8>
 8006a30:	e02b      	b.n	8006a8a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a32:	7bbb      	ldrb	r3, [r7, #14]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00c      	beq.n	8006a52 <USBD_StdEPReq+0x9e>
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2b80      	cmp	r3, #128	; 0x80
 8006a3c:	d009      	beq.n	8006a52 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f001 f878 	bl	8007b38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006a48:	2180      	movs	r1, #128	; 0x80
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f001 f874 	bl	8007b38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a50:	e020      	b.n	8006a94 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fc1b 	bl	8007290 <USBD_CtlError>
              break;
 8006a5a:	e01b      	b.n	8006a94 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	885b      	ldrh	r3, [r3, #2]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10e      	bne.n	8006a82 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <USBD_StdEPReq+0xce>
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b80      	cmp	r3, #128	; 0x80
 8006a6e:	d008      	beq.n	8006a82 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	88db      	ldrh	r3, [r3, #6]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f85b 	bl	8007b38 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fccc 	bl	8007420 <USBD_CtlSendStatus>

              break;
 8006a88:	e004      	b.n	8006a94 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fbff 	bl	8007290 <USBD_CtlError>
              break;
 8006a92:	bf00      	nop
          }
          break;
 8006a94:	e0e0      	b.n	8006c58 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d002      	beq.n	8006aa6 <USBD_StdEPReq+0xf2>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d015      	beq.n	8006ad0 <USBD_StdEPReq+0x11c>
 8006aa4:	e026      	b.n	8006af4 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa6:	7bbb      	ldrb	r3, [r7, #14]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <USBD_StdEPReq+0x112>
 8006aac:	7bbb      	ldrb	r3, [r7, #14]
 8006aae:	2b80      	cmp	r3, #128	; 0x80
 8006ab0:	d009      	beq.n	8006ac6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 f83e 	bl	8007b38 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006abc:	2180      	movs	r1, #128	; 0x80
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f001 f83a 	bl	8007b38 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ac4:	e01c      	b.n	8006b00 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fbe1 	bl	8007290 <USBD_CtlError>
              break;
 8006ace:	e017      	b.n	8006b00 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d112      	bne.n	8006afe <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ad8:	7bbb      	ldrb	r3, [r7, #14]
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 f845 	bl	8007b76 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 fc97 	bl	8007420 <USBD_CtlSendStatus>
              }
              break;
 8006af2:	e004      	b.n	8006afe <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fbca 	bl	8007290 <USBD_CtlError>
              break;
 8006afc:	e000      	b.n	8006b00 <USBD_StdEPReq+0x14c>
              break;
 8006afe:	bf00      	nop
          }
          break;
 8006b00:	e0aa      	b.n	8006c58 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d002      	beq.n	8006b12 <USBD_StdEPReq+0x15e>
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d032      	beq.n	8006b76 <USBD_StdEPReq+0x1c2>
 8006b10:	e097      	b.n	8006c42 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b12:	7bbb      	ldrb	r3, [r7, #14]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <USBD_StdEPReq+0x174>
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	2b80      	cmp	r3, #128	; 0x80
 8006b1c:	d004      	beq.n	8006b28 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006b1e:	6839      	ldr	r1, [r7, #0]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fbb5 	bl	8007290 <USBD_CtlError>
                break;
 8006b26:	e091      	b.n	8006c4c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da0b      	bge.n	8006b48 <USBD_StdEPReq+0x194>
 8006b30:	7bbb      	ldrb	r3, [r7, #14]
 8006b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b36:	4613      	mov	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	3310      	adds	r3, #16
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	4413      	add	r3, r2
 8006b44:	3304      	adds	r3, #4
 8006b46:	e00b      	b.n	8006b60 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4e:	4613      	mov	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4413      	add	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fbf8 	bl	8007364 <USBD_CtlSendData>
              break;
 8006b74:	e06a      	b.n	8006c4c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	da11      	bge.n	8006ba2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	f003 020f 	and.w	r2, r3, #15
 8006b84:	6879      	ldr	r1, [r7, #4]
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	440b      	add	r3, r1
 8006b90:	3318      	adds	r3, #24
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d117      	bne.n	8006bc8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fb78 	bl	8007290 <USBD_CtlError>
                  break;
 8006ba0:	e054      	b.n	8006c4c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	f003 020f 	and.w	r2, r3, #15
 8006ba8:	6879      	ldr	r1, [r7, #4]
 8006baa:	4613      	mov	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d104      	bne.n	8006bc8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fb65 	bl	8007290 <USBD_CtlError>
                  break;
 8006bc6:	e041      	b.n	8006c4c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	da0b      	bge.n	8006be8 <USBD_StdEPReq+0x234>
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
 8006bd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	3310      	adds	r3, #16
 8006be0:	687a      	ldr	r2, [r7, #4]
 8006be2:	4413      	add	r3, r2
 8006be4:	3304      	adds	r3, #4
 8006be6:	e00b      	b.n	8006c00 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bee:	4613      	mov	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3304      	adds	r3, #4
 8006c00:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d002      	beq.n	8006c0e <USBD_StdEPReq+0x25a>
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d103      	bne.n	8006c16 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	e00e      	b.n	8006c34 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006c16:	7bbb      	ldrb	r3, [r7, #14]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 ffca 	bl	8007bb4 <USBD_LL_IsStallEP>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e002      	b.n	8006c34 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2200      	movs	r2, #0
 8006c32:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2202      	movs	r2, #2
 8006c38:	4619      	mov	r1, r3
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fb92 	bl	8007364 <USBD_CtlSendData>
              break;
 8006c40:	e004      	b.n	8006c4c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fb23 	bl	8007290 <USBD_CtlError>
              break;
 8006c4a:	bf00      	nop
          }
          break;
 8006c4c:	e004      	b.n	8006c58 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006c4e:	6839      	ldr	r1, [r7, #0]
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f000 fb1d 	bl	8007290 <USBD_CtlError>
          break;
 8006c56:	bf00      	nop
      }
      break;
 8006c58:	e004      	b.n	8006c64 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb17 	bl	8007290 <USBD_CtlError>
      break;
 8006c62:	bf00      	nop
  }

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	885b      	ldrh	r3, [r3, #2]
 8006c8a:	0a1b      	lsrs	r3, r3, #8
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	f200 8128 	bhi.w	8006ee6 <USBD_GetDescriptor+0x276>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <USBD_GetDescriptor+0x2c>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006d11 	.word	0x08006d11
 8006ca8:	08006ee7 	.word	0x08006ee7
 8006cac:	08006ee7 	.word	0x08006ee7
 8006cb0:	08006e87 	.word	0x08006e87
 8006cb4:	08006eb3 	.word	0x08006eb3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	7c12      	ldrb	r2, [r2, #16]
 8006cc4:	f107 0108 	add.w	r1, r7, #8
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
 8006ccc:	60f8      	str	r0, [r7, #12]
      break;
 8006cce:	e112      	b.n	8006ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	7c1b      	ldrb	r3, [r3, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce0:	f107 0208 	add.w	r2, r7, #8
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4798      	blx	r3
 8006ce8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	3301      	adds	r3, #1
 8006cee:	2202      	movs	r2, #2
 8006cf0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006cf2:	e100      	b.n	8006ef6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	f107 0208 	add.w	r2, r7, #8
 8006d00:	4610      	mov	r0, r2
 8006d02:	4798      	blx	r3
 8006d04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	701a      	strb	r2, [r3, #0]
      break;
 8006d0e:	e0f2      	b.n	8006ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	885b      	ldrh	r3, [r3, #2]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b05      	cmp	r3, #5
 8006d18:	f200 80ac 	bhi.w	8006e74 <USBD_GetDescriptor+0x204>
 8006d1c:	a201      	add	r2, pc, #4	; (adr r2, 8006d24 <USBD_GetDescriptor+0xb4>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d3d 	.word	0x08006d3d
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006dd9 	.word	0x08006dd9
 8006d34:	08006e0d 	.word	0x08006e0d
 8006d38:	08006e41 	.word	0x08006e41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e091      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa94 	bl	8007290 <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e089      	b.n	8006e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e077      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fa7a 	bl	8007290 <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e06f      	b.n	8006e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc6:	e05d      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fa60 	bl	8007290 <USBD_CtlError>
            err++;
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd6:	e055      	b.n	8006e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e043      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa46 	bl	8007290 <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e03b      	b.n	8006e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e029      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa2c 	bl	8007290 <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e021      	b.n	8006e84 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e00f      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa12 	bl	8007290 <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e007      	b.n	8006e84 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa0a 	bl	8007290 <USBD_CtlError>
          err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006e82:	e038      	b.n	8006ef6 <USBD_GetDescriptor+0x286>
 8006e84:	e037      	b.n	8006ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7c1b      	ldrb	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d109      	bne.n	8006ea2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	f107 0208 	add.w	r2, r7, #8
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4798      	blx	r3
 8006e9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea0:	e029      	b.n	8006ef6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f9f3 	bl	8007290 <USBD_CtlError>
        err++;
 8006eaa:	7afb      	ldrb	r3, [r7, #11]
 8006eac:	3301      	adds	r3, #1
 8006eae:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb0:	e021      	b.n	8006ef6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	7c1b      	ldrb	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10d      	bne.n	8006ed6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	f107 0208 	add.w	r2, r7, #8
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4798      	blx	r3
 8006eca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	2207      	movs	r2, #7
 8006ed2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed4:	e00f      	b.n	8006ef6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f9d9 	bl	8007290 <USBD_CtlError>
        err++;
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee4:	e007      	b.n	8006ef6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f9d1 	bl	8007290 <USBD_CtlError>
      err++;
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ef4:	bf00      	nop
  }

  if (err != 0U)
 8006ef6:	7afb      	ldrb	r3, [r7, #11]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d11c      	bne.n	8006f36 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006efc:	893b      	ldrh	r3, [r7, #8]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d011      	beq.n	8006f26 <USBD_GetDescriptor+0x2b6>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00d      	beq.n	8006f26 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	88da      	ldrh	r2, [r3, #6]
 8006f0e:	893b      	ldrh	r3, [r7, #8]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	bf28      	it	cs
 8006f14:	4613      	movcs	r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f1a:	893b      	ldrh	r3, [r7, #8]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fa1f 	bl	8007364 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	88db      	ldrh	r3, [r3, #6]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fa76 	bl	8007420 <USBD_CtlSendStatus>
 8006f34:	e000      	b.n	8006f38 <USBD_GetDescriptor+0x2c8>
    return;
 8006f36:	bf00      	nop
    }
  }
}
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop

08006f40 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	889b      	ldrh	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d130      	bne.n	8006fb4 <USBD_SetAddress+0x74>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	88db      	ldrh	r3, [r3, #6]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d12c      	bne.n	8006fb4 <USBD_SetAddress+0x74>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	885b      	ldrh	r3, [r3, #2]
 8006f5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f60:	d828      	bhi.n	8006fb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	885b      	ldrh	r3, [r3, #2]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d104      	bne.n	8006f82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f988 	bl	8007290 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f80:	e01c      	b.n	8006fbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	7bfa      	ldrb	r2, [r7, #15]
 8006f86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fe35 	bl	8007bfe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa43 	bl	8007420 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d004      	beq.n	8006faa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa8:	e008      	b.n	8006fbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2201      	movs	r2, #1
 8006fae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fb2:	e003      	b.n	8006fbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fb4:	6839      	ldr	r1, [r7, #0]
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f96a 	bl	8007290 <USBD_CtlError>
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	4b41      	ldr	r3, [pc, #260]	; (80070dc <USBD_SetConfig+0x118>)
 8006fd6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006fd8:	4b40      	ldr	r3, [pc, #256]	; (80070dc <USBD_SetConfig+0x118>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d904      	bls.n	8006fea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8006fe0:	6839      	ldr	r1, [r7, #0]
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f954 	bl	8007290 <USBD_CtlError>
 8006fe8:	e075      	b.n	80070d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d002      	beq.n	8006ffa <USBD_SetConfig+0x36>
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d023      	beq.n	8007040 <USBD_SetConfig+0x7c>
 8006ff8:	e062      	b.n	80070c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006ffa:	4b38      	ldr	r3, [pc, #224]	; (80070dc <USBD_SetConfig+0x118>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d01a      	beq.n	8007038 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007002:	4b36      	ldr	r3, [pc, #216]	; (80070dc <USBD_SetConfig+0x118>)
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2203      	movs	r2, #3
 8007010:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007014:	4b31      	ldr	r3, [pc, #196]	; (80070dc <USBD_SetConfig+0x118>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	4619      	mov	r1, r3
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7ff f9f3 	bl	8006406 <USBD_SetClassConfig>
 8007020:	4603      	mov	r3, r0
 8007022:	2b02      	cmp	r3, #2
 8007024:	d104      	bne.n	8007030 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f931 	bl	8007290 <USBD_CtlError>
            return;
 800702e:	e052      	b.n	80070d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f9f5 	bl	8007420 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007036:	e04e      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9f1 	bl	8007420 <USBD_CtlSendStatus>
        break;
 800703e:	e04a      	b.n	80070d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007040:	4b26      	ldr	r3, [pc, #152]	; (80070dc <USBD_SetConfig+0x118>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d112      	bne.n	800706e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007050:	4b22      	ldr	r3, [pc, #136]	; (80070dc <USBD_SetConfig+0x118>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <USBD_SetConfig+0x118>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4619      	mov	r1, r3
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff f9ef 	bl	8006444 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9da 	bl	8007420 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800706c:	e033      	b.n	80070d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <USBD_SetConfig+0x118>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d01d      	beq.n	80070b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff f9dd 	bl	8006444 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <USBD_SetConfig+0x118>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007094:	4b11      	ldr	r3, [pc, #68]	; (80070dc <USBD_SetConfig+0x118>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff f9b3 	bl	8006406 <USBD_SetClassConfig>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d104      	bne.n	80070b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80070a6:	6839      	ldr	r1, [r7, #0]
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f8f1 	bl	8007290 <USBD_CtlError>
            return;
 80070ae:	e012      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9b5 	bl	8007420 <USBD_CtlSendStatus>
        break;
 80070b6:	e00e      	b.n	80070d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f9b1 	bl	8007420 <USBD_CtlSendStatus>
        break;
 80070be:	e00a      	b.n	80070d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f8e4 	bl	8007290 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80070c8:	4b04      	ldr	r3, [pc, #16]	; (80070dc <USBD_SetConfig+0x118>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff f9b8 	bl	8006444 <USBD_ClrClassConfig>
        break;
 80070d4:	bf00      	nop
    }
  }
}
 80070d6:	3708      	adds	r7, #8
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	20000200 	.word	0x20000200

080070e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88db      	ldrh	r3, [r3, #6]
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d004      	beq.n	80070fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f8cb 	bl	8007290 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80070fa:	e021      	b.n	8007140 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007102:	2b01      	cmp	r3, #1
 8007104:	db17      	blt.n	8007136 <USBD_GetConfig+0x56>
 8007106:	2b02      	cmp	r3, #2
 8007108:	dd02      	ble.n	8007110 <USBD_GetConfig+0x30>
 800710a:	2b03      	cmp	r3, #3
 800710c:	d00b      	beq.n	8007126 <USBD_GetConfig+0x46>
 800710e:	e012      	b.n	8007136 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	3308      	adds	r3, #8
 800711a:	2201      	movs	r2, #1
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f920 	bl	8007364 <USBD_CtlSendData>
        break;
 8007124:	e00c      	b.n	8007140 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3304      	adds	r3, #4
 800712a:	2201      	movs	r2, #1
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f918 	bl	8007364 <USBD_CtlSendData>
        break;
 8007134:	e004      	b.n	8007140 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f8a9 	bl	8007290 <USBD_CtlError>
        break;
 800713e:	bf00      	nop
}
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	3b01      	subs	r3, #1
 800715a:	2b02      	cmp	r3, #2
 800715c:	d81e      	bhi.n	800719c <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b02      	cmp	r3, #2
 8007164:	d004      	beq.n	8007170 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f891 	bl	8007290 <USBD_CtlError>
        break;
 800716e:	e01a      	b.n	80071a6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f043 0202 	orr.w	r2, r3, #2
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	330c      	adds	r3, #12
 8007190:	2202      	movs	r2, #2
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f000 f8e5 	bl	8007364 <USBD_CtlSendData>
      break;
 800719a:	e004      	b.n	80071a6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f876 	bl	8007290 <USBD_CtlError>
      break;
 80071a4:	bf00      	nop
  }
}
 80071a6:	bf00      	nop
 80071a8:	3708      	adds	r7, #8
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b082      	sub	sp, #8
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	885b      	ldrh	r3, [r3, #2]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d106      	bne.n	80071ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f929 	bl	8007420 <USBD_CtlSendStatus>
  }
}
 80071ce:	bf00      	nop
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b082      	sub	sp, #8
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d80b      	bhi.n	8007204 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	885b      	ldrh	r3, [r3, #2]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10c      	bne.n	800720e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f90f 	bl	8007420 <USBD_CtlSendStatus>
      }
      break;
 8007202:	e004      	b.n	800720e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 f842 	bl	8007290 <USBD_CtlError>
      break;
 800720c:	e000      	b.n	8007210 <USBD_ClrFeature+0x3a>
      break;
 800720e:	bf00      	nop
  }
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	785a      	ldrb	r2, [r3, #1]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	3302      	adds	r3, #2
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	3303      	adds	r3, #3
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	b29b      	uxth	r3, r3
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	4413      	add	r3, r2
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	3304      	adds	r3, #4
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	b29a      	uxth	r2, r3
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	3305      	adds	r3, #5
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	b29b      	uxth	r3, r3
 8007262:	4413      	add	r3, r2
 8007264:	b29a      	uxth	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	3306      	adds	r3, #6
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	b29a      	uxth	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	3307      	adds	r3, #7
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	021b      	lsls	r3, r3, #8
 800727c:	b29b      	uxth	r3, r3
 800727e:	4413      	add	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	80da      	strh	r2, [r3, #6]

}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fc4b 	bl	8007b38 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80072a2:	2100      	movs	r1, #0
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fc47 	bl	8007b38 <USBD_LL_StallEP>
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b086      	sub	sp, #24
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d032      	beq.n	800732e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f834 	bl	8007336 <USBD_GetLen>
 80072ce:	4603      	mov	r3, r0
 80072d0:	3301      	adds	r3, #1
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	75fa      	strb	r2, [r7, #23]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4413      	add	r3, r2
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80072ee:	7dfb      	ldrb	r3, [r7, #23]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	75fa      	strb	r2, [r7, #23]
 80072f4:	461a      	mov	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4413      	add	r3, r2
 80072fa:	2203      	movs	r2, #3
 80072fc:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80072fe:	e012      	b.n	8007326 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	60fa      	str	r2, [r7, #12]
 8007306:	7dfa      	ldrb	r2, [r7, #23]
 8007308:	1c51      	adds	r1, r2, #1
 800730a:	75f9      	strb	r1, [r7, #23]
 800730c:	4611      	mov	r1, r2
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	440a      	add	r2, r1
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
 8007318:	1c5a      	adds	r2, r3, #1
 800731a:	75fa      	strb	r2, [r7, #23]
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	4413      	add	r3, r2
 8007322:	2200      	movs	r2, #0
 8007324:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d1e8      	bne.n	8007300 <USBD_GetString+0x4e>
    }
  }
}
 800732e:	bf00      	nop
 8007330:	3718      	adds	r7, #24
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007336:	b480      	push	{r7}
 8007338:	b085      	sub	sp, #20
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007342:	e005      	b.n	8007350 <USBD_GetLen+0x1a>
  {
    len++;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	3301      	adds	r3, #1
 8007348:	73fb      	strb	r3, [r7, #15]
    buf++;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3301      	adds	r3, #1
 800734e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f5      	bne.n	8007344 <USBD_GetLen+0xe>
  }

  return len;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	bc80      	pop	{r7}
 8007362:	4770      	bx	lr

08007364 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	4613      	mov	r3, r2
 8007370:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2202      	movs	r2, #2
 8007376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007386:	88fb      	ldrh	r3, [r7, #6]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	2100      	movs	r1, #0
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 fc55 	bl	8007c3c <USBD_LL_Transmit>

  return USBD_OK;
 8007392:	2300      	movs	r3, #0
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	2100      	movs	r1, #0
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fc43 	bl	8007c3c <USBD_LL_Transmit>

  return USBD_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2203      	movs	r2, #3
 80073d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80073d6:	88fa      	ldrh	r2, [r7, #6]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80073e6:	88fb      	ldrh	r3, [r7, #6]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	2100      	movs	r1, #0
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fc48 	bl	8007c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	4613      	mov	r3, r2
 8007408:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	68ba      	ldr	r2, [r7, #8]
 800740e:	2100      	movs	r1, #0
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 fc36 	bl	8007c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3710      	adds	r7, #16
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2204      	movs	r2, #4
 800742c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fc00 	bl	8007c3c <USBD_LL_Transmit>

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2205      	movs	r2, #5
 8007452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007456:	2300      	movs	r3, #0
 8007458:	2200      	movs	r2, #0
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fc10 	bl	8007c82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007470:	2200      	movs	r2, #0
 8007472:	4912      	ldr	r1, [pc, #72]	; (80074bc <MX_USB_DEVICE_Init+0x50>)
 8007474:	4812      	ldr	r0, [pc, #72]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 8007476:	f7fe ff6c 	bl	8006352 <USBD_Init>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007480:	f7f9 f956 	bl	8000730 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007484:	490f      	ldr	r1, [pc, #60]	; (80074c4 <MX_USB_DEVICE_Init+0x58>)
 8007486:	480e      	ldr	r0, [pc, #56]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 8007488:	f7fe ff8e 	bl	80063a8 <USBD_RegisterClass>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007492:	f7f9 f94d 	bl	8000730 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007496:	490c      	ldr	r1, [pc, #48]	; (80074c8 <MX_USB_DEVICE_Init+0x5c>)
 8007498:	4809      	ldr	r0, [pc, #36]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 800749a:	f7fe febf 	bl	800621c <USBD_CDC_RegisterInterface>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80074a4:	f7f9 f944 	bl	8000730 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074a8:	4805      	ldr	r0, [pc, #20]	; (80074c0 <MX_USB_DEVICE_Init+0x54>)
 80074aa:	f7fe ff96 	bl	80063da <USBD_Start>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074b4:	f7f9 f93c 	bl	8000730 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074b8:	bf00      	nop
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2000012c 	.word	0x2000012c
 80074c0:	20000590 	.word	0x20000590
 80074c4:	20000018 	.word	0x20000018
 80074c8:	2000011c 	.word	0x2000011c

080074cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074d0:	2200      	movs	r2, #0
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <CDC_Init_FS+0x1c>)
 80074d4:	4805      	ldr	r0, [pc, #20]	; (80074ec <CDC_Init_FS+0x20>)
 80074d6:	f7fe feb7 	bl	8006248 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074da:	4905      	ldr	r1, [pc, #20]	; (80074f0 <CDC_Init_FS+0x24>)
 80074dc:	4803      	ldr	r0, [pc, #12]	; (80074ec <CDC_Init_FS+0x20>)
 80074de:	f7fe fecc 	bl	800627a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000c3c 	.word	0x20000c3c
 80074ec:	20000590 	.word	0x20000590
 80074f0:	20000854 	.word	0x20000854

080074f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr
	...

08007504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	4603      	mov	r3, r0
 800750c:	6039      	str	r1, [r7, #0]
 800750e:	71fb      	strb	r3, [r7, #7]
 8007510:	4613      	mov	r3, r2
 8007512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b23      	cmp	r3, #35	; 0x23
 8007518:	d84a      	bhi.n	80075b0 <CDC_Control_FS+0xac>
 800751a:	a201      	add	r2, pc, #4	; (adr r2, 8007520 <CDC_Control_FS+0x1c>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	080075b1 	.word	0x080075b1
 8007524:	080075b1 	.word	0x080075b1
 8007528:	080075b1 	.word	0x080075b1
 800752c:	080075b1 	.word	0x080075b1
 8007530:	080075b1 	.word	0x080075b1
 8007534:	080075b1 	.word	0x080075b1
 8007538:	080075b1 	.word	0x080075b1
 800753c:	080075b1 	.word	0x080075b1
 8007540:	080075b1 	.word	0x080075b1
 8007544:	080075b1 	.word	0x080075b1
 8007548:	080075b1 	.word	0x080075b1
 800754c:	080075b1 	.word	0x080075b1
 8007550:	080075b1 	.word	0x080075b1
 8007554:	080075b1 	.word	0x080075b1
 8007558:	080075b1 	.word	0x080075b1
 800755c:	080075b1 	.word	0x080075b1
 8007560:	080075b1 	.word	0x080075b1
 8007564:	080075b1 	.word	0x080075b1
 8007568:	080075b1 	.word	0x080075b1
 800756c:	080075b1 	.word	0x080075b1
 8007570:	080075b1 	.word	0x080075b1
 8007574:	080075b1 	.word	0x080075b1
 8007578:	080075b1 	.word	0x080075b1
 800757c:	080075b1 	.word	0x080075b1
 8007580:	080075b1 	.word	0x080075b1
 8007584:	080075b1 	.word	0x080075b1
 8007588:	080075b1 	.word	0x080075b1
 800758c:	080075b1 	.word	0x080075b1
 8007590:	080075b1 	.word	0x080075b1
 8007594:	080075b1 	.word	0x080075b1
 8007598:	080075b1 	.word	0x080075b1
 800759c:	080075b1 	.word	0x080075b1
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075b1 	.word	0x080075b1
 80075a8:	080075b1 	.word	0x080075b1
 80075ac:	080075b1 	.word	0x080075b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075b0:	bf00      	nop
  }

  return (USBD_OK);
 80075b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop

080075c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_rx_flag = Buf[0];//Se guarda lo que llega en la variable externa CDC_rx_flag. declarada en el main
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	781a      	ldrb	r2, [r3, #0]
 80075ce:	4b07      	ldr	r3, [pc, #28]	; (80075ec <CDC_Receive_FS+0x2c>)
 80075d0:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	4806      	ldr	r0, [pc, #24]	; (80075f0 <CDC_Receive_FS+0x30>)
 80075d6:	f7fe fe50 	bl	800627a <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075da:	4805      	ldr	r0, [pc, #20]	; (80075f0 <CDC_Receive_FS+0x30>)
 80075dc:	f7fe fe8f 	bl	80062fe <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80075e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	2000046c 	.word	0x2000046c
 80075f0:	20000590 	.word	0x20000590

080075f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007600:	2300      	movs	r3, #0
 8007602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007604:	4b0d      	ldr	r3, [pc, #52]	; (800763c <CDC_Transmit_FS+0x48>)
 8007606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007616:	2301      	movs	r3, #1
 8007618:	e00b      	b.n	8007632 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	461a      	mov	r2, r3
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4806      	ldr	r0, [pc, #24]	; (800763c <CDC_Transmit_FS+0x48>)
 8007622:	f7fe fe11 	bl	8006248 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007626:	4805      	ldr	r0, [pc, #20]	; (800763c <CDC_Transmit_FS+0x48>)
 8007628:	f7fe fe3a 	bl	80062a0 <USBD_CDC_TransmitPacket>
 800762c:	4603      	mov	r3, r0
 800762e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007630:	7bfb      	ldrb	r3, [r7, #15]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000590 	.word	0x20000590

08007640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	2212      	movs	r2, #18
 8007650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007652:	4b03      	ldr	r3, [pc, #12]	; (8007660 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	bc80      	pop	{r7}
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	20000148 	.word	0x20000148

08007664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	6039      	str	r1, [r7, #0]
 800766e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2204      	movs	r2, #4
 8007674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007676:	4b03      	ldr	r3, [pc, #12]	; (8007684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	bc80      	pop	{r7}
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	2000015c 	.word	0x2000015c

08007688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	4907      	ldr	r1, [pc, #28]	; (80076bc <USBD_FS_ProductStrDescriptor+0x34>)
 800769e:	4808      	ldr	r0, [pc, #32]	; (80076c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076a0:	f7ff fe07 	bl	80072b2 <USBD_GetString>
 80076a4:	e004      	b.n	80076b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	4904      	ldr	r1, [pc, #16]	; (80076bc <USBD_FS_ProductStrDescriptor+0x34>)
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80076ac:	f7ff fe01 	bl	80072b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076b0:	4b02      	ldr	r3, [pc, #8]	; (80076bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20001024 	.word	0x20001024
 80076c0:	08008688 	.word	0x08008688

080076c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80076d0:	683a      	ldr	r2, [r7, #0]
 80076d2:	4904      	ldr	r1, [pc, #16]	; (80076e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80076d4:	4804      	ldr	r0, [pc, #16]	; (80076e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80076d6:	f7ff fdec 	bl	80072b2 <USBD_GetString>
  return USBD_StrDesc;
 80076da:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20001024 	.word	0x20001024
 80076e8:	080086a0 	.word	0x080086a0

080076ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	221a      	movs	r2, #26
 80076fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076fe:	f000 f843 	bl	8007788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007702:	4b02      	ldr	r3, [pc, #8]	; (800770c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	20000160 	.word	0x20000160

08007710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4907      	ldr	r1, [pc, #28]	; (8007744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007726:	4808      	ldr	r0, [pc, #32]	; (8007748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007728:	f7ff fdc3 	bl	80072b2 <USBD_GetString>
 800772c:	e004      	b.n	8007738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007732:	4805      	ldr	r0, [pc, #20]	; (8007748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007734:	f7ff fdbd 	bl	80072b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20001024 	.word	0x20001024
 8007748:	080086b4 	.word	0x080086b4

0800774c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b082      	sub	sp, #8
 8007750:	af00      	add	r7, sp, #0
 8007752:	4603      	mov	r3, r0
 8007754:	6039      	str	r1, [r7, #0]
 8007756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007758:	79fb      	ldrb	r3, [r7, #7]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d105      	bne.n	800776a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	4907      	ldr	r1, [pc, #28]	; (8007780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007762:	4808      	ldr	r0, [pc, #32]	; (8007784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007764:	f7ff fda5 	bl	80072b2 <USBD_GetString>
 8007768:	e004      	b.n	8007774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	4904      	ldr	r1, [pc, #16]	; (8007780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800776e:	4805      	ldr	r0, [pc, #20]	; (8007784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007770:	f7ff fd9f 	bl	80072b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007776:	4618      	mov	r0, r3
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	20001024 	.word	0x20001024
 8007784:	080086c0 	.word	0x080086c0

08007788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800778e:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <Get_SerialNum+0x44>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <Get_SerialNum+0x48>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800779a:	4b0e      	ldr	r3, [pc, #56]	; (80077d4 <Get_SerialNum+0x4c>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4413      	add	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077ae:	2208      	movs	r2, #8
 80077b0:	4909      	ldr	r1, [pc, #36]	; (80077d8 <Get_SerialNum+0x50>)
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f000 f814 	bl	80077e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077b8:	2204      	movs	r2, #4
 80077ba:	4908      	ldr	r1, [pc, #32]	; (80077dc <Get_SerialNum+0x54>)
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f000 f80f 	bl	80077e0 <IntToUnicode>
  }
}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	1ffff7e8 	.word	0x1ffff7e8
 80077d0:	1ffff7ec 	.word	0x1ffff7ec
 80077d4:	1ffff7f0 	.word	0x1ffff7f0
 80077d8:	20000162 	.word	0x20000162
 80077dc:	20000172 	.word	0x20000172

080077e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	4613      	mov	r3, r2
 80077ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077ee:	2300      	movs	r3, #0
 80077f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077f2:	2300      	movs	r3, #0
 80077f4:	75fb      	strb	r3, [r7, #23]
 80077f6:	e027      	b.n	8007848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	0f1b      	lsrs	r3, r3, #28
 80077fc:	2b09      	cmp	r3, #9
 80077fe:	d80b      	bhi.n	8007818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	0f1b      	lsrs	r3, r3, #28
 8007804:	b2da      	uxtb	r2, r3
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	005b      	lsls	r3, r3, #1
 800780a:	4619      	mov	r1, r3
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	440b      	add	r3, r1
 8007810:	3230      	adds	r2, #48	; 0x30
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	e00a      	b.n	800782e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	0f1b      	lsrs	r3, r3, #28
 800781c:	b2da      	uxtb	r2, r3
 800781e:	7dfb      	ldrb	r3, [r7, #23]
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4619      	mov	r1, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	440b      	add	r3, r1
 8007828:	3237      	adds	r2, #55	; 0x37
 800782a:	b2d2      	uxtb	r2, r2
 800782c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	005b      	lsls	r3, r3, #1
 8007838:	3301      	adds	r3, #1
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	3301      	adds	r3, #1
 8007846:	75fb      	strb	r3, [r7, #23]
 8007848:	7dfa      	ldrb	r2, [r7, #23]
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	429a      	cmp	r2, r3
 800784e:	d3d3      	bcc.n	80077f8 <IntToUnicode+0x18>
  }
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
	...

0800785c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a09      	ldr	r2, [pc, #36]	; (8007890 <HAL_PCD_MspInit+0x34>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d10b      	bne.n	8007886 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800786e:	4b09      	ldr	r3, [pc, #36]	; (8007894 <HAL_PCD_MspInit+0x38>)
 8007870:	69db      	ldr	r3, [r3, #28]
 8007872:	4a08      	ldr	r2, [pc, #32]	; (8007894 <HAL_PCD_MspInit+0x38>)
 8007874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007878:	61d3      	str	r3, [r2, #28]
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <HAL_PCD_MspInit+0x38>)
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007886:	bf00      	nop
 8007888:	3714      	adds	r7, #20
 800788a:	46bd      	mov	sp, r7
 800788c:	bc80      	pop	{r7}
 800788e:	4770      	bx	lr
 8007890:	40005c00 	.word	0x40005c00
 8007894:	40021000 	.word	0x40021000

08007898 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80078ac:	4619      	mov	r1, r3
 80078ae:	4610      	mov	r0, r2
 80078b0:	f7fe fddb 	bl	800646a <USBD_LL_SetupStage>
}
 80078b4:	bf00      	nop
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	015b      	lsls	r3, r3, #5
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	4619      	mov	r1, r3
 80078e0:	f7fe fe0e 	bl	8006500 <USBD_LL_DataOutStage>
}
 80078e4:	bf00      	nop
 80078e6:	3708      	adds	r7, #8
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	460b      	mov	r3, r1
 80078f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	015b      	lsls	r3, r3, #5
 8007904:	4413      	add	r3, r2
 8007906:	333c      	adds	r3, #60	; 0x3c
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	4619      	mov	r1, r3
 800790e:	f7fe fe68 	bl	80065e2 <USBD_LL_DataInStage>
}
 8007912:	bf00      	nop
 8007914:	3708      	adds	r7, #8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe ff78 	bl	800681e <USBD_LL_SOF>
}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800793e:	2301      	movs	r3, #1
 8007940:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d001      	beq.n	800794e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800794a:	f7f8 fef1 	bl	8000730 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007954:	7bfa      	ldrb	r2, [r7, #15]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe ff28 	bl	80067ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007964:	4618      	mov	r0, r3
 8007966:	f7fe fee1 	bl	800672c <USBD_LL_Reset>
}
 800796a:	bf00      	nop
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
	...

08007974 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe ff22 	bl	80067cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <HAL_PCD_SuspendCallback+0x30>)
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	4a03      	ldr	r2, [pc, #12]	; (80079a4 <HAL_PCD_SuspendCallback+0x30>)
 8007996:	f043 0306 	orr.w	r3, r3, #6
 800799a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	e000ed00 	.word	0xe000ed00

080079a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe ff1c 	bl	80067f4 <USBD_LL_Resume>
}
 80079bc:	bf00      	nop
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80079cc:	4a28      	ldr	r2, [pc, #160]	; (8007a70 <USBD_LL_Init+0xac>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a26      	ldr	r2, [pc, #152]	; (8007a70 <USBD_LL_Init+0xac>)
 80079d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80079dc:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <USBD_LL_Init+0xac>)
 80079de:	4a25      	ldr	r2, [pc, #148]	; (8007a74 <USBD_LL_Init+0xb0>)
 80079e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80079e2:	4b23      	ldr	r3, [pc, #140]	; (8007a70 <USBD_LL_Init+0xac>)
 80079e4:	2208      	movs	r2, #8
 80079e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80079e8:	4b21      	ldr	r3, [pc, #132]	; (8007a70 <USBD_LL_Init+0xac>)
 80079ea:	2202      	movs	r2, #2
 80079ec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80079ee:	4b20      	ldr	r3, [pc, #128]	; (8007a70 <USBD_LL_Init+0xac>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80079f4:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <USBD_LL_Init+0xac>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	; (8007a70 <USBD_LL_Init+0xac>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a00:	481b      	ldr	r0, [pc, #108]	; (8007a70 <USBD_LL_Init+0xac>)
 8007a02:	f7fa fef5 	bl	80027f0 <HAL_PCD_Init>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d001      	beq.n	8007a10 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007a0c:	f7f8 fe90 	bl	8000730 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a16:	2318      	movs	r3, #24
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	f7fb fd8e 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a26:	2358      	movs	r3, #88	; 0x58
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2180      	movs	r1, #128	; 0x80
 8007a2c:	f7fb fd86 	bl	800353c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a36:	23c0      	movs	r3, #192	; 0xc0
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2181      	movs	r1, #129	; 0x81
 8007a3c:	f7fb fd7e 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a46:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	f7fb fd75 	bl	800353c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2182      	movs	r1, #130	; 0x82
 8007a60:	f7fb fd6c 	bl	800353c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	20001224 	.word	0x20001224
 8007a74:	40005c00 	.word	0x40005c00

08007a78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a80:	2300      	movs	r3, #0
 8007a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fa ff8f 	bl	80029b2 <HAL_PCD_Start>
 8007a94:	4603      	mov	r3, r0
 8007a96:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a98:	7bfb      	ldrb	r3, [r7, #15]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f948 	bl	8007d30 <USBD_Get_USB_Status>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}

08007aae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
 8007ab6:	4608      	mov	r0, r1
 8007ab8:	4611      	mov	r1, r2
 8007aba:	461a      	mov	r2, r3
 8007abc:	4603      	mov	r3, r0
 8007abe:	70fb      	strb	r3, [r7, #3]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70bb      	strb	r3, [r7, #2]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ad6:	78bb      	ldrb	r3, [r7, #2]
 8007ad8:	883a      	ldrh	r2, [r7, #0]
 8007ada:	78f9      	ldrb	r1, [r7, #3]
 8007adc:	f7fb f8c2 	bl	8002c64 <HAL_PCD_EP_Open>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 f922 	bl	8007d30 <USBD_Get_USB_Status>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
 8007b02:	460b      	mov	r3, r1
 8007b04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b14:	78fa      	ldrb	r2, [r7, #3]
 8007b16:	4611      	mov	r1, r2
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fb f903 	bl	8002d24 <HAL_PCD_EP_Close>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	4618      	mov	r0, r3
 8007b26:	f000 f903 	bl	8007d30 <USBD_Get_USB_Status>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b52:	78fa      	ldrb	r2, [r7, #3]
 8007b54:	4611      	mov	r1, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fb f9ad 	bl	8002eb6 <HAL_PCD_EP_SetStall>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 f8e4 	bl	8007d30 <USBD_Get_USB_Status>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
 8007b7e:	460b      	mov	r3, r1
 8007b80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4611      	mov	r1, r2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7fb f9e8 	bl	8002f6a <HAL_PCD_EP_ClrStall>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 f8c5 	bl	8007d30 <USBD_Get_USB_Status>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007bc6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	da08      	bge.n	8007be2 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007bd0:	78fb      	ldrb	r3, [r7, #3]
 8007bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	015b      	lsls	r3, r3, #5
 8007bda:	4413      	add	r3, r2
 8007bdc:	332a      	adds	r3, #42	; 0x2a
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	e008      	b.n	8007bf4 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	015b      	lsls	r3, r3, #5
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007bf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr

08007bfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b084      	sub	sp, #16
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	460b      	mov	r3, r1
 8007c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c18:	78fa      	ldrb	r2, [r7, #3]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7fa fffc 	bl	8002c1a <HAL_PCD_SetAddress>
 8007c22:	4603      	mov	r3, r0
 8007c24:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c26:	7bfb      	ldrb	r3, [r7, #15]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 f881 	bl	8007d30 <USBD_Get_USB_Status>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	461a      	mov	r2, r3
 8007c48:	460b      	mov	r3, r1
 8007c4a:	72fb      	strb	r3, [r7, #11]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c50:	2300      	movs	r3, #0
 8007c52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c5e:	893b      	ldrh	r3, [r7, #8]
 8007c60:	7af9      	ldrb	r1, [r7, #11]
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	f7fb f8ee 	bl	8002e44 <HAL_PCD_EP_Transmit>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c6c:	7dfb      	ldrb	r3, [r7, #23]
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 f85e 	bl	8007d30 <USBD_Get_USB_Status>
 8007c74:	4603      	mov	r3, r0
 8007c76:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007c78:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	607a      	str	r2, [r7, #4]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	460b      	mov	r3, r1
 8007c90:	72fb      	strb	r3, [r7, #11]
 8007c92:	4613      	mov	r3, r2
 8007c94:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ca4:	893b      	ldrh	r3, [r7, #8]
 8007ca6:	7af9      	ldrb	r1, [r7, #11]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	f7fb f87d 	bl	8002da8 <HAL_PCD_EP_Receive>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 f83b 	bl	8007d30 <USBD_Get_USB_Status>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cda:	78fa      	ldrb	r2, [r7, #3]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fb f89c 	bl	8002e1c <HAL_PCD_EP_GetRxCount>
 8007ce4:	4603      	mov	r3, r0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cf8:	4b02      	ldr	r3, [pc, #8]	; (8007d04 <USBD_static_malloc+0x14>)
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bc80      	pop	{r7}
 8007d02:	4770      	bx	lr
 8007d04:	20000204 	.word	0x20000204

08007d08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]

}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr

08007d1a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b083      	sub	sp, #12
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007d26:	bf00      	nop
 8007d28:	370c      	adds	r7, #12
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr

08007d30 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	4603      	mov	r3, r0
 8007d38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d817      	bhi.n	8007d74 <USBD_Get_USB_Status+0x44>
 8007d44:	a201      	add	r2, pc, #4	; (adr r2, 8007d4c <USBD_Get_USB_Status+0x1c>)
 8007d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4a:	bf00      	nop
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007d63 	.word	0x08007d63
 8007d54:	08007d69 	.word	0x08007d69
 8007d58:	08007d6f 	.word	0x08007d6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d60:	e00b      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d62:	2302      	movs	r3, #2
 8007d64:	73fb      	strb	r3, [r7, #15]
    break;
 8007d66:	e008      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d6c:	e005      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	73fb      	strb	r3, [r7, #15]
    break;
 8007d72:	e002      	b.n	8007d7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d74:	2302      	movs	r3, #2
 8007d76:	73fb      	strb	r3, [r7, #15]
    break;
 8007d78:	bf00      	nop
  }
  return usb_status;
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bc80      	pop	{r7}
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop

08007d88 <__errno>:
 8007d88:	4b01      	ldr	r3, [pc, #4]	; (8007d90 <__errno+0x8>)
 8007d8a:	6818      	ldr	r0, [r3, #0]
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	2000017c 	.word	0x2000017c

08007d94 <__libc_init_array>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	2500      	movs	r5, #0
 8007d98:	4e0c      	ldr	r6, [pc, #48]	; (8007dcc <__libc_init_array+0x38>)
 8007d9a:	4c0d      	ldr	r4, [pc, #52]	; (8007dd0 <__libc_init_array+0x3c>)
 8007d9c:	1ba4      	subs	r4, r4, r6
 8007d9e:	10a4      	asrs	r4, r4, #2
 8007da0:	42a5      	cmp	r5, r4
 8007da2:	d109      	bne.n	8007db8 <__libc_init_array+0x24>
 8007da4:	f000 fc34 	bl	8008610 <_init>
 8007da8:	2500      	movs	r5, #0
 8007daa:	4e0a      	ldr	r6, [pc, #40]	; (8007dd4 <__libc_init_array+0x40>)
 8007dac:	4c0a      	ldr	r4, [pc, #40]	; (8007dd8 <__libc_init_array+0x44>)
 8007dae:	1ba4      	subs	r4, r4, r6
 8007db0:	10a4      	asrs	r4, r4, #2
 8007db2:	42a5      	cmp	r5, r4
 8007db4:	d105      	bne.n	8007dc2 <__libc_init_array+0x2e>
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dbc:	4798      	blx	r3
 8007dbe:	3501      	adds	r5, #1
 8007dc0:	e7ee      	b.n	8007da0 <__libc_init_array+0xc>
 8007dc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007dc6:	4798      	blx	r3
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7f2      	b.n	8007db2 <__libc_init_array+0x1e>
 8007dcc:	0800871c 	.word	0x0800871c
 8007dd0:	0800871c 	.word	0x0800871c
 8007dd4:	0800871c 	.word	0x0800871c
 8007dd8:	08008720 	.word	0x08008720

08007ddc <memset>:
 8007ddc:	4603      	mov	r3, r0
 8007dde:	4402      	add	r2, r0
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d100      	bne.n	8007de6 <memset+0xa>
 8007de4:	4770      	bx	lr
 8007de6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dea:	e7f9      	b.n	8007de0 <memset+0x4>

08007dec <siprintf>:
 8007dec:	b40e      	push	{r1, r2, r3}
 8007dee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007df2:	b500      	push	{lr}
 8007df4:	b09c      	sub	sp, #112	; 0x70
 8007df6:	ab1d      	add	r3, sp, #116	; 0x74
 8007df8:	9002      	str	r0, [sp, #8]
 8007dfa:	9006      	str	r0, [sp, #24]
 8007dfc:	9107      	str	r1, [sp, #28]
 8007dfe:	9104      	str	r1, [sp, #16]
 8007e00:	4808      	ldr	r0, [pc, #32]	; (8007e24 <siprintf+0x38>)
 8007e02:	4909      	ldr	r1, [pc, #36]	; (8007e28 <siprintf+0x3c>)
 8007e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	6800      	ldr	r0, [r0, #0]
 8007e0c:	a902      	add	r1, sp, #8
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	f000 f866 	bl	8007ee0 <_svfiprintf_r>
 8007e14:	2200      	movs	r2, #0
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	701a      	strb	r2, [r3, #0]
 8007e1a:	b01c      	add	sp, #112	; 0x70
 8007e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e20:	b003      	add	sp, #12
 8007e22:	4770      	bx	lr
 8007e24:	2000017c 	.word	0x2000017c
 8007e28:	ffff0208 	.word	0xffff0208

08007e2c <__ssputs_r>:
 8007e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e30:	688e      	ldr	r6, [r1, #8]
 8007e32:	4682      	mov	sl, r0
 8007e34:	429e      	cmp	r6, r3
 8007e36:	460c      	mov	r4, r1
 8007e38:	4690      	mov	r8, r2
 8007e3a:	4699      	mov	r9, r3
 8007e3c:	d837      	bhi.n	8007eae <__ssputs_r+0x82>
 8007e3e:	898a      	ldrh	r2, [r1, #12]
 8007e40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e44:	d031      	beq.n	8007eaa <__ssputs_r+0x7e>
 8007e46:	2302      	movs	r3, #2
 8007e48:	6825      	ldr	r5, [r4, #0]
 8007e4a:	6909      	ldr	r1, [r1, #16]
 8007e4c:	1a6f      	subs	r7, r5, r1
 8007e4e:	6965      	ldr	r5, [r4, #20]
 8007e50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e54:	fb95 f5f3 	sdiv	r5, r5, r3
 8007e58:	f109 0301 	add.w	r3, r9, #1
 8007e5c:	443b      	add	r3, r7
 8007e5e:	429d      	cmp	r5, r3
 8007e60:	bf38      	it	cc
 8007e62:	461d      	movcc	r5, r3
 8007e64:	0553      	lsls	r3, r2, #21
 8007e66:	d530      	bpl.n	8007eca <__ssputs_r+0x9e>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f000 fb37 	bl	80084dc <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b950      	cbnz	r0, 8007e88 <__ssputs_r+0x5c>
 8007e72:	230c      	movs	r3, #12
 8007e74:	f04f 30ff 	mov.w	r0, #4294967295
 8007e78:	f8ca 3000 	str.w	r3, [sl]
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e82:	81a3      	strh	r3, [r4, #12]
 8007e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e88:	463a      	mov	r2, r7
 8007e8a:	6921      	ldr	r1, [r4, #16]
 8007e8c:	f000 fab6 	bl	80083fc <memcpy>
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	6126      	str	r6, [r4, #16]
 8007e9e:	443e      	add	r6, r7
 8007ea0:	6026      	str	r6, [r4, #0]
 8007ea2:	464e      	mov	r6, r9
 8007ea4:	6165      	str	r5, [r4, #20]
 8007ea6:	1bed      	subs	r5, r5, r7
 8007ea8:	60a5      	str	r5, [r4, #8]
 8007eaa:	454e      	cmp	r6, r9
 8007eac:	d900      	bls.n	8007eb0 <__ssputs_r+0x84>
 8007eae:	464e      	mov	r6, r9
 8007eb0:	4632      	mov	r2, r6
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	6820      	ldr	r0, [r4, #0]
 8007eb6:	f000 faac 	bl	8008412 <memmove>
 8007eba:	68a3      	ldr	r3, [r4, #8]
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	1b9b      	subs	r3, r3, r6
 8007ec0:	60a3      	str	r3, [r4, #8]
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	441e      	add	r6, r3
 8007ec6:	6026      	str	r6, [r4, #0]
 8007ec8:	e7dc      	b.n	8007e84 <__ssputs_r+0x58>
 8007eca:	462a      	mov	r2, r5
 8007ecc:	f000 fb60 	bl	8008590 <_realloc_r>
 8007ed0:	4606      	mov	r6, r0
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d1e2      	bne.n	8007e9c <__ssputs_r+0x70>
 8007ed6:	6921      	ldr	r1, [r4, #16]
 8007ed8:	4650      	mov	r0, sl
 8007eda:	f000 fab3 	bl	8008444 <_free_r>
 8007ede:	e7c8      	b.n	8007e72 <__ssputs_r+0x46>

08007ee0 <_svfiprintf_r>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	461d      	mov	r5, r3
 8007ee6:	898b      	ldrh	r3, [r1, #12]
 8007ee8:	b09d      	sub	sp, #116	; 0x74
 8007eea:	061f      	lsls	r7, r3, #24
 8007eec:	4680      	mov	r8, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	4616      	mov	r6, r2
 8007ef2:	d50f      	bpl.n	8007f14 <_svfiprintf_r+0x34>
 8007ef4:	690b      	ldr	r3, [r1, #16]
 8007ef6:	b96b      	cbnz	r3, 8007f14 <_svfiprintf_r+0x34>
 8007ef8:	2140      	movs	r1, #64	; 0x40
 8007efa:	f000 faef 	bl	80084dc <_malloc_r>
 8007efe:	6020      	str	r0, [r4, #0]
 8007f00:	6120      	str	r0, [r4, #16]
 8007f02:	b928      	cbnz	r0, 8007f10 <_svfiprintf_r+0x30>
 8007f04:	230c      	movs	r3, #12
 8007f06:	f8c8 3000 	str.w	r3, [r8]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	e0c8      	b.n	80080a2 <_svfiprintf_r+0x1c2>
 8007f10:	2340      	movs	r3, #64	; 0x40
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	2300      	movs	r3, #0
 8007f16:	9309      	str	r3, [sp, #36]	; 0x24
 8007f18:	2320      	movs	r3, #32
 8007f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f1e:	2330      	movs	r3, #48	; 0x30
 8007f20:	f04f 0b01 	mov.w	fp, #1
 8007f24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f28:	9503      	str	r5, [sp, #12]
 8007f2a:	4637      	mov	r7, r6
 8007f2c:	463d      	mov	r5, r7
 8007f2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f32:	b10b      	cbz	r3, 8007f38 <_svfiprintf_r+0x58>
 8007f34:	2b25      	cmp	r3, #37	; 0x25
 8007f36:	d13e      	bne.n	8007fb6 <_svfiprintf_r+0xd6>
 8007f38:	ebb7 0a06 	subs.w	sl, r7, r6
 8007f3c:	d00b      	beq.n	8007f56 <_svfiprintf_r+0x76>
 8007f3e:	4653      	mov	r3, sl
 8007f40:	4632      	mov	r2, r6
 8007f42:	4621      	mov	r1, r4
 8007f44:	4640      	mov	r0, r8
 8007f46:	f7ff ff71 	bl	8007e2c <__ssputs_r>
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	f000 80a4 	beq.w	8008098 <_svfiprintf_r+0x1b8>
 8007f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f52:	4453      	add	r3, sl
 8007f54:	9309      	str	r3, [sp, #36]	; 0x24
 8007f56:	783b      	ldrb	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 809d 	beq.w	8008098 <_svfiprintf_r+0x1b8>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f04f 32ff 	mov.w	r2, #4294967295
 8007f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f68:	9304      	str	r3, [sp, #16]
 8007f6a:	9307      	str	r3, [sp, #28]
 8007f6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f70:	931a      	str	r3, [sp, #104]	; 0x68
 8007f72:	462f      	mov	r7, r5
 8007f74:	2205      	movs	r2, #5
 8007f76:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f7a:	4850      	ldr	r0, [pc, #320]	; (80080bc <_svfiprintf_r+0x1dc>)
 8007f7c:	f000 fa30 	bl	80083e0 <memchr>
 8007f80:	9b04      	ldr	r3, [sp, #16]
 8007f82:	b9d0      	cbnz	r0, 8007fba <_svfiprintf_r+0xda>
 8007f84:	06d9      	lsls	r1, r3, #27
 8007f86:	bf44      	itt	mi
 8007f88:	2220      	movmi	r2, #32
 8007f8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f8e:	071a      	lsls	r2, r3, #28
 8007f90:	bf44      	itt	mi
 8007f92:	222b      	movmi	r2, #43	; 0x2b
 8007f94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f98:	782a      	ldrb	r2, [r5, #0]
 8007f9a:	2a2a      	cmp	r2, #42	; 0x2a
 8007f9c:	d015      	beq.n	8007fca <_svfiprintf_r+0xea>
 8007f9e:	462f      	mov	r7, r5
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	250a      	movs	r5, #10
 8007fa4:	9a07      	ldr	r2, [sp, #28]
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fac:	3b30      	subs	r3, #48	; 0x30
 8007fae:	2b09      	cmp	r3, #9
 8007fb0:	d94d      	bls.n	800804e <_svfiprintf_r+0x16e>
 8007fb2:	b1b8      	cbz	r0, 8007fe4 <_svfiprintf_r+0x104>
 8007fb4:	e00f      	b.n	8007fd6 <_svfiprintf_r+0xf6>
 8007fb6:	462f      	mov	r7, r5
 8007fb8:	e7b8      	b.n	8007f2c <_svfiprintf_r+0x4c>
 8007fba:	4a40      	ldr	r2, [pc, #256]	; (80080bc <_svfiprintf_r+0x1dc>)
 8007fbc:	463d      	mov	r5, r7
 8007fbe:	1a80      	subs	r0, r0, r2
 8007fc0:	fa0b f000 	lsl.w	r0, fp, r0
 8007fc4:	4318      	orrs	r0, r3
 8007fc6:	9004      	str	r0, [sp, #16]
 8007fc8:	e7d3      	b.n	8007f72 <_svfiprintf_r+0x92>
 8007fca:	9a03      	ldr	r2, [sp, #12]
 8007fcc:	1d11      	adds	r1, r2, #4
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	9103      	str	r1, [sp, #12]
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	db01      	blt.n	8007fda <_svfiprintf_r+0xfa>
 8007fd6:	9207      	str	r2, [sp, #28]
 8007fd8:	e004      	b.n	8007fe4 <_svfiprintf_r+0x104>
 8007fda:	4252      	negs	r2, r2
 8007fdc:	f043 0302 	orr.w	r3, r3, #2
 8007fe0:	9207      	str	r2, [sp, #28]
 8007fe2:	9304      	str	r3, [sp, #16]
 8007fe4:	783b      	ldrb	r3, [r7, #0]
 8007fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8007fe8:	d10c      	bne.n	8008004 <_svfiprintf_r+0x124>
 8007fea:	787b      	ldrb	r3, [r7, #1]
 8007fec:	2b2a      	cmp	r3, #42	; 0x2a
 8007fee:	d133      	bne.n	8008058 <_svfiprintf_r+0x178>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3702      	adds	r7, #2
 8007ff4:	1d1a      	adds	r2, r3, #4
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	9203      	str	r2, [sp, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bfb8      	it	lt
 8007ffe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008002:	9305      	str	r3, [sp, #20]
 8008004:	4d2e      	ldr	r5, [pc, #184]	; (80080c0 <_svfiprintf_r+0x1e0>)
 8008006:	2203      	movs	r2, #3
 8008008:	7839      	ldrb	r1, [r7, #0]
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f9e8 	bl	80083e0 <memchr>
 8008010:	b138      	cbz	r0, 8008022 <_svfiprintf_r+0x142>
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	1b40      	subs	r0, r0, r5
 8008016:	fa03 f000 	lsl.w	r0, r3, r0
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	3701      	adds	r7, #1
 800801e:	4303      	orrs	r3, r0
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	7839      	ldrb	r1, [r7, #0]
 8008024:	2206      	movs	r2, #6
 8008026:	4827      	ldr	r0, [pc, #156]	; (80080c4 <_svfiprintf_r+0x1e4>)
 8008028:	1c7e      	adds	r6, r7, #1
 800802a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800802e:	f000 f9d7 	bl	80083e0 <memchr>
 8008032:	2800      	cmp	r0, #0
 8008034:	d038      	beq.n	80080a8 <_svfiprintf_r+0x1c8>
 8008036:	4b24      	ldr	r3, [pc, #144]	; (80080c8 <_svfiprintf_r+0x1e8>)
 8008038:	bb13      	cbnz	r3, 8008080 <_svfiprintf_r+0x1a0>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	3307      	adds	r3, #7
 800803e:	f023 0307 	bic.w	r3, r3, #7
 8008042:	3308      	adds	r3, #8
 8008044:	9303      	str	r3, [sp, #12]
 8008046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008048:	444b      	add	r3, r9
 800804a:	9309      	str	r3, [sp, #36]	; 0x24
 800804c:	e76d      	b.n	8007f2a <_svfiprintf_r+0x4a>
 800804e:	fb05 3202 	mla	r2, r5, r2, r3
 8008052:	2001      	movs	r0, #1
 8008054:	460f      	mov	r7, r1
 8008056:	e7a6      	b.n	8007fa6 <_svfiprintf_r+0xc6>
 8008058:	2300      	movs	r3, #0
 800805a:	250a      	movs	r5, #10
 800805c:	4619      	mov	r1, r3
 800805e:	3701      	adds	r7, #1
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	4638      	mov	r0, r7
 8008064:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008068:	3a30      	subs	r2, #48	; 0x30
 800806a:	2a09      	cmp	r2, #9
 800806c:	d903      	bls.n	8008076 <_svfiprintf_r+0x196>
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0c8      	beq.n	8008004 <_svfiprintf_r+0x124>
 8008072:	9105      	str	r1, [sp, #20]
 8008074:	e7c6      	b.n	8008004 <_svfiprintf_r+0x124>
 8008076:	fb05 2101 	mla	r1, r5, r1, r2
 800807a:	2301      	movs	r3, #1
 800807c:	4607      	mov	r7, r0
 800807e:	e7f0      	b.n	8008062 <_svfiprintf_r+0x182>
 8008080:	ab03      	add	r3, sp, #12
 8008082:	9300      	str	r3, [sp, #0]
 8008084:	4622      	mov	r2, r4
 8008086:	4b11      	ldr	r3, [pc, #68]	; (80080cc <_svfiprintf_r+0x1ec>)
 8008088:	a904      	add	r1, sp, #16
 800808a:	4640      	mov	r0, r8
 800808c:	f3af 8000 	nop.w
 8008090:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008094:	4681      	mov	r9, r0
 8008096:	d1d6      	bne.n	8008046 <_svfiprintf_r+0x166>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	065b      	lsls	r3, r3, #25
 800809c:	f53f af35 	bmi.w	8007f0a <_svfiprintf_r+0x2a>
 80080a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080a2:	b01d      	add	sp, #116	; 0x74
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	ab03      	add	r3, sp, #12
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4622      	mov	r2, r4
 80080ae:	4b07      	ldr	r3, [pc, #28]	; (80080cc <_svfiprintf_r+0x1ec>)
 80080b0:	a904      	add	r1, sp, #16
 80080b2:	4640      	mov	r0, r8
 80080b4:	f000 f882 	bl	80081bc <_printf_i>
 80080b8:	e7ea      	b.n	8008090 <_svfiprintf_r+0x1b0>
 80080ba:	bf00      	nop
 80080bc:	080086e8 	.word	0x080086e8
 80080c0:	080086ee 	.word	0x080086ee
 80080c4:	080086f2 	.word	0x080086f2
 80080c8:	00000000 	.word	0x00000000
 80080cc:	08007e2d 	.word	0x08007e2d

080080d0 <_printf_common>:
 80080d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d4:	4691      	mov	r9, r2
 80080d6:	461f      	mov	r7, r3
 80080d8:	688a      	ldr	r2, [r1, #8]
 80080da:	690b      	ldr	r3, [r1, #16]
 80080dc:	4606      	mov	r6, r0
 80080de:	4293      	cmp	r3, r2
 80080e0:	bfb8      	it	lt
 80080e2:	4613      	movlt	r3, r2
 80080e4:	f8c9 3000 	str.w	r3, [r9]
 80080e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080ec:	460c      	mov	r4, r1
 80080ee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f2:	b112      	cbz	r2, 80080fa <_printf_common+0x2a>
 80080f4:	3301      	adds	r3, #1
 80080f6:	f8c9 3000 	str.w	r3, [r9]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	0699      	lsls	r1, r3, #26
 80080fe:	bf42      	ittt	mi
 8008100:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008104:	3302      	addmi	r3, #2
 8008106:	f8c9 3000 	strmi.w	r3, [r9]
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	f015 0506 	ands.w	r5, r5, #6
 8008110:	d107      	bne.n	8008122 <_printf_common+0x52>
 8008112:	f104 0a19 	add.w	sl, r4, #25
 8008116:	68e3      	ldr	r3, [r4, #12]
 8008118:	f8d9 2000 	ldr.w	r2, [r9]
 800811c:	1a9b      	subs	r3, r3, r2
 800811e:	42ab      	cmp	r3, r5
 8008120:	dc29      	bgt.n	8008176 <_printf_common+0xa6>
 8008122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	3300      	adds	r3, #0
 800812a:	bf18      	it	ne
 800812c:	2301      	movne	r3, #1
 800812e:	0692      	lsls	r2, r2, #26
 8008130:	d42e      	bmi.n	8008190 <_printf_common+0xc0>
 8008132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008136:	4639      	mov	r1, r7
 8008138:	4630      	mov	r0, r6
 800813a:	47c0      	blx	r8
 800813c:	3001      	adds	r0, #1
 800813e:	d021      	beq.n	8008184 <_printf_common+0xb4>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	68e5      	ldr	r5, [r4, #12]
 8008144:	f003 0306 	and.w	r3, r3, #6
 8008148:	2b04      	cmp	r3, #4
 800814a:	bf18      	it	ne
 800814c:	2500      	movne	r5, #0
 800814e:	f8d9 2000 	ldr.w	r2, [r9]
 8008152:	f04f 0900 	mov.w	r9, #0
 8008156:	bf08      	it	eq
 8008158:	1aad      	subeq	r5, r5, r2
 800815a:	68a3      	ldr	r3, [r4, #8]
 800815c:	6922      	ldr	r2, [r4, #16]
 800815e:	bf08      	it	eq
 8008160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008164:	4293      	cmp	r3, r2
 8008166:	bfc4      	itt	gt
 8008168:	1a9b      	subgt	r3, r3, r2
 800816a:	18ed      	addgt	r5, r5, r3
 800816c:	341a      	adds	r4, #26
 800816e:	454d      	cmp	r5, r9
 8008170:	d11a      	bne.n	80081a8 <_printf_common+0xd8>
 8008172:	2000      	movs	r0, #0
 8008174:	e008      	b.n	8008188 <_printf_common+0xb8>
 8008176:	2301      	movs	r3, #1
 8008178:	4652      	mov	r2, sl
 800817a:	4639      	mov	r1, r7
 800817c:	4630      	mov	r0, r6
 800817e:	47c0      	blx	r8
 8008180:	3001      	adds	r0, #1
 8008182:	d103      	bne.n	800818c <_printf_common+0xbc>
 8008184:	f04f 30ff 	mov.w	r0, #4294967295
 8008188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818c:	3501      	adds	r5, #1
 800818e:	e7c2      	b.n	8008116 <_printf_common+0x46>
 8008190:	2030      	movs	r0, #48	; 0x30
 8008192:	18e1      	adds	r1, r4, r3
 8008194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800819e:	4422      	add	r2, r4
 80081a0:	3302      	adds	r3, #2
 80081a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081a6:	e7c4      	b.n	8008132 <_printf_common+0x62>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4622      	mov	r2, r4
 80081ac:	4639      	mov	r1, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d0e6      	beq.n	8008184 <_printf_common+0xb4>
 80081b6:	f109 0901 	add.w	r9, r9, #1
 80081ba:	e7d8      	b.n	800816e <_printf_common+0x9e>

080081bc <_printf_i>:
 80081bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80081c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80081c4:	460c      	mov	r4, r1
 80081c6:	7e09      	ldrb	r1, [r1, #24]
 80081c8:	b085      	sub	sp, #20
 80081ca:	296e      	cmp	r1, #110	; 0x6e
 80081cc:	4617      	mov	r7, r2
 80081ce:	4606      	mov	r6, r0
 80081d0:	4698      	mov	r8, r3
 80081d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d4:	f000 80b3 	beq.w	800833e <_printf_i+0x182>
 80081d8:	d822      	bhi.n	8008220 <_printf_i+0x64>
 80081da:	2963      	cmp	r1, #99	; 0x63
 80081dc:	d036      	beq.n	800824c <_printf_i+0x90>
 80081de:	d80a      	bhi.n	80081f6 <_printf_i+0x3a>
 80081e0:	2900      	cmp	r1, #0
 80081e2:	f000 80b9 	beq.w	8008358 <_printf_i+0x19c>
 80081e6:	2958      	cmp	r1, #88	; 0x58
 80081e8:	f000 8083 	beq.w	80082f2 <_printf_i+0x136>
 80081ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80081f4:	e032      	b.n	800825c <_printf_i+0xa0>
 80081f6:	2964      	cmp	r1, #100	; 0x64
 80081f8:	d001      	beq.n	80081fe <_printf_i+0x42>
 80081fa:	2969      	cmp	r1, #105	; 0x69
 80081fc:	d1f6      	bne.n	80081ec <_printf_i+0x30>
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	6813      	ldr	r3, [r2, #0]
 8008202:	0605      	lsls	r5, r0, #24
 8008204:	f103 0104 	add.w	r1, r3, #4
 8008208:	d52a      	bpl.n	8008260 <_printf_i+0xa4>
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6011      	str	r1, [r2, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	da03      	bge.n	800821a <_printf_i+0x5e>
 8008212:	222d      	movs	r2, #45	; 0x2d
 8008214:	425b      	negs	r3, r3
 8008216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800821a:	486f      	ldr	r0, [pc, #444]	; (80083d8 <_printf_i+0x21c>)
 800821c:	220a      	movs	r2, #10
 800821e:	e039      	b.n	8008294 <_printf_i+0xd8>
 8008220:	2973      	cmp	r1, #115	; 0x73
 8008222:	f000 809d 	beq.w	8008360 <_printf_i+0x1a4>
 8008226:	d808      	bhi.n	800823a <_printf_i+0x7e>
 8008228:	296f      	cmp	r1, #111	; 0x6f
 800822a:	d020      	beq.n	800826e <_printf_i+0xb2>
 800822c:	2970      	cmp	r1, #112	; 0x70
 800822e:	d1dd      	bne.n	80081ec <_printf_i+0x30>
 8008230:	6823      	ldr	r3, [r4, #0]
 8008232:	f043 0320 	orr.w	r3, r3, #32
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	e003      	b.n	8008242 <_printf_i+0x86>
 800823a:	2975      	cmp	r1, #117	; 0x75
 800823c:	d017      	beq.n	800826e <_printf_i+0xb2>
 800823e:	2978      	cmp	r1, #120	; 0x78
 8008240:	d1d4      	bne.n	80081ec <_printf_i+0x30>
 8008242:	2378      	movs	r3, #120	; 0x78
 8008244:	4865      	ldr	r0, [pc, #404]	; (80083dc <_printf_i+0x220>)
 8008246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800824a:	e055      	b.n	80082f8 <_printf_i+0x13c>
 800824c:	6813      	ldr	r3, [r2, #0]
 800824e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008252:	1d19      	adds	r1, r3, #4
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6011      	str	r1, [r2, #0]
 8008258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800825c:	2301      	movs	r3, #1
 800825e:	e08c      	b.n	800837a <_printf_i+0x1be>
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008266:	6011      	str	r1, [r2, #0]
 8008268:	bf18      	it	ne
 800826a:	b21b      	sxthne	r3, r3
 800826c:	e7cf      	b.n	800820e <_printf_i+0x52>
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	6825      	ldr	r5, [r4, #0]
 8008272:	1d18      	adds	r0, r3, #4
 8008274:	6010      	str	r0, [r2, #0]
 8008276:	0628      	lsls	r0, r5, #24
 8008278:	d501      	bpl.n	800827e <_printf_i+0xc2>
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	e002      	b.n	8008284 <_printf_i+0xc8>
 800827e:	0668      	lsls	r0, r5, #25
 8008280:	d5fb      	bpl.n	800827a <_printf_i+0xbe>
 8008282:	881b      	ldrh	r3, [r3, #0]
 8008284:	296f      	cmp	r1, #111	; 0x6f
 8008286:	bf14      	ite	ne
 8008288:	220a      	movne	r2, #10
 800828a:	2208      	moveq	r2, #8
 800828c:	4852      	ldr	r0, [pc, #328]	; (80083d8 <_printf_i+0x21c>)
 800828e:	2100      	movs	r1, #0
 8008290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008294:	6865      	ldr	r5, [r4, #4]
 8008296:	2d00      	cmp	r5, #0
 8008298:	60a5      	str	r5, [r4, #8]
 800829a:	f2c0 8095 	blt.w	80083c8 <_printf_i+0x20c>
 800829e:	6821      	ldr	r1, [r4, #0]
 80082a0:	f021 0104 	bic.w	r1, r1, #4
 80082a4:	6021      	str	r1, [r4, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d13d      	bne.n	8008326 <_printf_i+0x16a>
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	f040 808e 	bne.w	80083cc <_printf_i+0x210>
 80082b0:	4665      	mov	r5, ip
 80082b2:	2a08      	cmp	r2, #8
 80082b4:	d10b      	bne.n	80082ce <_printf_i+0x112>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	07db      	lsls	r3, r3, #31
 80082ba:	d508      	bpl.n	80082ce <_printf_i+0x112>
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	6862      	ldr	r2, [r4, #4]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	bfde      	ittt	le
 80082c4:	2330      	movle	r3, #48	; 0x30
 80082c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80082ce:	ebac 0305 	sub.w	r3, ip, r5
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	f8cd 8000 	str.w	r8, [sp]
 80082d8:	463b      	mov	r3, r7
 80082da:	aa03      	add	r2, sp, #12
 80082dc:	4621      	mov	r1, r4
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff fef6 	bl	80080d0 <_printf_common>
 80082e4:	3001      	adds	r0, #1
 80082e6:	d14d      	bne.n	8008384 <_printf_i+0x1c8>
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	b005      	add	sp, #20
 80082ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f2:	4839      	ldr	r0, [pc, #228]	; (80083d8 <_printf_i+0x21c>)
 80082f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80082f8:	6813      	ldr	r3, [r2, #0]
 80082fa:	6821      	ldr	r1, [r4, #0]
 80082fc:	1d1d      	adds	r5, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6015      	str	r5, [r2, #0]
 8008302:	060a      	lsls	r2, r1, #24
 8008304:	d50b      	bpl.n	800831e <_printf_i+0x162>
 8008306:	07ca      	lsls	r2, r1, #31
 8008308:	bf44      	itt	mi
 800830a:	f041 0120 	orrmi.w	r1, r1, #32
 800830e:	6021      	strmi	r1, [r4, #0]
 8008310:	b91b      	cbnz	r3, 800831a <_printf_i+0x15e>
 8008312:	6822      	ldr	r2, [r4, #0]
 8008314:	f022 0220 	bic.w	r2, r2, #32
 8008318:	6022      	str	r2, [r4, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	e7b7      	b.n	800828e <_printf_i+0xd2>
 800831e:	064d      	lsls	r5, r1, #25
 8008320:	bf48      	it	mi
 8008322:	b29b      	uxthmi	r3, r3
 8008324:	e7ef      	b.n	8008306 <_printf_i+0x14a>
 8008326:	4665      	mov	r5, ip
 8008328:	fbb3 f1f2 	udiv	r1, r3, r2
 800832c:	fb02 3311 	mls	r3, r2, r1, r3
 8008330:	5cc3      	ldrb	r3, [r0, r3]
 8008332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008336:	460b      	mov	r3, r1
 8008338:	2900      	cmp	r1, #0
 800833a:	d1f5      	bne.n	8008328 <_printf_i+0x16c>
 800833c:	e7b9      	b.n	80082b2 <_printf_i+0xf6>
 800833e:	6813      	ldr	r3, [r2, #0]
 8008340:	6825      	ldr	r5, [r4, #0]
 8008342:	1d18      	adds	r0, r3, #4
 8008344:	6961      	ldr	r1, [r4, #20]
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	0628      	lsls	r0, r5, #24
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	d501      	bpl.n	8008352 <_printf_i+0x196>
 800834e:	6019      	str	r1, [r3, #0]
 8008350:	e002      	b.n	8008358 <_printf_i+0x19c>
 8008352:	066a      	lsls	r2, r5, #25
 8008354:	d5fb      	bpl.n	800834e <_printf_i+0x192>
 8008356:	8019      	strh	r1, [r3, #0]
 8008358:	2300      	movs	r3, #0
 800835a:	4665      	mov	r5, ip
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	e7b9      	b.n	80082d4 <_printf_i+0x118>
 8008360:	6813      	ldr	r3, [r2, #0]
 8008362:	1d19      	adds	r1, r3, #4
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	681d      	ldr	r5, [r3, #0]
 8008368:	6862      	ldr	r2, [r4, #4]
 800836a:	2100      	movs	r1, #0
 800836c:	4628      	mov	r0, r5
 800836e:	f000 f837 	bl	80083e0 <memchr>
 8008372:	b108      	cbz	r0, 8008378 <_printf_i+0x1bc>
 8008374:	1b40      	subs	r0, r0, r5
 8008376:	6060      	str	r0, [r4, #4]
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	6123      	str	r3, [r4, #16]
 800837c:	2300      	movs	r3, #0
 800837e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008382:	e7a7      	b.n	80082d4 <_printf_i+0x118>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	462a      	mov	r2, r5
 8008388:	4639      	mov	r1, r7
 800838a:	4630      	mov	r0, r6
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d0aa      	beq.n	80082e8 <_printf_i+0x12c>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	079b      	lsls	r3, r3, #30
 8008396:	d413      	bmi.n	80083c0 <_printf_i+0x204>
 8008398:	68e0      	ldr	r0, [r4, #12]
 800839a:	9b03      	ldr	r3, [sp, #12]
 800839c:	4298      	cmp	r0, r3
 800839e:	bfb8      	it	lt
 80083a0:	4618      	movlt	r0, r3
 80083a2:	e7a3      	b.n	80082ec <_printf_i+0x130>
 80083a4:	2301      	movs	r3, #1
 80083a6:	464a      	mov	r2, r9
 80083a8:	4639      	mov	r1, r7
 80083aa:	4630      	mov	r0, r6
 80083ac:	47c0      	blx	r8
 80083ae:	3001      	adds	r0, #1
 80083b0:	d09a      	beq.n	80082e8 <_printf_i+0x12c>
 80083b2:	3501      	adds	r5, #1
 80083b4:	68e3      	ldr	r3, [r4, #12]
 80083b6:	9a03      	ldr	r2, [sp, #12]
 80083b8:	1a9b      	subs	r3, r3, r2
 80083ba:	42ab      	cmp	r3, r5
 80083bc:	dcf2      	bgt.n	80083a4 <_printf_i+0x1e8>
 80083be:	e7eb      	b.n	8008398 <_printf_i+0x1dc>
 80083c0:	2500      	movs	r5, #0
 80083c2:	f104 0919 	add.w	r9, r4, #25
 80083c6:	e7f5      	b.n	80083b4 <_printf_i+0x1f8>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1ac      	bne.n	8008326 <_printf_i+0x16a>
 80083cc:	7803      	ldrb	r3, [r0, #0]
 80083ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083d6:	e76c      	b.n	80082b2 <_printf_i+0xf6>
 80083d8:	080086f9 	.word	0x080086f9
 80083dc:	0800870a 	.word	0x0800870a

080083e0 <memchr>:
 80083e0:	b510      	push	{r4, lr}
 80083e2:	b2c9      	uxtb	r1, r1
 80083e4:	4402      	add	r2, r0
 80083e6:	4290      	cmp	r0, r2
 80083e8:	4603      	mov	r3, r0
 80083ea:	d101      	bne.n	80083f0 <memchr+0x10>
 80083ec:	2300      	movs	r3, #0
 80083ee:	e003      	b.n	80083f8 <memchr+0x18>
 80083f0:	781c      	ldrb	r4, [r3, #0]
 80083f2:	3001      	adds	r0, #1
 80083f4:	428c      	cmp	r4, r1
 80083f6:	d1f6      	bne.n	80083e6 <memchr+0x6>
 80083f8:	4618      	mov	r0, r3
 80083fa:	bd10      	pop	{r4, pc}

080083fc <memcpy>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	1e43      	subs	r3, r0, #1
 8008400:	440a      	add	r2, r1
 8008402:	4291      	cmp	r1, r2
 8008404:	d100      	bne.n	8008408 <memcpy+0xc>
 8008406:	bd10      	pop	{r4, pc}
 8008408:	f811 4b01 	ldrb.w	r4, [r1], #1
 800840c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008410:	e7f7      	b.n	8008402 <memcpy+0x6>

08008412 <memmove>:
 8008412:	4288      	cmp	r0, r1
 8008414:	b510      	push	{r4, lr}
 8008416:	eb01 0302 	add.w	r3, r1, r2
 800841a:	d807      	bhi.n	800842c <memmove+0x1a>
 800841c:	1e42      	subs	r2, r0, #1
 800841e:	4299      	cmp	r1, r3
 8008420:	d00a      	beq.n	8008438 <memmove+0x26>
 8008422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008426:	f802 4f01 	strb.w	r4, [r2, #1]!
 800842a:	e7f8      	b.n	800841e <memmove+0xc>
 800842c:	4283      	cmp	r3, r0
 800842e:	d9f5      	bls.n	800841c <memmove+0xa>
 8008430:	1881      	adds	r1, r0, r2
 8008432:	1ad2      	subs	r2, r2, r3
 8008434:	42d3      	cmn	r3, r2
 8008436:	d100      	bne.n	800843a <memmove+0x28>
 8008438:	bd10      	pop	{r4, pc}
 800843a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800843e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008442:	e7f7      	b.n	8008434 <memmove+0x22>

08008444 <_free_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4605      	mov	r5, r0
 8008448:	2900      	cmp	r1, #0
 800844a:	d043      	beq.n	80084d4 <_free_r+0x90>
 800844c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008450:	1f0c      	subs	r4, r1, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	bfb8      	it	lt
 8008456:	18e4      	addlt	r4, r4, r3
 8008458:	f000 f8d0 	bl	80085fc <__malloc_lock>
 800845c:	4a1e      	ldr	r2, [pc, #120]	; (80084d8 <_free_r+0x94>)
 800845e:	6813      	ldr	r3, [r2, #0]
 8008460:	4610      	mov	r0, r2
 8008462:	b933      	cbnz	r3, 8008472 <_free_r+0x2e>
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	6014      	str	r4, [r2, #0]
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800846e:	f000 b8c6 	b.w	80085fe <__malloc_unlock>
 8008472:	42a3      	cmp	r3, r4
 8008474:	d90b      	bls.n	800848e <_free_r+0x4a>
 8008476:	6821      	ldr	r1, [r4, #0]
 8008478:	1862      	adds	r2, r4, r1
 800847a:	4293      	cmp	r3, r2
 800847c:	bf01      	itttt	eq
 800847e:	681a      	ldreq	r2, [r3, #0]
 8008480:	685b      	ldreq	r3, [r3, #4]
 8008482:	1852      	addeq	r2, r2, r1
 8008484:	6022      	streq	r2, [r4, #0]
 8008486:	6063      	str	r3, [r4, #4]
 8008488:	6004      	str	r4, [r0, #0]
 800848a:	e7ed      	b.n	8008468 <_free_r+0x24>
 800848c:	4613      	mov	r3, r2
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	b10a      	cbz	r2, 8008496 <_free_r+0x52>
 8008492:	42a2      	cmp	r2, r4
 8008494:	d9fa      	bls.n	800848c <_free_r+0x48>
 8008496:	6819      	ldr	r1, [r3, #0]
 8008498:	1858      	adds	r0, r3, r1
 800849a:	42a0      	cmp	r0, r4
 800849c:	d10b      	bne.n	80084b6 <_free_r+0x72>
 800849e:	6820      	ldr	r0, [r4, #0]
 80084a0:	4401      	add	r1, r0
 80084a2:	1858      	adds	r0, r3, r1
 80084a4:	4282      	cmp	r2, r0
 80084a6:	6019      	str	r1, [r3, #0]
 80084a8:	d1de      	bne.n	8008468 <_free_r+0x24>
 80084aa:	6810      	ldr	r0, [r2, #0]
 80084ac:	6852      	ldr	r2, [r2, #4]
 80084ae:	4401      	add	r1, r0
 80084b0:	6019      	str	r1, [r3, #0]
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	e7d8      	b.n	8008468 <_free_r+0x24>
 80084b6:	d902      	bls.n	80084be <_free_r+0x7a>
 80084b8:	230c      	movs	r3, #12
 80084ba:	602b      	str	r3, [r5, #0]
 80084bc:	e7d4      	b.n	8008468 <_free_r+0x24>
 80084be:	6820      	ldr	r0, [r4, #0]
 80084c0:	1821      	adds	r1, r4, r0
 80084c2:	428a      	cmp	r2, r1
 80084c4:	bf01      	itttt	eq
 80084c6:	6811      	ldreq	r1, [r2, #0]
 80084c8:	6852      	ldreq	r2, [r2, #4]
 80084ca:	1809      	addeq	r1, r1, r0
 80084cc:	6021      	streq	r1, [r4, #0]
 80084ce:	6062      	str	r2, [r4, #4]
 80084d0:	605c      	str	r4, [r3, #4]
 80084d2:	e7c9      	b.n	8008468 <_free_r+0x24>
 80084d4:	bd38      	pop	{r3, r4, r5, pc}
 80084d6:	bf00      	nop
 80084d8:	20000424 	.word	0x20000424

080084dc <_malloc_r>:
 80084dc:	b570      	push	{r4, r5, r6, lr}
 80084de:	1ccd      	adds	r5, r1, #3
 80084e0:	f025 0503 	bic.w	r5, r5, #3
 80084e4:	3508      	adds	r5, #8
 80084e6:	2d0c      	cmp	r5, #12
 80084e8:	bf38      	it	cc
 80084ea:	250c      	movcc	r5, #12
 80084ec:	2d00      	cmp	r5, #0
 80084ee:	4606      	mov	r6, r0
 80084f0:	db01      	blt.n	80084f6 <_malloc_r+0x1a>
 80084f2:	42a9      	cmp	r1, r5
 80084f4:	d903      	bls.n	80084fe <_malloc_r+0x22>
 80084f6:	230c      	movs	r3, #12
 80084f8:	6033      	str	r3, [r6, #0]
 80084fa:	2000      	movs	r0, #0
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	f000 f87d 	bl	80085fc <__malloc_lock>
 8008502:	4a21      	ldr	r2, [pc, #132]	; (8008588 <_malloc_r+0xac>)
 8008504:	6814      	ldr	r4, [r2, #0]
 8008506:	4621      	mov	r1, r4
 8008508:	b991      	cbnz	r1, 8008530 <_malloc_r+0x54>
 800850a:	4c20      	ldr	r4, [pc, #128]	; (800858c <_malloc_r+0xb0>)
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	b91b      	cbnz	r3, 8008518 <_malloc_r+0x3c>
 8008510:	4630      	mov	r0, r6
 8008512:	f000 f863 	bl	80085dc <_sbrk_r>
 8008516:	6020      	str	r0, [r4, #0]
 8008518:	4629      	mov	r1, r5
 800851a:	4630      	mov	r0, r6
 800851c:	f000 f85e 	bl	80085dc <_sbrk_r>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d124      	bne.n	800856e <_malloc_r+0x92>
 8008524:	230c      	movs	r3, #12
 8008526:	4630      	mov	r0, r6
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	f000 f868 	bl	80085fe <__malloc_unlock>
 800852e:	e7e4      	b.n	80084fa <_malloc_r+0x1e>
 8008530:	680b      	ldr	r3, [r1, #0]
 8008532:	1b5b      	subs	r3, r3, r5
 8008534:	d418      	bmi.n	8008568 <_malloc_r+0x8c>
 8008536:	2b0b      	cmp	r3, #11
 8008538:	d90f      	bls.n	800855a <_malloc_r+0x7e>
 800853a:	600b      	str	r3, [r1, #0]
 800853c:	18cc      	adds	r4, r1, r3
 800853e:	50cd      	str	r5, [r1, r3]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f85c 	bl	80085fe <__malloc_unlock>
 8008546:	f104 000b 	add.w	r0, r4, #11
 800854a:	1d23      	adds	r3, r4, #4
 800854c:	f020 0007 	bic.w	r0, r0, #7
 8008550:	1ac3      	subs	r3, r0, r3
 8008552:	d0d3      	beq.n	80084fc <_malloc_r+0x20>
 8008554:	425a      	negs	r2, r3
 8008556:	50e2      	str	r2, [r4, r3]
 8008558:	e7d0      	b.n	80084fc <_malloc_r+0x20>
 800855a:	684b      	ldr	r3, [r1, #4]
 800855c:	428c      	cmp	r4, r1
 800855e:	bf16      	itet	ne
 8008560:	6063      	strne	r3, [r4, #4]
 8008562:	6013      	streq	r3, [r2, #0]
 8008564:	460c      	movne	r4, r1
 8008566:	e7eb      	b.n	8008540 <_malloc_r+0x64>
 8008568:	460c      	mov	r4, r1
 800856a:	6849      	ldr	r1, [r1, #4]
 800856c:	e7cc      	b.n	8008508 <_malloc_r+0x2c>
 800856e:	1cc4      	adds	r4, r0, #3
 8008570:	f024 0403 	bic.w	r4, r4, #3
 8008574:	42a0      	cmp	r0, r4
 8008576:	d005      	beq.n	8008584 <_malloc_r+0xa8>
 8008578:	1a21      	subs	r1, r4, r0
 800857a:	4630      	mov	r0, r6
 800857c:	f000 f82e 	bl	80085dc <_sbrk_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d0cf      	beq.n	8008524 <_malloc_r+0x48>
 8008584:	6025      	str	r5, [r4, #0]
 8008586:	e7db      	b.n	8008540 <_malloc_r+0x64>
 8008588:	20000424 	.word	0x20000424
 800858c:	20000428 	.word	0x20000428

08008590 <_realloc_r>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	4607      	mov	r7, r0
 8008594:	4614      	mov	r4, r2
 8008596:	460e      	mov	r6, r1
 8008598:	b921      	cbnz	r1, 80085a4 <_realloc_r+0x14>
 800859a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800859e:	4611      	mov	r1, r2
 80085a0:	f7ff bf9c 	b.w	80084dc <_malloc_r>
 80085a4:	b922      	cbnz	r2, 80085b0 <_realloc_r+0x20>
 80085a6:	f7ff ff4d 	bl	8008444 <_free_r>
 80085aa:	4625      	mov	r5, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085b0:	f000 f826 	bl	8008600 <_malloc_usable_size_r>
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d20f      	bcs.n	80085d8 <_realloc_r+0x48>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ff8e 	bl	80084dc <_malloc_r>
 80085c0:	4605      	mov	r5, r0
 80085c2:	2800      	cmp	r0, #0
 80085c4:	d0f2      	beq.n	80085ac <_realloc_r+0x1c>
 80085c6:	4631      	mov	r1, r6
 80085c8:	4622      	mov	r2, r4
 80085ca:	f7ff ff17 	bl	80083fc <memcpy>
 80085ce:	4631      	mov	r1, r6
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ff37 	bl	8008444 <_free_r>
 80085d6:	e7e9      	b.n	80085ac <_realloc_r+0x1c>
 80085d8:	4635      	mov	r5, r6
 80085da:	e7e7      	b.n	80085ac <_realloc_r+0x1c>

080085dc <_sbrk_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	2300      	movs	r3, #0
 80085e0:	4c05      	ldr	r4, [pc, #20]	; (80085f8 <_sbrk_r+0x1c>)
 80085e2:	4605      	mov	r5, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	f7f8 f9f4 	bl	80009d4 <_sbrk>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_sbrk_r+0x1a>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_sbrk_r+0x1a>
 80085f4:	602b      	str	r3, [r5, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20001490 	.word	0x20001490

080085fc <__malloc_lock>:
 80085fc:	4770      	bx	lr

080085fe <__malloc_unlock>:
 80085fe:	4770      	bx	lr

08008600 <_malloc_usable_size_r>:
 8008600:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008604:	1f18      	subs	r0, r3, #4
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfbc      	itt	lt
 800860a:	580b      	ldrlt	r3, [r1, r0]
 800860c:	18c0      	addlt	r0, r0, r3
 800860e:	4770      	bx	lr

08008610 <_init>:
 8008610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008612:	bf00      	nop
 8008614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008616:	bc08      	pop	{r3}
 8008618:	469e      	mov	lr, r3
 800861a:	4770      	bx	lr

0800861c <_fini>:
 800861c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800861e:	bf00      	nop
 8008620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008622:	bc08      	pop	{r3}
 8008624:	469e      	mov	lr, r3
 8008626:	4770      	bx	lr
