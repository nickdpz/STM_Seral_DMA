
USB_Prueb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008634  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08008740  08008740  00018740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008874  08008874  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008874  08008874  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008874  08008874  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008874  08008874  00018874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008878  08008878  00018878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800887c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b8  200001e0  08008a5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  08008a5c  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017aa0  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000325c  00000000  00000000  00037ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003af08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003c178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000177b3  00000000  00000000  0003d280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001018f  00000000  00000000  00054a33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000774ab  00000000  00000000  00064bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dc06d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  000dc0e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008728 	.word	0x08008728

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08008728 	.word	0x08008728

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd51 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f979 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fb1d 	bl	8000798 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f007 fa11 	bl	8007584 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000162:	f000 fa09 	bl	8000578 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000166:	f000 fa7d 	bl	8000664 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016a:	f000 fac7 	bl	80006fc <MX_TIM4_Init>
  MX_I2C2_Init();
 800016e:	f000 f9d5 	bl	800051c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000172:	f000 f9c6 	bl	8000502 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_Delay(100);
 8000176:	2064      	movs	r0, #100	; 0x64
 8000178:	f000 fda0 	bl	8000cbc <HAL_Delay>
	  	CDC_tx_size=sprintf(CDC_tx_buff,"Inciando:\r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800017c:	4aa2      	ldr	r2, [pc, #648]	; (8000408 <main+0x2bc>)
 800017e:	4ba3      	ldr	r3, [pc, #652]	; (800040c <main+0x2c0>)
 8000180:	4614      	mov	r4, r2
 8000182:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000184:	6020      	str	r0, [r4, #0]
 8000186:	6061      	str	r1, [r4, #4]
 8000188:	60a2      	str	r2, [r4, #8]
 800018a:	230b      	movs	r3, #11
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4ba0      	ldr	r3, [pc, #640]	; (8000410 <main+0x2c4>)
 8000190:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000192:	4b9f      	ldr	r3, [pc, #636]	; (8000410 <main+0x2c4>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	b29b      	uxth	r3, r3
 8000198:	4619      	mov	r1, r3
 800019a:	489b      	ldr	r0, [pc, #620]	; (8000408 <main+0x2bc>)
 800019c:	f007 fab6 	bl	800770c <CDC_Transmit_FS>
	  	result = HAL_I2C_IsDeviceReady(&hi2c2,ADDR_DIS_1<<1,1,1);
 80001a0:	2301      	movs	r3, #1
 80001a2:	2201      	movs	r2, #1
 80001a4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80001a8:	489a      	ldr	r0, [pc, #616]	; (8000414 <main+0x2c8>)
 80001aa:	f001 feb3 	bl	8001f14 <HAL_I2C_IsDeviceReady>
 80001ae:	4603      	mov	r3, r0
 80001b0:	461a      	mov	r2, r3
 80001b2:	4b99      	ldr	r3, [pc, #612]	; (8000418 <main+0x2cc>)
 80001b4:	601a      	str	r2, [r3, #0]
		if (result!= HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001b6:	4b98      	ldr	r3, [pc, #608]	; (8000418 <main+0x2cc>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d023      	beq.n	8000206 <main+0xba>
		{
			CDC_tx_size=sprintf(CDC_tx_buff,"Sensor de distancia no responde \r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80001be:	4b92      	ldr	r3, [pc, #584]	; (8000408 <main+0x2bc>)
 80001c0:	4a96      	ldr	r2, [pc, #600]	; (800041c <main+0x2d0>)
 80001c2:	4614      	mov	r4, r2
 80001c4:	469c      	mov	ip, r3
 80001c6:	f104 0e20 	add.w	lr, r4, #32
 80001ca:	4665      	mov	r5, ip
 80001cc:	4626      	mov	r6, r4
 80001ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80001d0:	6028      	str	r0, [r5, #0]
 80001d2:	6069      	str	r1, [r5, #4]
 80001d4:	60aa      	str	r2, [r5, #8]
 80001d6:	60eb      	str	r3, [r5, #12]
 80001d8:	3410      	adds	r4, #16
 80001da:	f10c 0c10 	add.w	ip, ip, #16
 80001de:	4574      	cmp	r4, lr
 80001e0:	d1f3      	bne.n	80001ca <main+0x7e>
 80001e2:	4663      	mov	r3, ip
 80001e4:	4622      	mov	r2, r4
 80001e6:	8811      	ldrh	r1, [r2, #0]
 80001e8:	7892      	ldrb	r2, [r2, #2]
 80001ea:	8019      	strh	r1, [r3, #0]
 80001ec:	709a      	strb	r2, [r3, #2]
 80001ee:	2322      	movs	r3, #34	; 0x22
 80001f0:	b2da      	uxtb	r2, r3
 80001f2:	4b87      	ldr	r3, [pc, #540]	; (8000410 <main+0x2c4>)
 80001f4:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80001f6:	4b86      	ldr	r3, [pc, #536]	; (8000410 <main+0x2c4>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	b29b      	uxth	r3, r3
 80001fc:	4619      	mov	r1, r3
 80001fe:	4882      	ldr	r0, [pc, #520]	; (8000408 <main+0x2bc>)
 8000200:	f007 fa84 	bl	800770c <CDC_Transmit_FS>
 8000204:	e0b0      	b.n	8000368 <main+0x21c>
		}else{
			data_tx_i2c=SHIFT_ADDR;
 8000206:	4b86      	ldr	r3, [pc, #536]	; (8000420 <main+0x2d4>)
 8000208:	2235      	movs	r2, #53	; 0x35
 800020a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_DIS_1<<1, &data_tx_i2c, 1, 5000);
 800020c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	4a82      	ldr	r2, [pc, #520]	; (8000420 <main+0x2d4>)
 8000216:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800021a:	487e      	ldr	r0, [pc, #504]	; (8000414 <main+0x2c8>)
 800021c:	f001 f918 	bl	8001450 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_DIS_1<<1,&data, 1, 5000);
 8000220:	f241 3388 	movw	r3, #5000	; 0x1388
 8000224:	9300      	str	r3, [sp, #0]
 8000226:	2301      	movs	r3, #1
 8000228:	4a7e      	ldr	r2, [pc, #504]	; (8000424 <main+0x2d8>)
 800022a:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800022e:	4879      	ldr	r0, [pc, #484]	; (8000414 <main+0x2c8>)
 8000230:	f001 fa0c 	bl	800164c <HAL_I2C_Master_Receive>
			CDC_tx_size=sprintf(CDC_tx_buff,"Shift %X\n\r",data);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 8000234:	4b7b      	ldr	r3, [pc, #492]	; (8000424 <main+0x2d8>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	461a      	mov	r2, r3
 800023a:	497b      	ldr	r1, [pc, #492]	; (8000428 <main+0x2dc>)
 800023c:	4872      	ldr	r0, [pc, #456]	; (8000408 <main+0x2bc>)
 800023e:	f007 fe61 	bl	8007f04 <siprintf>
 8000242:	4603      	mov	r3, r0
 8000244:	b2da      	uxtb	r2, r3
 8000246:	4b72      	ldr	r3, [pc, #456]	; (8000410 <main+0x2c4>)
 8000248:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 800024a:	4b71      	ldr	r3, [pc, #452]	; (8000410 <main+0x2c4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b29b      	uxth	r3, r3
 8000250:	4619      	mov	r1, r3
 8000252:	486d      	ldr	r0, [pc, #436]	; (8000408 <main+0x2bc>)
 8000254:	f007 fa5a 	bl	800770c <CDC_Transmit_FS>
			data_tx_i2c=DISTANCE_ADDR1;
 8000258:	4b71      	ldr	r3, [pc, #452]	; (8000420 <main+0x2d4>)
 800025a:	225e      	movs	r2, #94	; 0x5e
 800025c:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_DIS_1<<1, &data_tx_i2c, 1, 5000);
 800025e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2301      	movs	r3, #1
 8000266:	4a6e      	ldr	r2, [pc, #440]	; (8000420 <main+0x2d4>)
 8000268:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800026c:	4869      	ldr	r0, [pc, #420]	; (8000414 <main+0x2c8>)
 800026e:	f001 f8ef 	bl	8001450 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_DIS_1<<1,&datai2c[0], 1, 5000);
 8000272:	f241 3388 	movw	r3, #5000	; 0x1388
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2301      	movs	r3, #1
 800027a:	4a6c      	ldr	r2, [pc, #432]	; (800042c <main+0x2e0>)
 800027c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000280:	4864      	ldr	r0, [pc, #400]	; (8000414 <main+0x2c8>)
 8000282:	f001 f9e3 	bl	800164c <HAL_I2C_Master_Receive>
			data_tx_i2c=DISTANCE_ADDR2;
 8000286:	4b66      	ldr	r3, [pc, #408]	; (8000420 <main+0x2d4>)
 8000288:	225f      	movs	r2, #95	; 0x5f
 800028a:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_DIS_1<<1, &data_tx_i2c, 1, 5000);
 800028c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2301      	movs	r3, #1
 8000294:	4a62      	ldr	r2, [pc, #392]	; (8000420 <main+0x2d4>)
 8000296:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800029a:	485e      	ldr	r0, [pc, #376]	; (8000414 <main+0x2c8>)
 800029c:	f001 f8d8 	bl	8001450 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_DIS_1<<1,&datai2c[1], 1, 5000);
 80002a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2301      	movs	r3, #1
 80002a8:	4a61      	ldr	r2, [pc, #388]	; (8000430 <main+0x2e4>)
 80002aa:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80002ae:	4859      	ldr	r0, [pc, #356]	; (8000414 <main+0x2c8>)
 80002b0:	f001 f9cc 	bl	800164c <HAL_I2C_Master_Receive>
			distance_cm = (datai2c[0]*16+datai2c[1])/64;//calculo de distancia
 80002b4:	4b5d      	ldr	r3, [pc, #372]	; (800042c <main+0x2e0>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	011b      	lsls	r3, r3, #4
 80002ba:	4a5c      	ldr	r2, [pc, #368]	; (800042c <main+0x2e0>)
 80002bc:	7852      	ldrb	r2, [r2, #1]
 80002be:	4413      	add	r3, r2
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	da00      	bge.n	80002c6 <main+0x17a>
 80002c4:	333f      	adds	r3, #63	; 0x3f
 80002c6:	119b      	asrs	r3, r3, #6
 80002c8:	b2da      	uxtb	r2, r3
 80002ca:	4b5a      	ldr	r3, [pc, #360]	; (8000434 <main+0x2e8>)
 80002cc:	701a      	strb	r2, [r3, #0]
			CDC_tx_size=sprintf(CDC_tx_buff,"distancia %i\n\r",distance_cm);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80002ce:	4b59      	ldr	r3, [pc, #356]	; (8000434 <main+0x2e8>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	461a      	mov	r2, r3
 80002d4:	4958      	ldr	r1, [pc, #352]	; (8000438 <main+0x2ec>)
 80002d6:	484c      	ldr	r0, [pc, #304]	; (8000408 <main+0x2bc>)
 80002d8:	f007 fe14 	bl	8007f04 <siprintf>
 80002dc:	4603      	mov	r3, r0
 80002de:	b2da      	uxtb	r2, r3
 80002e0:	4b4b      	ldr	r3, [pc, #300]	; (8000410 <main+0x2c4>)
 80002e2:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80002e4:	4b4a      	ldr	r3, [pc, #296]	; (8000410 <main+0x2c4>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	4619      	mov	r1, r3
 80002ec:	4846      	ldr	r0, [pc, #280]	; (8000408 <main+0x2bc>)
 80002ee:	f007 fa0d 	bl	800770c <CDC_Transmit_FS>
			result=HAL_I2C_Mem_Read(&hi2c2,ADDR_DIS_1<<1,SHIFT_ADDR,I2C_MEMADD_SIZE_8BIT,&data,1,5000);
 80002f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80002f6:	9302      	str	r3, [sp, #8]
 80002f8:	2301      	movs	r3, #1
 80002fa:	9301      	str	r3, [sp, #4]
 80002fc:	4b49      	ldr	r3, [pc, #292]	; (8000424 <main+0x2d8>)
 80002fe:	9300      	str	r3, [sp, #0]
 8000300:	2301      	movs	r3, #1
 8000302:	2235      	movs	r2, #53	; 0x35
 8000304:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8000308:	4842      	ldr	r0, [pc, #264]	; (8000414 <main+0x2c8>)
 800030a:	f001 fbcd 	bl	8001aa8 <HAL_I2C_Mem_Read>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b41      	ldr	r3, [pc, #260]	; (8000418 <main+0x2cc>)
 8000314:	601a      	str	r2, [r3, #0]
			if(result!=HAL_OK){
 8000316:	4b40      	ldr	r3, [pc, #256]	; (8000418 <main+0x2cc>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d012      	beq.n	8000344 <main+0x1f8>
				CDC_tx_size=sprintf(CDC_tx_buff,"Paila %d\n\r",result);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 800031e:	4b3e      	ldr	r3, [pc, #248]	; (8000418 <main+0x2cc>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	461a      	mov	r2, r3
 8000324:	4945      	ldr	r1, [pc, #276]	; (800043c <main+0x2f0>)
 8000326:	4838      	ldr	r0, [pc, #224]	; (8000408 <main+0x2bc>)
 8000328:	f007 fdec 	bl	8007f04 <siprintf>
 800032c:	4603      	mov	r3, r0
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b37      	ldr	r3, [pc, #220]	; (8000410 <main+0x2c4>)
 8000332:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000334:	4b36      	ldr	r3, [pc, #216]	; (8000410 <main+0x2c4>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4619      	mov	r1, r3
 800033c:	4832      	ldr	r0, [pc, #200]	; (8000408 <main+0x2bc>)
 800033e:	f007 f9e5 	bl	800770c <CDC_Transmit_FS>
 8000342:	e011      	b.n	8000368 <main+0x21c>
			}else{
				CDC_tx_size=sprintf(CDC_tx_buff,"Shift Memoria %X\n\r",data);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 8000344:	4b37      	ldr	r3, [pc, #220]	; (8000424 <main+0x2d8>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	461a      	mov	r2, r3
 800034a:	493d      	ldr	r1, [pc, #244]	; (8000440 <main+0x2f4>)
 800034c:	482e      	ldr	r0, [pc, #184]	; (8000408 <main+0x2bc>)
 800034e:	f007 fdd9 	bl	8007f04 <siprintf>
 8000352:	4603      	mov	r3, r0
 8000354:	b2da      	uxtb	r2, r3
 8000356:	4b2e      	ldr	r3, [pc, #184]	; (8000410 <main+0x2c4>)
 8000358:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 800035a:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <main+0x2c4>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4619      	mov	r1, r3
 8000362:	4829      	ldr	r0, [pc, #164]	; (8000408 <main+0x2bc>)
 8000364:	f007 f9d2 	bl	800770c <CDC_Transmit_FS>
			}
		}
		//MPU
		result=HAL_I2C_IsDeviceReady(&hi2c2,ADDR_MPU<<1,1,1);
 8000368:	2301      	movs	r3, #1
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8000370:	4828      	ldr	r0, [pc, #160]	; (8000414 <main+0x2c8>)
 8000372:	f001 fdcf 	bl	8001f14 <HAL_I2C_IsDeviceReady>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b27      	ldr	r3, [pc, #156]	; (8000418 <main+0x2cc>)
 800037c:	601a      	str	r2, [r3, #0]
		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <main+0x2cc>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d016      	beq.n	80003b4 <main+0x268>
		{
			CDC_tx_size=sprintf(CDC_tx_buff,"MPU no responde\r\n");//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 8000386:	4a20      	ldr	r2, [pc, #128]	; (8000408 <main+0x2bc>)
 8000388:	4b2e      	ldr	r3, [pc, #184]	; (8000444 <main+0x2f8>)
 800038a:	4615      	mov	r5, r2
 800038c:	461c      	mov	r4, r3
 800038e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000390:	6028      	str	r0, [r5, #0]
 8000392:	6069      	str	r1, [r5, #4]
 8000394:	60aa      	str	r2, [r5, #8]
 8000396:	60eb      	str	r3, [r5, #12]
 8000398:	8823      	ldrh	r3, [r4, #0]
 800039a:	822b      	strh	r3, [r5, #16]
 800039c:	2311      	movs	r3, #17
 800039e:	b2da      	uxtb	r2, r3
 80003a0:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <main+0x2c4>)
 80003a2:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80003a4:	4b1a      	ldr	r3, [pc, #104]	; (8000410 <main+0x2c4>)
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	4816      	ldr	r0, [pc, #88]	; (8000408 <main+0x2bc>)
 80003ae:	f007 f9ad 	bl	800770c <CDC_Transmit_FS>
 80003b2:	e6e0      	b.n	8000176 <main+0x2a>
		}else{
			data_tx_i2c=ACCEL_XOUT_H;
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <main+0x2d4>)
 80003b6:	223b      	movs	r2, #59	; 0x3b
 80003b8:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Master_Transmit(&hi2c2,ADDR_MPU<<1,&data_tx_i2c, 1, 5000);
 80003ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80003be:	9300      	str	r3, [sp, #0]
 80003c0:	2301      	movs	r3, #1
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <main+0x2d4>)
 80003c4:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80003c8:	4812      	ldr	r0, [pc, #72]	; (8000414 <main+0x2c8>)
 80003ca:	f001 f841 	bl	8001450 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c2,ADDR_MPU<<1,&datai2c[0], 1, 5000);
 80003ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80003d2:	9300      	str	r3, [sp, #0]
 80003d4:	2301      	movs	r3, #1
 80003d6:	4a15      	ldr	r2, [pc, #84]	; (800042c <main+0x2e0>)
 80003d8:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80003dc:	480d      	ldr	r0, [pc, #52]	; (8000414 <main+0x2c8>)
 80003de:	f001 f935 	bl	800164c <HAL_I2C_Master_Receive>
			CDC_tx_size=sprintf(CDC_tx_buff,"mpu %X\n\r",datai2c[0]);//Guarda en la variable CDC_tx_buff el string y el tamaño del string queda en CDC_size_buff
 80003e2:	4b12      	ldr	r3, [pc, #72]	; (800042c <main+0x2e0>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4917      	ldr	r1, [pc, #92]	; (8000448 <main+0x2fc>)
 80003ea:	4807      	ldr	r0, [pc, #28]	; (8000408 <main+0x2bc>)
 80003ec:	f007 fd8a 	bl	8007f04 <siprintf>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <main+0x2c4>)
 80003f6:	701a      	strb	r2, [r3, #0]
			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <main+0x2c4>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	4619      	mov	r1, r3
 8000400:	4801      	ldr	r0, [pc, #4]	; (8000408 <main+0x2bc>)
 8000402:	f007 f983 	bl	800770c <CDC_Transmit_FS>
		HAL_Delay(100);
 8000406:	e6b6      	b.n	8000176 <main+0x2a>
 8000408:	200004c4 	.word	0x200004c4
 800040c:	08008740 	.word	0x08008740
 8000410:	20000540 	.word	0x20000540
 8000414:	20000470 	.word	0x20000470
 8000418:	20000548 	.word	0x20000548
 800041c:	0800874c 	.word	0x0800874c
 8000420:	20000541 	.word	0x20000541
 8000424:	20000542 	.word	0x20000542
 8000428:	08008770 	.word	0x08008770
 800042c:	20000544 	.word	0x20000544
 8000430:	20000545 	.word	0x20000545
 8000434:	2000058c 	.word	0x2000058c
 8000438:	0800877c 	.word	0x0800877c
 800043c:	0800878c 	.word	0x0800878c
 8000440:	08008798 	.word	0x08008798
 8000444:	080087ac 	.word	0x080087ac
 8000448:	080087c0 	.word	0x080087c0

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b094      	sub	sp, #80	; 0x50
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000456:	2228      	movs	r2, #40	; 0x28
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f007 fd4a 	bl	8007ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	f107 0314 	add.w	r3, r7, #20
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
 800046e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800047c:	2301      	movs	r3, #1
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000480:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000484:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048a:	2301      	movs	r3, #1
 800048c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048e:	2302      	movs	r3, #2
 8000490:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000492:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000496:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000498:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800049c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 f912 	bl	80036cc <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80004ae:	f000 f9cb 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2302      	movs	r3, #2
 80004b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2101      	movs	r1, #1
 80004ce:	4618      	mov	r0, r3
 80004d0:	f003 fb7c 	bl	8003bcc <HAL_RCC_ClockConfig>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004da:	f000 f9b5 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004de:	2310      	movs	r3, #16
 80004e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004e6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	4618      	mov	r0, r3
 80004ec:	f003 fcf6 	bl	8003edc <HAL_RCCEx_PeriphCLKConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004f6:	f000 f9a7 	bl	8000848 <Error_Handler>
  }
}
 80004fa:	bf00      	nop
 80004fc:	3750      	adds	r7, #80	; 0x50
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}

08000502 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	2100      	movs	r1, #0
 800050a:	2014      	movs	r0, #20
 800050c:	f000 fccf 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000510:	2014      	movs	r0, #20
 8000512:	f000 fce8 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <MX_I2C2_Init+0x50>)
 8000522:	4a13      	ldr	r2, [pc, #76]	; (8000570 <MX_I2C2_Init+0x54>)
 8000524:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <MX_I2C2_Init+0x50>)
 8000528:	4a12      	ldr	r2, [pc, #72]	; (8000574 <MX_I2C2_Init+0x58>)
 800052a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <MX_I2C2_Init+0x50>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <MX_I2C2_Init+0x50>)
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <MX_I2C2_Init+0x50>)
 800053a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800053e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <MX_I2C2_Init+0x50>)
 8000542:	2200      	movs	r2, #0
 8000544:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <MX_I2C2_Init+0x50>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <MX_I2C2_Init+0x50>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <MX_I2C2_Init+0x50>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <MX_I2C2_Init+0x50>)
 800055a:	f000 fe51 	bl	8001200 <HAL_I2C_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d001      	beq.n	8000568 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000564:	f000 f970 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000470 	.word	0x20000470
 8000570:	40005800 	.word	0x40005800
 8000574:	000186a0 	.word	0x000186a0

08000578 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08e      	sub	sp, #56	; 0x38
 800057c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800057e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]
 80005a4:	615a      	str	r2, [r3, #20]
 80005a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80005b0:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005b2:	2230      	movs	r2, #48	; 0x30
 80005b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80005c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ca:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005d0:	4823      	ldr	r0, [pc, #140]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005d2:	f003 fd39 	bl	8004048 <HAL_TIM_Base_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80005dc:	f000 f934 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ea:	4619      	mov	r1, r3
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005ee:	f003 ff59 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80005f8:	f000 f926 	bl	8000848 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005fc:	4818      	ldr	r0, [pc, #96]	; (8000660 <MX_TIM2_Init+0xe8>)
 80005fe:	f003 fd4e 	bl	800409e <HAL_TIM_PWM_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000608:	f000 f91e 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4619      	mov	r1, r3
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <MX_TIM2_Init+0xe8>)
 800061c:	f004 faa6 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000626:	f000 f90f 	bl	8000848 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062a:	2360      	movs	r3, #96	; 0x60
 800062c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 800062e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000632:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	4619      	mov	r1, r3
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <MX_TIM2_Init+0xe8>)
 8000644:	f003 fe68 	bl	8004318 <HAL_TIM_PWM_ConfigChannel>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800064e:	f000 f8fb 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <MX_TIM2_Init+0xe8>)
 8000654:	f000 f9cc 	bl	80009f0 <HAL_TIM_MspPostInit>

}
 8000658:	bf00      	nop
 800065a:	3738      	adds	r7, #56	; 0x38
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000054c 	.word	0x2000054c

08000664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_TIM3_Init+0x90>)
 8000682:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <MX_TIM3_Init+0x94>)
 8000684:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_TIM3_Init+0x90>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_TIM3_Init+0x90>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_TIM3_Init+0x90>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_TIM3_Init+0x90>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_TIM3_Init+0x90>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006a4:	4813      	ldr	r0, [pc, #76]	; (80006f4 <MX_TIM3_Init+0x90>)
 80006a6:	f003 fccf 	bl	8004048 <HAL_TIM_Base_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80006b0:	f000 f8ca 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <MX_TIM3_Init+0x90>)
 80006c2:	f003 feef 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80006cc:	f000 f8bc 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006d0:	2300      	movs	r3, #0
 80006d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_TIM3_Init+0x90>)
 80006de:	f004 fa45 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80006e8:	f000 f8ae 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	3718      	adds	r7, #24
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000500 	.word	0x20000500
 80006f8:	40000400 	.word	0x40000400

080006fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	463b      	mov	r3, r7
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_TIM4_Init+0x94>)
 800071a:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_TIM4_Init+0x98>)
 800071c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_TIM4_Init+0x94>)
 8000720:	2230      	movs	r2, #48	; 0x30
 8000722:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_TIM4_Init+0x94>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_TIM4_Init+0x94>)
 800072c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000730:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_TIM4_Init+0x94>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_TIM4_Init+0x94>)
 800073a:	2280      	movs	r2, #128	; 0x80
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <MX_TIM4_Init+0x94>)
 8000740:	f003 fc82 	bl	8004048 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f87d 	bl	8000848 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4619      	mov	r1, r3
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_TIM4_Init+0x94>)
 800075c:	f003 fea2 	bl	80044a4 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f86f 	bl	8000848 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	; (8000790 <MX_TIM4_Init+0x94>)
 8000778:	f004 f9f8 	bl	8004b6c <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 f861 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000042c 	.word	0x2000042c
 8000794:	40000800 	.word	0x40000800

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a1d      	ldr	r2, [pc, #116]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007ca:	f043 0320 	orr.w	r3, r3, #32
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0320 	and.w	r3, r3, #32
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a11      	ldr	r2, [pc, #68]	; (8000840 <MX_GPIO_Init+0xa8>)
 80007fa:	f043 0308 	orr.w	r3, r3, #8
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_GPIO_Init+0xa8>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0308 	and.w	r3, r3, #8
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800080c:	2201      	movs	r2, #1
 800080e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000812:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_GPIO_Init+0xac>)
 8000814:	f000 fcdc 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2302      	movs	r3, #2
 8000828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 0310 	add.w	r3, r7, #16
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0xac>)
 8000832:	f000 fb73 	bl	8000f1c <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3720      	adds	r7, #32
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000
 8000844:	40011000 	.word	0x40011000

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr

08000854 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800085a:	4b19      	ldr	r3, [pc, #100]	; (80008c0 <HAL_MspInit+0x6c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <HAL_MspInit+0x6c>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6193      	str	r3, [r2, #24]
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_MspInit+0x6c>)
 8000868:	699b      	ldr	r3, [r3, #24]
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
 8000870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_MspInit+0x6c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <HAL_MspInit+0x6c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	61d3      	str	r3, [r2, #28]
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_MspInit+0x6c>)
 8000880:	69db      	ldr	r3, [r3, #28]
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2005      	movs	r0, #5
 8000890:	f000 fb0d 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000894:	2005      	movs	r0, #5
 8000896:	f000 fb26 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089a:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <HAL_MspInit+0x70>)
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_MspInit+0x70>)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40010000 	.word	0x40010000

080008c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_I2C_MspInit+0x74>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d124      	bne.n	8000932 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_I2C_MspInit+0x78>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a14      	ldr	r2, [pc, #80]	; (8000940 <HAL_I2C_MspInit+0x78>)
 80008ee:	f043 0308 	orr.w	r3, r3, #8
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_I2C_MspInit+0x78>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0308 	and.w	r3, r3, #8
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <HAL_I2C_MspInit+0x7c>)
 8000916:	f000 fb01 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <HAL_I2C_MspInit+0x78>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a08      	ldr	r2, [pc, #32]	; (8000940 <HAL_I2C_MspInit+0x78>)
 8000920:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_I2C_MspInit+0x78>)
 8000928:	69db      	ldr	r3, [r3, #28]
 800092a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40005800 	.word	0x40005800
 8000940:	40021000 	.word	0x40021000
 8000944:	40010c00 	.word	0x40010c00

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000958:	d114      	bne.n	8000984 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	61d3      	str	r3, [r2, #28]
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	201c      	movs	r0, #28
 8000978:	f000 fa99 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800097c:	201c      	movs	r0, #28
 800097e:	f000 fab2 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000982:	e02a      	b.n	80009da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <HAL_TIM_Base_MspInit+0xa0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10c      	bne.n	80009a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098e:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000990:	69db      	ldr	r3, [r3, #28]
 8000992:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	61d3      	str	r3, [r2, #28]
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
}
 80009a6:	e018      	b.n	80009da <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_TIM_Base_MspInit+0xa4>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d113      	bne.n	80009da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009b2:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	4a0b      	ldr	r2, [pc, #44]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	61d3      	str	r3, [r2, #28]
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <HAL_TIM_Base_MspInit+0x9c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	201e      	movs	r0, #30
 80009d0:	f000 fa6d 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009d4:	201e      	movs	r0, #30
 80009d6:	f000 fa86 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
}
 80009da:	bf00      	nop
 80009dc:	3718      	adds	r7, #24
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40000400 	.word	0x40000400
 80009ec:	40000800 	.word	0x40000800

080009f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0310 	add.w	r3, r7, #16
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a0e:	d117      	bne.n	8000a40 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_TIM_MspPostInit+0x58>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Motor_1_Pin;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Motor_1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4804      	ldr	r0, [pc, #16]	; (8000a4c <HAL_TIM_MspPostInit+0x5c>)
 8000a3c:	f000 fa6e 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a40:	bf00      	nop
 8000a42:	3720      	adds	r7, #32
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40010800 	.word	0x40010800

08000a50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <HardFault_Handler+0x4>

08000a62 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <MemManage_Handler+0x4>

08000a68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <BusFault_Handler+0x4>

08000a6e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9c:	f000 f8f2 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr

08000ab0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000ab4:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ab6:	f002 f82e 	bl	8002b16 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20001228 	.word	0x20001228

08000ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ac8:	4802      	ldr	r0, [pc, #8]	; (8000ad4 <TIM2_IRQHandler+0x10>)
 8000aca:	f003 fb1c 	bl	8004106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000054c 	.word	0x2000054c

08000ad8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM4_IRQHandler+0x10>)
 8000ade:	f003 fb12 	bl	8004106 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	2000042c 	.word	0x2000042c

08000aec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000af4:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <_sbrk+0x50>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x16>
		heap_end = &end;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <_sbrk+0x50>)
 8000afe:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <_sbrk+0x54>)
 8000b00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <_sbrk+0x50>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <_sbrk+0x50>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4413      	add	r3, r2
 8000b10:	466a      	mov	r2, sp
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d907      	bls.n	8000b26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b16:	f007 f9c3 	bl	8007ea0 <__errno>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b20:	f04f 33ff 	mov.w	r3, #4294967295
 8000b24:	e006      	b.n	8000b34 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <_sbrk+0x50>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a03      	ldr	r2, [pc, #12]	; (8000b3c <_sbrk+0x50>)
 8000b30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	200001fc 	.word	0x200001fc
 8000b40:	20001498 	.word	0x20001498

08000b44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <SystemInit+0x5c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <SystemInit+0x5c>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <SystemInit+0x5c>)
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	4911      	ldr	r1, [pc, #68]	; (8000ba0 <SystemInit+0x5c>)
 8000b5a:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <SystemInit+0x60>)
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <SystemInit+0x5c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <SystemInit+0x5c>)
 8000b66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <SystemInit+0x5c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <SystemInit+0x5c>)
 8000b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <SystemInit+0x5c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <SystemInit+0x5c>)
 8000b82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000b86:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <SystemInit+0x5c>)
 8000b8a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SystemInit+0x64>)
 8000b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b96:	609a      	str	r2, [r3, #8]
#endif 
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	f8ff0000 	.word	0xf8ff0000
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bae:	e003      	b.n	8000bb8 <LoopCopyDataInit>

08000bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bb0:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000bb6:	3104      	adds	r1, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bc0:	d3f6      	bcc.n	8000bb0 <CopyDataInit>
  ldr r2, =_sbss
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bc4:	e002      	b.n	8000bcc <LoopFillZerobss>

08000bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bc8:	f842 3b04 	str.w	r3, [r2], #4

08000bcc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bd0:	d3f9      	bcc.n	8000bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bd2:	f7ff ffb7 	bl	8000b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f007 f969 	bl	8007eac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bda:	f7ff fab7 	bl	800014c <main>
  bx lr
 8000bde:	4770      	bx	lr
  ldr r3, =_sidata
 8000be0:	0800887c 	.word	0x0800887c
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000be8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000bec:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000bf0:	20001498 	.word	0x20001498

08000bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf4:	e7fe      	b.n	8000bf4 <ADC1_2_IRQHandler>
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_Init+0x28>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <HAL_Init+0x28>)
 8000c02:	f043 0310 	orr.w	r3, r3, #16
 8000c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f000 f945 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f000 f808 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c14:	f7ff fe1e 	bl	8000854 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40022000 	.word	0x40022000

08000c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_InitTick+0x54>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <HAL_InitTick+0x58>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4619      	mov	r1, r3
 8000c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 f95d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00e      	b.n	8000c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2b0f      	cmp	r3, #15
 8000c56:	d80a      	bhi.n	8000c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	f000 f925 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c64:	4a06      	ldr	r2, [pc, #24]	; (8000c80 <HAL_InitTick+0x5c>)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4413      	add	r3, r2
 8000c94:	4a03      	ldr	r2, [pc, #12]	; (8000ca4 <HAL_IncTick+0x20>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000590 	.word	0x20000590

08000ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b02      	ldr	r3, [pc, #8]	; (8000cb8 <HAL_GetTick+0x10>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	20000590 	.word	0x20000590

08000cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc4:	f7ff fff0 	bl	8000ca8 <HAL_GetTick>
 8000cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd4:	d005      	beq.n	8000ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_Delay+0x40>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4413      	add	r3, r2
 8000ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ffe0 	bl	8000ca8 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	68fa      	ldr	r2, [r7, #12]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d8f7      	bhi.n	8000ce4 <HAL_Delay+0x28>
  {
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000008 	.word	0x20000008

08000d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <__NVIC_SetPriorityGrouping+0x44>)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	60d3      	str	r3, [r2, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <__NVIC_GetPriorityGrouping+0x18>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	f003 0307 	and.w	r3, r3, #7
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	db0b      	blt.n	8000d8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	f003 021f 	and.w	r2, r3, #31
 8000d7c:	4906      	ldr	r1, [pc, #24]	; (8000d98 <__NVIC_EnableIRQ+0x34>)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	095b      	lsrs	r3, r3, #5
 8000d84:	2001      	movs	r0, #1
 8000d86:	fa00 f202 	lsl.w	r2, r0, r2
 8000d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100

08000d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db0a      	blt.n	8000dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	490c      	ldr	r1, [pc, #48]	; (8000de8 <__NVIC_SetPriority+0x4c>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	0112      	lsls	r2, r2, #4
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	440b      	add	r3, r1
 8000dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc4:	e00a      	b.n	8000ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	4908      	ldr	r1, [pc, #32]	; (8000dec <__NVIC_SetPriority+0x50>)
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	f003 030f 	and.w	r3, r3, #15
 8000dd2:	3b04      	subs	r3, #4
 8000dd4:	0112      	lsls	r2, r2, #4
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	440b      	add	r3, r1
 8000dda:	761a      	strb	r2, [r3, #24]
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	f1c3 0307 	rsb	r3, r3, #7
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	bf28      	it	cs
 8000e0e:	2304      	movcs	r3, #4
 8000e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d902      	bls.n	8000e20 <NVIC_EncodePriority+0x30>
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3b03      	subs	r3, #3
 8000e1e:	e000      	b.n	8000e22 <NVIC_EncodePriority+0x32>
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	f04f 32ff 	mov.w	r2, #4294967295
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	401a      	ands	r2, r3
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	43d9      	mvns	r1, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	4313      	orrs	r3, r2
         );
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3724      	adds	r7, #36	; 0x24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff90 	bl	8000d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff2d 	bl	8000d00 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff42 	bl	8000d48 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff90 	bl	8000df0 <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5f 	bl	8000d9c <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff35 	bl	8000d64 <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b08b      	sub	sp, #44	; 0x2c
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2e:	e127      	b.n	8001180 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f30:	2201      	movs	r2, #1
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	f040 8116 	bne.w	800117a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d034      	beq.n	8000fc0 <HAL_GPIO_Init+0xa4>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d80d      	bhi.n	8000f76 <HAL_GPIO_Init+0x5a>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x9a>
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d804      	bhi.n	8000f6c <HAL_GPIO_Init+0x50>
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d031      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d01c      	beq.n	8000fa4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6a:	e048      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	d043      	beq.n	8000ff8 <HAL_GPIO_Init+0xdc>
 8000f70:	2b11      	cmp	r3, #17
 8000f72:	d01b      	beq.n	8000fac <HAL_GPIO_Init+0x90>
          break;
 8000f74:	e043      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f76:	4a89      	ldr	r2, [pc, #548]	; (800119c <HAL_GPIO_Init+0x280>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d026      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f7c:	4a87      	ldr	r2, [pc, #540]	; (800119c <HAL_GPIO_Init+0x280>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d806      	bhi.n	8000f90 <HAL_GPIO_Init+0x74>
 8000f82:	4a87      	ldr	r2, [pc, #540]	; (80011a0 <HAL_GPIO_Init+0x284>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d020      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f88:	4a86      	ldr	r2, [pc, #536]	; (80011a4 <HAL_GPIO_Init+0x288>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01d      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000f8e:	e036      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f90:	4a85      	ldr	r2, [pc, #532]	; (80011a8 <HAL_GPIO_Init+0x28c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f96:	4a85      	ldr	r2, [pc, #532]	; (80011ac <HAL_GPIO_Init+0x290>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d016      	beq.n	8000fca <HAL_GPIO_Init+0xae>
 8000f9c:	4a84      	ldr	r2, [pc, #528]	; (80011b0 <HAL_GPIO_Init+0x294>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xae>
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e028      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e023      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01e      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e019      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e012      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e008      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e002      	b.n	8000ffe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	2bff      	cmp	r3, #255	; 0xff
 8001002:	d801      	bhi.n	8001008 <HAL_GPIO_Init+0xec>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e001      	b.n	800100c <HAL_GPIO_Init+0xf0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3304      	adds	r3, #4
 800100c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	2bff      	cmp	r3, #255	; 0xff
 8001012:	d802      	bhi.n	800101a <HAL_GPIO_Init+0xfe>
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x104>
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	3b08      	subs	r3, #8
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	210f      	movs	r1, #15
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	6a39      	ldr	r1, [r7, #32]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 8096 	beq.w	800117a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800104e:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a58      	ldr	r2, [pc, #352]	; (80011b4 <HAL_GPIO_Init+0x298>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <HAL_GPIO_Init+0x298>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001066:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 8001068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106a:	089b      	lsrs	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001072:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4013      	ands	r3, r2
 8001088:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_GPIO_Init+0x2a0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x19e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <HAL_GPIO_Init+0x2a4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x19a>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a49      	ldr	r2, [pc, #292]	; (80011c4 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x196>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a48      	ldr	r2, [pc, #288]	; (80011c8 <HAL_GPIO_Init+0x2ac>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x192>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010ae:	2304      	movs	r3, #4
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x1a0>
 80010ba:	2300      	movs	r3, #0
 80010bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010be:	f002 0203 	and.w	r2, r2, #3
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010cc:	493a      	ldr	r1, [pc, #232]	; (80011b8 <HAL_GPIO_Init+0x29c>)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	4938      	ldr	r1, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	600b      	str	r3, [r1, #0]
 80010f2:	e006      	b.n	8001102 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010f4:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4933      	ldr	r1, [pc, #204]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 80010fe:	4013      	ands	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d006      	beq.n	800111c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	492e      	ldr	r1, [pc, #184]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	43db      	mvns	r3, r3
 8001124:	4929      	ldr	r1, [pc, #164]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001126:	4013      	ands	r3, r2
 8001128:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4924      	ldr	r1, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	608b      	str	r3, [r1, #8]
 8001142:	e006      	b.n	8001152 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	491f      	ldr	r1, [pc, #124]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800114e:	4013      	ands	r3, r2
 8001150:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	491a      	ldr	r1, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	60cb      	str	r3, [r1, #12]
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	43db      	mvns	r3, r3
 8001174:	4915      	ldr	r1, [pc, #84]	; (80011cc <HAL_GPIO_Init+0x2b0>)
 8001176:	4013      	ands	r3, r2
 8001178:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	3301      	adds	r3, #1
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	fa22 f303 	lsr.w	r3, r2, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	f47f aed0 	bne.w	8000f30 <HAL_GPIO_Init+0x14>
  }
}
 8001190:	bf00      	nop
 8001192:	372c      	adds	r7, #44	; 0x2c
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	10210000 	.word	0x10210000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	10120000 	.word	0x10120000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10320000 	.word	0x10320000
 80011b0:	10220000 	.word	0x10220000
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40010000 	.word	0x40010000
 80011bc:	40010800 	.word	0x40010800
 80011c0:	40010c00 	.word	0x40010c00
 80011c4:	40011000 	.word	0x40011000
 80011c8:	40011400 	.word	0x40011400
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	611a      	str	r2, [r3, #16]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e10f      	b.n	8001432 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d106      	bne.n	800122c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fb4e 	bl	80008c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2224      	movs	r2, #36	; 0x24
 8001230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0201 	bic.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001244:	f002 fe18 	bl	8003e78 <HAL_RCC_GetPCLK1Freq>
 8001248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a7b      	ldr	r2, [pc, #492]	; (800143c <HAL_I2C_Init+0x23c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d807      	bhi.n	8001264 <HAL_I2C_Init+0x64>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a7a      	ldr	r2, [pc, #488]	; (8001440 <HAL_I2C_Init+0x240>)
 8001258:	4293      	cmp	r3, r2
 800125a:	bf94      	ite	ls
 800125c:	2301      	movls	r3, #1
 800125e:	2300      	movhi	r3, #0
 8001260:	b2db      	uxtb	r3, r3
 8001262:	e006      	b.n	8001272 <HAL_I2C_Init+0x72>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a77      	ldr	r2, [pc, #476]	; (8001444 <HAL_I2C_Init+0x244>)
 8001268:	4293      	cmp	r3, r2
 800126a:	bf94      	ite	ls
 800126c:	2301      	movls	r3, #1
 800126e:	2300      	movhi	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e0db      	b.n	8001432 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4a72      	ldr	r2, [pc, #456]	; (8001448 <HAL_I2C_Init+0x248>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9b      	lsrs	r3, r3, #18
 8001284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	430a      	orrs	r2, r1
 8001298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a64      	ldr	r2, [pc, #400]	; (800143c <HAL_I2C_Init+0x23c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d802      	bhi.n	80012b4 <HAL_I2C_Init+0xb4>
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3301      	adds	r3, #1
 80012b2:	e009      	b.n	80012c8 <HAL_I2C_Init+0xc8>
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a63      	ldr	r2, [pc, #396]	; (800144c <HAL_I2C_Init+0x24c>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	3301      	adds	r3, #1
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80012da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4956      	ldr	r1, [pc, #344]	; (800143c <HAL_I2C_Init+0x23c>)
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d80d      	bhi.n	8001304 <HAL_I2C_Init+0x104>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1e59      	subs	r1, r3, #1
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	bf38      	it	cc
 8001300:	2304      	movcc	r3, #4
 8001302:	e04f      	b.n	80013a4 <HAL_I2C_Init+0x1a4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d111      	bne.n	8001330 <HAL_I2C_Init+0x130>
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1e58      	subs	r0, r3, #1
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6859      	ldr	r1, [r3, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	440b      	add	r3, r1
 800131a:	fbb0 f3f3 	udiv	r3, r0, r3
 800131e:	3301      	adds	r3, #1
 8001320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	e012      	b.n	8001356 <HAL_I2C_Init+0x156>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1e58      	subs	r0, r3, #1
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6859      	ldr	r1, [r3, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	440b      	add	r3, r1
 800133e:	0099      	lsls	r1, r3, #2
 8001340:	440b      	add	r3, r1
 8001342:	fbb0 f3f3 	udiv	r3, r0, r3
 8001346:	3301      	adds	r3, #1
 8001348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_I2C_Init+0x15e>
 800135a:	2301      	movs	r3, #1
 800135c:	e022      	b.n	80013a4 <HAL_I2C_Init+0x1a4>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10e      	bne.n	8001384 <HAL_I2C_Init+0x184>
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1e58      	subs	r0, r3, #1
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	460b      	mov	r3, r1
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	440b      	add	r3, r1
 8001374:	fbb0 f3f3 	udiv	r3, r0, r3
 8001378:	3301      	adds	r3, #1
 800137a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800137e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001382:	e00f      	b.n	80013a4 <HAL_I2C_Init+0x1a4>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1e58      	subs	r0, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	0099      	lsls	r1, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a4:	6879      	ldr	r1, [r7, #4]
 80013a6:	6809      	ldr	r1, [r1, #0]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a1b      	ldr	r3, [r3, #32]
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80013d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6911      	ldr	r1, [r2, #16]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	68d2      	ldr	r2, [r2, #12]
 80013de:	4311      	orrs	r1, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	430b      	orrs	r3, r1
 80013e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	431a      	orrs	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	000186a0 	.word	0x000186a0
 8001440:	001e847f 	.word	0x001e847f
 8001444:	003d08ff 	.word	0x003d08ff
 8001448:	431bde83 	.word	0x431bde83
 800144c:	10624dd3 	.word	0x10624dd3

08001450 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b088      	sub	sp, #32
 8001454:	af02      	add	r7, sp, #8
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	460b      	mov	r3, r1
 800145e:	817b      	strh	r3, [r7, #10]
 8001460:	4613      	mov	r3, r2
 8001462:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fc20 	bl	8000ca8 <HAL_GetTick>
 8001468:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001470:	b2db      	uxtb	r3, r3
 8001472:	2b20      	cmp	r3, #32
 8001474:	f040 80e0 	bne.w	8001638 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2319      	movs	r3, #25
 800147e:	2201      	movs	r2, #1
 8001480:	4970      	ldr	r1, [pc, #448]	; (8001644 <HAL_I2C_Master_Transmit+0x1f4>)
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f001 f864 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
 8001490:	e0d3      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_I2C_Master_Transmit+0x50>
 800149c:	2302      	movs	r3, #2
 800149e:	e0cc      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d007      	beq.n	80014c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2221      	movs	r2, #33	; 0x21
 80014da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2210      	movs	r2, #16
 80014e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	893a      	ldrh	r2, [r7, #8]
 80014f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a50      	ldr	r2, [pc, #320]	; (8001648 <HAL_I2C_Master_Transmit+0x1f8>)
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001508:	8979      	ldrh	r1, [r7, #10]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	6a3a      	ldr	r2, [r7, #32]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 fe22 	bl	8002158 <I2C_MasterRequestWrite>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e08d      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001534:	e066      	b.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	6a39      	ldr	r1, [r7, #32]
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f001 f8de 	bl	80026fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00d      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b04      	cmp	r3, #4
 800154c:	d107      	bne.n	800155e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800155c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06b      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800157c:	b29b      	uxth	r3, r3
 800157e:	3b01      	subs	r3, #1
 8001580:	b29a      	uxth	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158a:	3b01      	subs	r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b04      	cmp	r3, #4
 800159e:	d11b      	bne.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d017      	beq.n	80015d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	781a      	ldrb	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	3b01      	subs	r3, #1
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	6a39      	ldr	r1, [r7, #32]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f001 f8ce 	bl	800277e <I2C_WaitOnBTFFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00d      	beq.n	8001604 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d107      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e01a      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d194      	bne.n	8001536 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800161a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2220      	movs	r2, #32
 8001620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001634:	2300      	movs	r3, #0
 8001636:	e000      	b.n	800163a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001638:	2302      	movs	r3, #2
  }
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	00100002 	.word	0x00100002
 8001648:	ffff0000 	.word	0xffff0000

0800164c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08c      	sub	sp, #48	; 0x30
 8001650:	af02      	add	r7, sp, #8
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	460b      	mov	r3, r1
 800165a:	817b      	strh	r3, [r7, #10]
 800165c:	4613      	mov	r3, r2
 800165e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001660:	f7ff fb22 	bl	8000ca8 <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b20      	cmp	r3, #32
 8001670:	f040 8213 	bne.w	8001a9a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2319      	movs	r3, #25
 800167a:	2201      	movs	r2, #1
 800167c:	497e      	ldr	r1, [pc, #504]	; (8001878 <HAL_I2C_Master_Receive+0x22c>)
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 ff66 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
 800168c:	e206      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2C_Master_Receive+0x50>
 8001698:	2302      	movs	r3, #2
 800169a:	e1ff      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d007      	beq.n	80016c2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2222      	movs	r2, #34	; 0x22
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2210      	movs	r2, #16
 80016de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	893a      	ldrh	r2, [r7, #8]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a5e      	ldr	r2, [pc, #376]	; (800187c <HAL_I2C_Master_Receive+0x230>)
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fd9a 	bl	8002244 <I2C_MasterRequestRead>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e1c0      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	d113      	bne.n	800174a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	695b      	ldr	r3, [r3, #20]
 800172c:	623b      	str	r3, [r7, #32]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	623b      	str	r3, [r7, #32]
 8001736:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	e194      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174e:	2b01      	cmp	r3, #1
 8001750:	d11d      	bne.n	800178e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001760:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001762:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	61fb      	str	r3, [r7, #28]
 8001778:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001788:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800178a:	b662      	cpsie	i
 800178c:	e172      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001792:	2b02      	cmp	r3, #2
 8001794:	d11d      	bne.n	80017d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80017a6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80017ce:	b662      	cpsie	i
 80017d0:	e150      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80017f8:	e13c      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fe:	2b03      	cmp	r3, #3
 8001800:	f200 80f5 	bhi.w	80019ee <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001808:	2b01      	cmp	r3, #1
 800180a:	d123      	bne.n	8001854 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800180e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fff5 	bl	8002800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e13d      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691a      	ldr	r2, [r3, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183c:	3b01      	subs	r3, #1
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	3b01      	subs	r3, #1
 800184c:	b29a      	uxth	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001852:	e10f      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001858:	2b02      	cmp	r3, #2
 800185a:	d150      	bne.n	80018fe <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001862:	2200      	movs	r2, #0
 8001864:	4906      	ldr	r1, [pc, #24]	; (8001880 <HAL_I2C_Master_Receive+0x234>)
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fe72 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e112      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
 8001876:	bf00      	nop
 8001878:	00100002 	.word	0x00100002
 800187c:	ffff0000 	.word	0xffff0000
 8001880:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001884:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001894:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80018c8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f2:	b29b      	uxth	r3, r3
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80018fc:	e0ba      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001904:	2200      	movs	r2, #0
 8001906:	4967      	ldr	r1, [pc, #412]	; (8001aa4 <HAL_I2C_Master_Receive+0x458>)
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 fe21 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0c1      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691a      	ldr	r2, [r3, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	3b01      	subs	r3, #1
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29b      	uxth	r3, r3
 8001954:	3b01      	subs	r3, #1
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001962:	2200      	movs	r2, #0
 8001964:	494f      	ldr	r1, [pc, #316]	; (8001aa4 <HAL_I2C_Master_Receive+0x458>)
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fdf2 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e092      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001984:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80019b8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	691a      	ldr	r2, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ec:	e042      	b.n	8001a74 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f000 ff04 	bl	8002800 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e04c      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	691a      	ldr	r2, [r3, #16]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	1c5a      	adds	r2, r3, #1
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f003 0304 	and.w	r3, r3, #4
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d118      	bne.n	8001a74 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f47f aebe 	bne.w	80017fa <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3728      	adds	r7, #40	; 0x28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	00010004 	.word	0x00010004

08001aa8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	; 0x30
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ac2:	f7ff f8f1 	bl	8000ca8 <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b20      	cmp	r3, #32
 8001ad2:	f040 8218 	bne.w	8001f06 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	2319      	movs	r3, #25
 8001adc:	2201      	movs	r2, #1
 8001ade:	4981      	ldr	r1, [pc, #516]	; (8001ce4 <HAL_I2C_Mem_Read+0x23c>)
 8001ae0:	68f8      	ldr	r0, [r7, #12]
 8001ae2:	f000 fd35 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
 8001aee:	e20b      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_I2C_Mem_Read+0x56>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e204      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d007      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2222      	movs	r2, #34	; 0x22
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2240      	movs	r2, #64	; 0x40
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4a61      	ldr	r2, [pc, #388]	; (8001ce8 <HAL_I2C_Mem_Read+0x240>)
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b66:	88f8      	ldrh	r0, [r7, #6]
 8001b68:	893a      	ldrh	r2, [r7, #8]
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	4603      	mov	r3, r0
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f000 fc1a 	bl	80023b0 <I2C_RequestMemoryRead>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e1c0      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d113      	bne.n	8001bb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	623b      	str	r3, [r7, #32]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	623b      	str	r3, [r7, #32]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e194      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d11d      	bne.n	8001bfa <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001bf6:	b662      	cpsie	i
 8001bf8:	e172      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d11d      	bne.n	8001c3e <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c12:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c3a:	b662      	cpsie	i
 8001c3c:	e150      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c4c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c64:	e13c      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	f200 80f5 	bhi.w	8001e5a <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d123      	bne.n	8001cc0 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fdbf 	bl	8002800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e13d      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cbe:	e10f      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d150      	bne.n	8001d6a <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <HAL_I2C_Mem_Read+0x244>)
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f000 fc3c 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e112      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
 8001ce2:	bf00      	nop
 8001ce4:	00100002 	.word	0x00100002
 8001ce8:	ffff0000 	.word	0xffff0000
 8001cec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d00:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d34:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d52:	3b01      	subs	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	3b01      	subs	r3, #1
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d68:	e0ba      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d70:	2200      	movs	r2, #0
 8001d72:	4967      	ldr	r1, [pc, #412]	; (8001f10 <HAL_I2C_Mem_Read+0x468>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f000 fbeb 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0c1      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dce:	2200      	movs	r2, #0
 8001dd0:	494f      	ldr	r1, [pc, #316]	; (8001f10 <HAL_I2C_Mem_Read+0x468>)
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fbbc 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e092      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e24:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e42:	3b01      	subs	r3, #1
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e58:	e042      	b.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fcce 	bl	8002800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e04c      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d118      	bne.n	8001ee0 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	1c5a      	adds	r2, r3, #1
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f aebe 	bne.w	8001c66 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2220      	movs	r2, #32
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8001f06:	2302      	movs	r3, #2
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3728      	adds	r7, #40	; 0x28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	00010004 	.word	0x00010004

08001f14 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	460b      	mov	r3, r1
 8001f22:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f24:	f7fe fec0 	bl	8000ca8 <HAL_GetTick>
 8001f28:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b20      	cmp	r3, #32
 8001f38:	f040 8105 	bne.w	8002146 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	2319      	movs	r3, #25
 8001f42:	2201      	movs	r2, #1
 8001f44:	4982      	ldr	r1, [pc, #520]	; (8002150 <HAL_I2C_IsDeviceReady+0x23c>)
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f000 fb02 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f52:	2302      	movs	r3, #2
 8001f54:	e0f8      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d101      	bne.n	8001f64 <HAL_I2C_IsDeviceReady+0x50>
 8001f60:	2302      	movs	r3, #2
 8001f62:	e0f1      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d007      	beq.n	8001f8a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0201 	orr.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2224      	movs	r2, #36	; 0x24
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a6a      	ldr	r2, [pc, #424]	; (8002154 <HAL_I2C_IsDeviceReady+0x240>)
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fac0 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0b6      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fe8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fe5d 	bl	8000ca8 <HAL_GetTick>
 8001fee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	bf0c      	ite	eq
 8001ffe:	2301      	moveq	r3, #1
 8002000:	2300      	movne	r3, #0
 8002002:	b2db      	uxtb	r3, r3
 8002004:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002014:	bf0c      	ite	eq
 8002016:	2301      	moveq	r3, #1
 8002018:	2300      	movne	r3, #0
 800201a:	b2db      	uxtb	r3, r3
 800201c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800201e:	e025      	b.n	800206c <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002020:	f7fe fe42 	bl	8000ca8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d302      	bcc.n	8002036 <HAL_I2C_IsDeviceReady+0x122>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	22a0      	movs	r2, #160	; 0xa0
 800203a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b02      	cmp	r3, #2
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002062:	bf0c      	ite	eq
 8002064:	2301      	moveq	r3, #1
 8002066:	2300      	movne	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2ba0      	cmp	r3, #160	; 0xa0
 8002076:	d005      	beq.n	8002084 <HAL_I2C_IsDeviceReady+0x170>
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <HAL_I2C_IsDeviceReady+0x170>
 800207e:	7dbb      	ldrb	r3, [r7, #22]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0cd      	beq.n	8002020 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d129      	bne.n	80020ee <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	2319      	movs	r3, #25
 80020c6:	2201      	movs	r2, #1
 80020c8:	4921      	ldr	r1, [pc, #132]	; (8002150 <HAL_I2C_IsDeviceReady+0x23c>)
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fa40 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e036      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e02c      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002106:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2319      	movs	r3, #25
 800210e:	2201      	movs	r2, #1
 8002110:	490f      	ldr	r1, [pc, #60]	; (8002150 <HAL_I2C_IsDeviceReady+0x23c>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 fa1c 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e012      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3301      	adds	r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	f4ff af3e 	bcc.w	8001fae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3720      	adds	r7, #32
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	00100002 	.word	0x00100002
 8002154:	ffff0000 	.word	0xffff0000

08002158 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b088      	sub	sp, #32
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	2b08      	cmp	r3, #8
 8002172:	d006      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d003      	beq.n	8002182 <I2C_MasterRequestWrite+0x2a>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002180:	d108      	bne.n	8002194 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	e00b      	b.n	80021ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	2b12      	cmp	r3, #18
 800219a:	d107      	bne.n	80021ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f9c9 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e035      	b.n	8002234 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021d0:	d108      	bne.n	80021e4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80021e0:	611a      	str	r2, [r3, #16]
 80021e2:	e01b      	b.n	800221c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80021e4:	897b      	ldrh	r3, [r7, #10]
 80021e6:	11db      	asrs	r3, r3, #7
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f003 0306 	and.w	r3, r3, #6
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f063 030f 	orn	r3, r3, #15
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	490e      	ldr	r1, [pc, #56]	; (800223c <I2C_MasterRequestWrite+0xe4>)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9fb 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e010      	b.n	8002234 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002212:	897b      	ldrh	r3, [r7, #10]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	4907      	ldr	r1, [pc, #28]	; (8002240 <I2C_MasterRequestWrite+0xe8>)
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f9eb 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	00010008 	.word	0x00010008
 8002240:	00010002 	.word	0x00010002

08002244 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	607a      	str	r2, [r7, #4]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	460b      	mov	r3, r1
 8002252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002258:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002268:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b08      	cmp	r3, #8
 800226e:	d006      	beq.n	800227e <I2C_MasterRequestRead+0x3a>
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d003      	beq.n	800227e <I2C_MasterRequestRead+0x3a>
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800227c:	d108      	bne.n	8002290 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	e00b      	b.n	80022a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	2b11      	cmp	r3, #17
 8002296:	d107      	bne.n	80022a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	9300      	str	r3, [sp, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f94b 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e06d      	b.n	80023a0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022cc:	d108      	bne.n	80022e0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80022ce:	897b      	ldrh	r3, [r7, #10]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	e053      	b.n	8002388 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022e0:	897b      	ldrh	r3, [r7, #10]
 80022e2:	11db      	asrs	r3, r3, #7
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	f003 0306 	and.w	r3, r3, #6
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	f063 030f 	orn	r3, r3, #15
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	492a      	ldr	r1, [pc, #168]	; (80023a8 <I2C_MasterRequestRead+0x164>)
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f97d 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e048      	b.n	80023a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800230e:	897b      	ldrh	r3, [r7, #10]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	4923      	ldr	r1, [pc, #140]	; (80023ac <I2C_MasterRequestRead+0x168>)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f96d 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e038      	b.n	80023a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800232e:	2300      	movs	r3, #0
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	613b      	str	r3, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002352:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f8f5 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e017      	b.n	80023a0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002370:	897b      	ldrh	r3, [r7, #10]
 8002372:	11db      	asrs	r3, r3, #7
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f003 0306 	and.w	r3, r3, #6
 800237a:	b2db      	uxtb	r3, r3
 800237c:	f063 030e 	orn	r3, r3, #14
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <I2C_MasterRequestRead+0x168>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f935 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010008 	.word	0x00010008
 80023ac:	00010002 	.word	0x00010002

080023b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	817b      	strh	r3, [r7, #10]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f8aa 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09e      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002406:	897b      	ldrh	r3, [r7, #10]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002414:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	6a3a      	ldr	r2, [r7, #32]
 800241a:	494c      	ldr	r1, [pc, #304]	; (800254c <I2C_RequestMemoryRead+0x19c>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8ee 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e08b      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f958 	bl	80026fc <I2C_WaitOnTXEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00d      	beq.n	800246e <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b04      	cmp	r3, #4
 8002458:	d107      	bne.n	800246a <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002468:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e06a      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002474:	893b      	ldrh	r3, [r7, #8]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e021      	b.n	80024c4 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002480:	893b      	ldrh	r3, [r7, #8]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29b      	uxth	r3, r3
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	6a39      	ldr	r1, [r7, #32]
 8002492:	68f8      	ldr	r0, [r7, #12]
 8002494:	f000 f932 	bl	80026fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00d      	beq.n	80024ba <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d107      	bne.n	80024b6 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e044      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80024ba:	893b      	ldrh	r3, [r7, #8]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	6a39      	ldr	r1, [r7, #32]
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f917 	bl	80026fc <I2C_WaitOnTXEFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e029      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	2200      	movs	r2, #0
 8002508:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f81f 	bl	8002550 <I2C_WaitOnFlagUntilTimeout>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e013      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800251c:	897b      	ldrh	r3, [r7, #10]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f043 0301 	orr.w	r3, r3, #1
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	6a3a      	ldr	r2, [r7, #32]
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <I2C_RequestMemoryRead+0x19c>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f863 	bl	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3718      	adds	r7, #24
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	00010002 	.word	0x00010002

08002550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	603b      	str	r3, [r7, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002560:	e025      	b.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002568:	d021      	beq.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256a:	f7fe fb9d 	bl	8000ca8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d302      	bcc.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d116      	bne.n	80025ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 0220 	orr.w	r2, r3, #32
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e023      	b.n	80025f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d10d      	bne.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4013      	ands	r3, r2
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	e00c      	b.n	80025ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	43da      	mvns	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	4013      	ands	r3, r2
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	79fb      	ldrb	r3, [r7, #7]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d0b6      	beq.n	8002562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	60f8      	str	r0, [r7, #12]
 8002606:	60b9      	str	r1, [r7, #8]
 8002608:	607a      	str	r2, [r7, #4]
 800260a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800260c:	e051      	b.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261c:	d123      	bne.n	8002666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f043 0204 	orr.w	r2, r3, #4
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e046      	b.n	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d021      	beq.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7fe fb1b 	bl	8000ca8 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d116      	bne.n	80026b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f043 0220 	orr.w	r2, r3, #32
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e020      	b.n	80026f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	0c1b      	lsrs	r3, r3, #16
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10c      	bne.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf14      	ite	ne
 80026ce:	2301      	movne	r3, #1
 80026d0:	2300      	moveq	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e00b      	b.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	43da      	mvns	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	4013      	ands	r3, r2
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d18d      	bne.n	800260e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002708:	e02d      	b.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8ce 	bl	80028ac <I2C_IsAcknowledgeFailed>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e02d      	b.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d021      	beq.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002722:	f7fe fac1 	bl	8000ca8 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	429a      	cmp	r2, r3
 8002730:	d302      	bcc.n	8002738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d116      	bne.n	8002766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f043 0220 	orr.w	r2, r3, #32
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e007      	b.n	8002776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d1ca      	bne.n	800270a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800278a:	e02d      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f88d 	bl	80028ac <I2C_IsAcknowledgeFailed>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e02d      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a2:	d021      	beq.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7fe fa80 	bl	8000ca8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d4:	f043 0220 	orr.w	r2, r3, #32
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e007      	b.n	80027f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d1ca      	bne.n	800278c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800280c:	e042      	b.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b10      	cmp	r3, #16
 800281a:	d119      	bne.n	8002850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0210 	mvn.w	r2, #16
 8002824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e029      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002850:	f7fe fa2a 	bl	8000ca8 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d302      	bcc.n	8002866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	f043 0220 	orr.w	r2, r3, #32
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e007      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d1b5      	bne.n	800280e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d11b      	bne.n	80028fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f043 0204 	orr.w	r2, r3, #4
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e000      	b.n	80028fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b08b      	sub	sp, #44	; 0x2c
 800290c:	af06      	add	r7, sp, #24
 800290e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e0d3      	b.n	8002ac2 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f005 f820 	bl	8007974 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2203      	movs	r2, #3
 8002938:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 f990 	bl	8004c66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	687e      	ldr	r6, [r7, #4]
 800294e:	466d      	mov	r5, sp
 8002950:	f106 0410 	add.w	r4, r6, #16
 8002954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	602b      	str	r3, [r5, #0]
 800295c:	1d33      	adds	r3, r6, #4
 800295e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002960:	6838      	ldr	r0, [r7, #0]
 8002962:	f002 f959 	bl	8004c18 <USB_CoreInit>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d005      	beq.n	8002978 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2202      	movs	r2, #2
 8002970:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0a4      	b.n	8002ac2 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2100      	movs	r1, #0
 800297e:	4618      	mov	r0, r3
 8002980:	f002 f98d 	bl	8004c9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e035      	b.n	80029f6 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	015b      	lsls	r3, r3, #5
 8002990:	4413      	add	r3, r2
 8002992:	3329      	adds	r3, #41	; 0x29
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	015b      	lsls	r3, r3, #5
 800299e:	4413      	add	r3, r2
 80029a0:	3328      	adds	r3, #40	; 0x28
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	b291      	uxth	r1, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	015b      	lsls	r3, r3, #5
 80029b0:	4413      	add	r3, r2
 80029b2:	3336      	adds	r3, #54	; 0x36
 80029b4:	460a      	mov	r2, r1
 80029b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	015b      	lsls	r3, r3, #5
 80029be:	4413      	add	r3, r2
 80029c0:	332b      	adds	r3, #43	; 0x2b
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	015b      	lsls	r3, r3, #5
 80029cc:	4413      	add	r3, r2
 80029ce:	3338      	adds	r3, #56	; 0x38
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	015b      	lsls	r3, r3, #5
 80029da:	4413      	add	r3, r2
 80029dc:	333c      	adds	r3, #60	; 0x3c
 80029de:	2200      	movs	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	3302      	adds	r3, #2
 80029e8:	015b      	lsls	r3, r3, #5
 80029ea:	4413      	add	r3, r2
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	3301      	adds	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d3c4      	bcc.n	800298a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e031      	b.n	8002a6a <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f203 1329 	addw	r3, r3, #297	; 0x129
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	015b      	lsls	r3, r3, #5
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	015b      	lsls	r3, r3, #5
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	015b      	lsls	r3, r3, #5
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	015b      	lsls	r3, r3, #5
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	330a      	adds	r3, #10
 8002a5c:	015b      	lsls	r3, r3, #5
 8002a5e:	4413      	add	r3, r2
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3301      	adds	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3c8      	bcc.n	8002a06 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	687e      	ldr	r6, [r7, #4]
 8002a7c:	466d      	mov	r5, sp
 8002a7e:	f106 0410 	add.w	r4, r6, #16
 8002a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	602b      	str	r3, [r5, #0]
 8002a8a:	1d33      	adds	r3, r6, #4
 8002a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a8e:	6838      	ldr	r0, [r7, #0]
 8002a90:	f002 f911 	bl	8004cb6 <USB_DevInit>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00d      	b.n	8002ac2 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f003 f94f 	bl	8005d5e <USB_DevDisconnect>

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002aca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_PCD_Start+0x16>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e016      	b.n	8002b0e <HAL_PCD_Start+0x44>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ae8:	2101      	movs	r1, #1
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f005 f9a1 	bl	8007e32 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f003 f928 	bl	8005d4a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f002 f89a 	bl	8004c38 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f003 f925 	bl	8005d72 <USB_ReadInterrupts>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b32:	d102      	bne.n	8002b3a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 faf3 	bl	8003120 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 f917 	bl	8005d72 <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d112      	bne.n	8002b76 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b62:	b292      	uxth	r2, r2
 8002b64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f004 ff70 	bl	8007a4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b6e:	2100      	movs	r1, #0
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8de 	bl	8002d32 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 f8f9 	bl	8005d72 <USB_ReadInterrupts>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8a:	d10b      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b9e:	b292      	uxth	r2, r2
 8002ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f8e2 	bl	8005d72 <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb8:	d10b      	bne.n	8002bd2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f003 f8cb 	bl	8005d72 <USB_ReadInterrupts>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be6:	d126      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	b292      	uxth	r2, r2
 8002bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	b292      	uxth	r2, r2
 8002c14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f004 ff51 	bl	8007ac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c30:	b292      	uxth	r2, r2
 8002c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f003 f899 	bl	8005d72 <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c4a:	d13d      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0208 	orr.w	r2, r2, #8
 8002c5e:	b292      	uxth	r2, r2
 8002c60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c76:	b292      	uxth	r2, r2
 8002c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0204 	orr.w	r2, r2, #4
 8002c8e:	b292      	uxth	r2, r2
 8002c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 f86a 	bl	8005d72 <USB_ReadInterrupts>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca8:	d10b      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f004 fee2 	bl	8007a8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f003 f850 	bl	8005d72 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cdc:	d10e      	bne.n	8002cfc <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f004 fe9b 	bl	8007a32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 f836 	bl	8005d72 <USB_ReadInterrupts>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d10:	d10b      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d24:	b292      	uxth	r2, r2
 8002d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_PCD_SetAddress+0x1a>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e013      	b.n	8002d74 <HAL_PCD_SetAddress+0x42>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 ffdd 	bl	8005d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	70fb      	strb	r3, [r7, #3]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	803b      	strh	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d96:	2300      	movs	r3, #0
 8002d98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	da0b      	bge.n	8002dba <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	015b      	lsls	r3, r3, #5
 8002daa:	3328      	adds	r3, #40	; 0x28
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	705a      	strb	r2, [r3, #1]
 8002db8:	e00b      	b.n	8002dd2 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	f003 0307 	and.w	r3, r3, #7
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dde:	883a      	ldrh	r2, [r7, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	78ba      	ldrb	r2, [r7, #2]
 8002de8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	785b      	ldrb	r3, [r3, #1]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dfc:	78bb      	ldrb	r3, [r7, #2]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d102      	bne.n	8002e08 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_EP_Open+0x9a>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e00e      	b.n	8002e34 <HAL_PCD_EP_Open+0xb8>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 ff6b 	bl	8004d00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8002e32:	7afb      	ldrb	r3, [r7, #11]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da0b      	bge.n	8002e68 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	015b      	lsls	r3, r3, #5
 8002e58:	3328      	adds	r3, #40	; 0x28
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	705a      	strb	r2, [r3, #1]
 8002e66:	e00b      	b.n	8002e80 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_Close+0x5e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e00e      	b.n	8002eb8 <HAL_PCD_EP_Close+0x7c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f002 fa17 	bl	80052dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	015b      	lsls	r3, r3, #5
 8002ed8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f06:	7afb      	ldrb	r3, [r7, #11]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d106      	bne.n	8002f1e <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6979      	ldr	r1, [r7, #20]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fb76 	bl	8005608 <USB_EPStartXfer>
 8002f1c:	e005      	b.n	8002f2a <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6979      	ldr	r1, [r7, #20]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fb6f 	bl	8005608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	330a      	adds	r3, #10
 8002f4a:	015b      	lsls	r3, r3, #5
 8002f4c:	4413      	add	r3, r2
 8002f4e:	3304      	adds	r3, #4
 8002f50:	681b      	ldr	r3, [r3, #0]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	015b      	lsls	r3, r3, #5
 8002f74:	3328      	adds	r3, #40	; 0x28
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2201      	movs	r2, #1
 8002f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 fb29 	bl	8005608 <USB_EPStartXfer>
 8002fb6:	e005      	b.n	8002fc4 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6979      	ldr	r1, [r7, #20]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f002 fb22 	bl	8005608 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0207 	and.w	r2, r3, #7
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d901      	bls.n	8002fec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e046      	b.n	800307a <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da0b      	bge.n	800300c <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	015b      	lsls	r3, r3, #5
 8002ffc:	3328      	adds	r3, #40	; 0x28
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	4413      	add	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2201      	movs	r2, #1
 8003008:	705a      	strb	r2, [r3, #1]
 800300a:	e009      	b.n	8003020 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015b      	lsls	r3, r3, #5
 8003010:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	4413      	add	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	b2da      	uxtb	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_PCD_EP_SetStall+0x72>
 800303c:	2302      	movs	r3, #2
 800303e:	e01c      	b.n	800307a <HAL_PCD_EP_SetStall+0xac>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68f9      	ldr	r1, [r7, #12]
 800304e:	4618      	mov	r0, r3
 8003050:	f002 fd92 	bl	8005b78 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f002 fe90 	bl	8005d90 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	460b      	mov	r3, r1
 800308c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	f003 020f 	and.w	r2, r3, #15
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	429a      	cmp	r2, r3
 800309a:	d901      	bls.n	80030a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e03a      	b.n	8003116 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	da0b      	bge.n	80030c0 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	015b      	lsls	r3, r3, #5
 80030b0:	3328      	adds	r3, #40	; 0x28
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	705a      	strb	r2, [r3, #1]
 80030be:	e00b      	b.n	80030d8 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	015b      	lsls	r3, r3, #5
 80030c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030de:	78fb      	ldrb	r3, [r7, #3]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_PCD_EP_ClrStall+0x76>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e00e      	b.n	8003116 <HAL_PCD_EP_ClrStall+0x94>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68f9      	ldr	r1, [r7, #12]
 8003106:	4618      	mov	r0, r3
 8003108:	f002 fd78 	bl	8005bfc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003128:	e282      	b.n	8003630 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003132:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800313e:	7d7b      	ldrb	r3, [r7, #21]
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 8142 	bne.w	80033ca <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003146:	8afb      	ldrh	r3, [r7, #22]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d151      	bne.n	80031f4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003160:	b29c      	uxth	r4, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800316a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3328      	adds	r3, #40	; 0x28
 8003176:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003180:	b29b      	uxth	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	3302      	adds	r3, #2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4413      	add	r3, r2
 8003196:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031b2:	2100      	movs	r1, #0
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f004 fc25 	bl	8007a04 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8234 	beq.w	8003630 <PCD_EP_ISR_Handler+0x510>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f040 822f 	bne.w	8003630 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b292      	uxth	r2, r2
 80031e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80031f2:	e21d      	b.n	8003630 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80031fa:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003204:	8a7b      	ldrh	r3, [r7, #18]
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	2b00      	cmp	r3, #0
 800320c:	d033      	beq.n	8003276 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003216:	b29b      	uxth	r3, r3
 8003218:	461a      	mov	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	3306      	adds	r3, #6
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6812      	ldr	r2, [r2, #0]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800324c:	b29b      	uxth	r3, r3
 800324e:	f002 fdee 	bl	8005e2e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	b29a      	uxth	r2, r3
 800325a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800325e:	4013      	ands	r3, r2
 8003260:	b29c      	uxth	r4, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800326a:	b292      	uxth	r2, r2
 800326c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f004 fb9e 	bl	80079b0 <HAL_PCD_SetupStageCallback>
 8003274:	e1dc      	b.n	8003630 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003276:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f280 81d8 	bge.w	8003630 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29a      	uxth	r2, r3
 8003288:	f640 738f 	movw	r3, #3983	; 0xf8f
 800328c:	4013      	ands	r3, r2
 800328e:	b29c      	uxth	r4, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003298:	b292      	uxth	r2, r2
 800329a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	461a      	mov	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	3306      	adds	r3, #6
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d019      	beq.n	8003304 <PCD_EP_ISR_Handler+0x1e4>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d015      	beq.n	8003304 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6818      	ldr	r0, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6959      	ldr	r1, [r3, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	f002 fda0 	bl	8005e2e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	695a      	ldr	r2, [r3, #20]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	441a      	add	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032fc:	2100      	movs	r1, #0
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f004 fb68 	bl	80079d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	461c      	mov	r4, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003312:	b29b      	uxth	r3, r3
 8003314:	441c      	add	r4, r3
 8003316:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800331a:	461c      	mov	r4, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10e      	bne.n	8003342 <PCD_EP_ISR_Handler+0x222>
 8003324:	8823      	ldrh	r3, [r4, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800332c:	b29b      	uxth	r3, r3
 800332e:	8023      	strh	r3, [r4, #0]
 8003330:	8823      	ldrh	r3, [r4, #0]
 8003332:	b29b      	uxth	r3, r3
 8003334:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003338:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800333c:	b29b      	uxth	r3, r3
 800333e:	8023      	strh	r3, [r4, #0]
 8003340:	e02d      	b.n	800339e <PCD_EP_ISR_Handler+0x27e>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b3e      	cmp	r3, #62	; 0x3e
 8003348:	d812      	bhi.n	8003370 <PCD_EP_ISR_Handler+0x250>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <PCD_EP_ISR_Handler+0x244>
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	3301      	adds	r3, #1
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	b29b      	uxth	r3, r3
 8003368:	029b      	lsls	r3, r3, #10
 800336a:	b29b      	uxth	r3, r3
 800336c:	8023      	strh	r3, [r4, #0]
 800336e:	e016      	b.n	800339e <PCD_EP_ISR_Handler+0x27e>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <PCD_EP_ISR_Handler+0x26a>
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	3b01      	subs	r3, #1
 8003388:	61bb      	str	r3, [r7, #24]
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	b29b      	uxth	r3, r3
 800338e:	029b      	lsls	r3, r3, #10
 8003390:	b29b      	uxth	r3, r3
 8003392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339a:	b29b      	uxth	r3, r3
 800339c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	b29c      	uxth	r4, r3
 80033b0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80033ba:	b29c      	uxth	r4, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	4ba2      	ldr	r3, [pc, #648]	; (800364c <PCD_EP_ISR_Handler+0x52c>)
 80033c2:	4323      	orrs	r3, r4
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]
 80033c8:	e132      	b.n	8003630 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	7d7b      	ldrb	r3, [r7, #21]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f280 80d1 	bge.w	8003586 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	7d7b      	ldrb	r3, [r7, #21]
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033f8:	4013      	ands	r3, r2
 80033fa:	b29c      	uxth	r4, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	7d7b      	ldrb	r3, [r7, #21]
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800340c:	b292      	uxth	r2, r2
 800340e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003410:	7d7b      	ldrb	r3, [r7, #21]
 8003412:	015b      	lsls	r3, r3, #5
 8003414:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	4413      	add	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	7b1b      	ldrb	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d121      	bne.n	800346a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800342e:	b29b      	uxth	r3, r3
 8003430:	461a      	mov	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	3306      	adds	r3, #6
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6812      	ldr	r2, [r2, #0]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800344e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8003450:	8bfb      	ldrh	r3, [r7, #30]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d072      	beq.n	800353c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6959      	ldr	r1, [r3, #20]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	88da      	ldrh	r2, [r3, #6]
 8003462:	8bfb      	ldrh	r3, [r7, #30]
 8003464:	f002 fce3 	bl	8005e2e <USB_ReadPMA>
 8003468:	e068      	b.n	800353c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d021      	beq.n	80034c8 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	3302      	adds	r3, #2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ac:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034ae:	8bfb      	ldrh	r3, [r7, #30]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02a      	beq.n	800350a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6959      	ldr	r1, [r3, #20]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	891a      	ldrh	r2, [r3, #8]
 80034c0:	8bfb      	ldrh	r3, [r7, #30]
 80034c2:	f002 fcb4 	bl	8005e2e <USB_ReadPMA>
 80034c6:	e020      	b.n	800350a <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	3306      	adds	r3, #6
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80034f2:	8bfb      	ldrh	r3, [r7, #30]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	895a      	ldrh	r2, [r3, #10]
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	f002 fc92 	bl	8005e2e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003524:	b29c      	uxth	r4, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	461a      	mov	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	441a      	add	r2, r3
 8003534:	4b46      	ldr	r3, [pc, #280]	; (8003650 <PCD_EP_ISR_Handler+0x530>)
 8003536:	4323      	orrs	r3, r4
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	8bfb      	ldrh	r3, [r7, #30]
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	8bfb      	ldrh	r3, [r7, #30]
 800354e:	441a      	add	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <PCD_EP_ISR_Handler+0x446>
 800355c:	8bfa      	ldrh	r2, [r7, #30]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d206      	bcs.n	8003574 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4619      	mov	r1, r3
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f004 fa31 	bl	80079d4 <HAL_PCD_DataOutStageCallback>
 8003572:	e008      	b.n	8003586 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	7819      	ldrb	r1, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff fc9d 	bl	8002ec0 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003586:	8a7b      	ldrh	r3, [r7, #18]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d04f      	beq.n	8003630 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8003590:	7d7b      	ldrb	r3, [r7, #21]
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	3328      	adds	r3, #40	; 0x28
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	7d7b      	ldrb	r3, [r7, #21]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	b29c      	uxth	r4, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	7d7b      	ldrb	r3, [r7, #21]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80035c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	3302      	adds	r3, #2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d106      	bne.n	800361e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f004 f9f4 	bl	8007a04 <HAL_PCD_DataInStageCallback>
 800361c:	e008      	b.n	8003630 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	7819      	ldrb	r1, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff fc96 	bl	8002f5c <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003638:	b29b      	uxth	r3, r3
 800363a:	b21b      	sxth	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	f6ff ad74 	blt.w	800312a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3724      	adds	r7, #36	; 0x24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd90      	pop	{r4, r7, pc}
 800364c:	ffff8080 	.word	0xffff8080
 8003650:	ffff80c0 	.word	0xffff80c0

08003654 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	607b      	str	r3, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	817b      	strh	r3, [r7, #10]
 8003662:	4613      	mov	r3, r2
 8003664:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003672:	897b      	ldrh	r3, [r7, #10]
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	015b      	lsls	r3, r3, #5
 800367a:	3328      	adds	r3, #40	; 0x28
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	e006      	b.n	8003692 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003684:	897b      	ldrh	r3, [r7, #10]
 8003686:	015b      	lsls	r3, r3, #5
 8003688:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2200      	movs	r2, #0
 800369c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	80da      	strh	r2, [r3, #6]
 80036a6:	e00b      	b.n	80036c0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2201      	movs	r2, #1
 80036ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0c1b      	lsrs	r3, r3, #16
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr

080036cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e26c      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0301 	and.w	r3, r3, #1
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8087 	beq.w	80037fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ec:	4b92      	ldr	r3, [pc, #584]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 030c 	and.w	r3, r3, #12
 80036f4:	2b04      	cmp	r3, #4
 80036f6:	d00c      	beq.n	8003712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f8:	4b8f      	ldr	r3, [pc, #572]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 030c 	and.w	r3, r3, #12
 8003700:	2b08      	cmp	r3, #8
 8003702:	d112      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
 8003704:	4b8c      	ldr	r3, [pc, #560]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800370c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003710:	d10b      	bne.n	800372a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003712:	4b89      	ldr	r3, [pc, #548]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d06c      	beq.n	80037f8 <HAL_RCC_OscConfig+0x12c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d168      	bne.n	80037f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e246      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003732:	d106      	bne.n	8003742 <HAL_RCC_OscConfig+0x76>
 8003734:	4b80      	ldr	r3, [pc, #512]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7f      	ldr	r2, [pc, #508]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800373a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	e02e      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10c      	bne.n	8003764 <HAL_RCC_OscConfig+0x98>
 800374a:	4b7b      	ldr	r3, [pc, #492]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	4b78      	ldr	r3, [pc, #480]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a77      	ldr	r2, [pc, #476]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800375c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e01d      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0xbc>
 800376e:	4b72      	ldr	r3, [pc, #456]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a71      	ldr	r2, [pc, #452]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	4b6f      	ldr	r3, [pc, #444]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6e      	ldr	r2, [pc, #440]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_RCC_OscConfig+0xd4>
 8003788:	4b6b      	ldr	r3, [pc, #428]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800378e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a67      	ldr	r2, [pc, #412]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800379a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800379e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d013      	beq.n	80037d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7fd fa7e 	bl	8000ca8 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b0:	f7fd fa7a 	bl	8000ca8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b64      	cmp	r3, #100	; 0x64
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e1fa      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	4b5d      	ldr	r3, [pc, #372]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0f0      	beq.n	80037b0 <HAL_RCC_OscConfig+0xe4>
 80037ce:	e014      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd fa6a 	bl	8000ca8 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d8:	f7fd fa66 	bl	8000ca8 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b64      	cmp	r3, #100	; 0x64
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e1e6      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x10c>
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d063      	beq.n	80038ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b4c      	ldr	r3, [pc, #304]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 030c 	and.w	r3, r3, #12
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00b      	beq.n	800382a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003812:	4b49      	ldr	r3, [pc, #292]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b08      	cmp	r3, #8
 800381c:	d11c      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
 800381e:	4b46      	ldr	r3, [pc, #280]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d116      	bne.n	8003858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382a:	4b43      	ldr	r3, [pc, #268]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d001      	beq.n	8003842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e1ba      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4939      	ldr	r1, [pc, #228]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003856:	e03a      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d020      	beq.n	80038a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	4b36      	ldr	r3, [pc, #216]	; (800393c <HAL_RCC_OscConfig+0x270>)
 8003862:	2201      	movs	r2, #1
 8003864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fa1f 	bl	8000ca8 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	e008      	b.n	8003880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386e:	f7fd fa1b 	bl	8000ca8 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e19b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0f0      	beq.n	800386e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4927      	ldr	r1, [pc, #156]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 800389c:	4313      	orrs	r3, r2
 800389e:	600b      	str	r3, [r1, #0]
 80038a0:	e015      	b.n	80038ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <HAL_RCC_OscConfig+0x270>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd f9fe 	bl	8000ca8 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038b0:	f7fd f9fa 	bl	8000ca8 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e17a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d03a      	beq.n	8003950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d019      	beq.n	8003916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 80038e4:	2201      	movs	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e8:	f7fd f9de 	bl	8000ca8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f0:	f7fd f9da 	bl	8000ca8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e15a      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_RCC_OscConfig+0x26c>)
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fac6 	bl	8003ea0 <RCC_Delay>
 8003914:	e01c      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003916:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <HAL_RCC_OscConfig+0x274>)
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fd f9c4 	bl	8000ca8 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003922:	e00f      	b.n	8003944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003924:	f7fd f9c0 	bl	8000ca8 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d908      	bls.n	8003944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e140      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
 8003936:	bf00      	nop
 8003938:	40021000 	.word	0x40021000
 800393c:	42420000 	.word	0x42420000
 8003940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003944:	4b9e      	ldr	r3, [pc, #632]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e9      	bne.n	8003924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80a6 	beq.w	8003aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003962:	4b97      	ldr	r3, [pc, #604]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d10d      	bne.n	800398a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b94      	ldr	r3, [pc, #592]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003978:	61d3      	str	r3, [r2, #28]
 800397a:	4b91      	ldr	r3, [pc, #580]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398a:	4b8e      	ldr	r3, [pc, #568]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003996:	4b8b      	ldr	r3, [pc, #556]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8a      	ldr	r2, [pc, #552]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7fd f981 	bl	8000ca8 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7fd f97d 	bl	8000ca8 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b64      	cmp	r3, #100	; 0x64
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0fd      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039bc:	4b81      	ldr	r3, [pc, #516]	; (8003bc4 <HAL_RCC_OscConfig+0x4f8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d106      	bne.n	80039de <HAL_RCC_OscConfig+0x312>
 80039d0:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a7a      	ldr	r2, [pc, #488]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	e02d      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0x334>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039ec:	f023 0301 	bic.w	r3, r3, #1
 80039f0:	6213      	str	r3, [r2, #32]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 80039f8:	f023 0304 	bic.w	r3, r3, #4
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	e01c      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d10c      	bne.n	8003a22 <HAL_RCC_OscConfig+0x356>
 8003a08:	4b6d      	ldr	r3, [pc, #436]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	4a6c      	ldr	r2, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6213      	str	r3, [r2, #32]
 8003a14:	4b6a      	ldr	r3, [pc, #424]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	4a69      	ldr	r2, [pc, #420]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a1a:	f043 0301 	orr.w	r3, r3, #1
 8003a1e:	6213      	str	r3, [r2, #32]
 8003a20:	e00b      	b.n	8003a3a <HAL_RCC_OscConfig+0x36e>
 8003a22:	4b67      	ldr	r3, [pc, #412]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a66      	ldr	r2, [pc, #408]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b64      	ldr	r3, [pc, #400]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a63      	ldr	r2, [pc, #396]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a42:	f7fd f931 	bl	8000ca8 <HAL_GetTick>
 8003a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fd f92d 	bl	8000ca8 <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0ab      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCC_OscConfig+0x37e>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a6e:	f7fd f91b 	bl	8000ca8 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fd f917 	bl	8000ca8 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e095      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a8c:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1ee      	bne.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b48      	ldr	r3, [pc, #288]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	4a47      	ldr	r2, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8081 	beq.w	8003bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab4:	4b42      	ldr	r3, [pc, #264]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 030c 	and.w	r3, r3, #12
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d061      	beq.n	8003b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d146      	bne.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac8:	4b3f      	ldr	r3, [pc, #252]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ace:	f7fd f8eb 	bl	8000ca8 <HAL_GetTick>
 8003ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	e008      	b.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad6:	f7fd f8e7 	bl	8000ca8 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	2b02      	cmp	r3, #2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e067      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	4b35      	ldr	r3, [pc, #212]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1f0      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	492d      	ldr	r1, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a19      	ldr	r1, [r3, #32]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	430b      	orrs	r3, r1
 8003b22:	4927      	ldr	r1, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fd f8bb 	bl	8000ca8 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd f8b7 	bl	8000ca8 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e037      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0f0      	beq.n	8003b36 <HAL_RCC_OscConfig+0x46a>
 8003b54:	e02f      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <HAL_RCC_OscConfig+0x4fc>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd f8a4 	bl	8000ca8 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b64:	f7fd f8a0 	bl	8000ca8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e020      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f0      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
 8003b82:	e018      	b.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e013      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x4f4>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40007000 	.word	0x40007000
 8003bc8:	42420060 	.word	0x42420060

08003bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0d0      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003be0:	4b6a      	ldr	r3, [pc, #424]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d910      	bls.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b67      	ldr	r3, [pc, #412]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 0207 	bic.w	r2, r3, #7
 8003bf6:	4965      	ldr	r1, [pc, #404]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b63      	ldr	r3, [pc, #396]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e0b8      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d020      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	4a52      	ldr	r2, [pc, #328]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c4c:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	494d      	ldr	r1, [pc, #308]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d040      	beq.n	8003cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d107      	bne.n	8003c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d115      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e07f      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8a:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d109      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e073      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9a:	4b3d      	ldr	r3, [pc, #244]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06b      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f023 0203 	bic.w	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	4936      	ldr	r1, [pc, #216]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fc fff4 	bl	8000ca8 <HAL_GetTick>
 8003cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc4:	f7fc fff0 	bl	8000ca8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e053      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cda:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f003 020c 	and.w	r2, r3, #12
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1eb      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d210      	bcs.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 0207 	bic.w	r2, r3, #7
 8003d02:	4922      	ldr	r1, [pc, #136]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0307 	and.w	r3, r3, #7
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e032      	b.n	8003d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4916      	ldr	r1, [pc, #88]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d009      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	490e      	ldr	r1, [pc, #56]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d5a:	f000 f821 	bl	8003da0 <HAL_RCC_GetSysClockFreq>
 8003d5e:	4601      	mov	r1, r0
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_ClockConfig+0x1c4>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f003 030f 	and.w	r3, r3, #15
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	; (8003d94 <HAL_RCC_ClockConfig+0x1c8>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8003d72:	4a09      	ldr	r2, [pc, #36]	; (8003d98 <HAL_RCC_ClockConfig+0x1cc>)
 8003d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1d0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7fc ff52 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40022000 	.word	0x40022000
 8003d90:	40021000 	.word	0x40021000
 8003d94:	08008828 	.word	0x08008828
 8003d98:	20000000 	.word	0x20000000
 8003d9c:	20000004 	.word	0x20000004

08003da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da0:	b490      	push	{r4, r7}
 8003da2:	b08a      	sub	sp, #40	; 0x28
 8003da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003da8:	1d3c      	adds	r4, r7, #4
 8003daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003db0:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dca:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d002      	beq.n	8003de0 <HAL_RCC_GetSysClockFreq+0x40>
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_GetSysClockFreq+0x46>
 8003dde:	e02d      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de0:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003de2:	623b      	str	r3, [r7, #32]
      break;
 8003de4:	e02d      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	0c9b      	lsrs	r3, r3, #18
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003df2:	4413      	add	r3, r2
 8003df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003df8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e04:	4b14      	ldr	r3, [pc, #80]	; (8003e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	0c5b      	lsrs	r3, r3, #17
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003e12:	4413      	add	r3, r2
 8003e14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003e18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e1e:	fb02 f203 	mul.w	r2, r2, r3
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2a:	e004      	b.n	8003e36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e30:	fb02 f303 	mul.w	r3, r2, r3
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	623b      	str	r3, [r7, #32]
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e3e:	623b      	str	r3, [r7, #32]
      break;
 8003e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e42:	6a3b      	ldr	r3, [r7, #32]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bc90      	pop	{r4, r7}
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	080087cc 	.word	0x080087cc
 8003e54:	080087dc 	.word	0x080087dc
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	007a1200 	.word	0x007a1200
 8003e60:	003d0900 	.word	0x003d0900

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr
 8003e74:	20000000 	.word	0x20000000

08003e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	f7ff fff2 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e80:	4601      	mov	r1, r0
 8003e82:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	0a1b      	lsrs	r3, r3, #8
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8e:	5cd3      	ldrb	r3, [r2, r3]
 8003e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	08008838 	.word	0x08008838

08003ea0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <RCC_Delay+0x34>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a0a      	ldr	r2, [pc, #40]	; (8003ed8 <RCC_Delay+0x38>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	0a5b      	lsrs	r3, r3, #9
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ebc:	bf00      	nop
  }
  while (Delay --);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	60fa      	str	r2, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1f9      	bne.n	8003ebc <RCC_Delay+0x1c>
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	10624dd3 	.word	0x10624dd3

08003edc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d07d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10d      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f08:	4b4c      	ldr	r3, [pc, #304]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4a4b      	ldr	r2, [pc, #300]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f12:	61d3      	str	r3, [r2, #28]
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f20:	2301      	movs	r3, #1
 8003f22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f24:	4b46      	ldr	r3, [pc, #280]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d118      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f30:	4b43      	ldr	r3, [pc, #268]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a42      	ldr	r2, [pc, #264]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3c:	f7fc feb4 	bl	8000ca8 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	e008      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f44:	f7fc feb0 	bl	8000ca8 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b64      	cmp	r3, #100	; 0x64
 8003f50:	d901      	bls.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e06d      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b3a      	ldr	r3, [pc, #232]	; (8004040 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f62:	4b36      	ldr	r3, [pc, #216]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d02e      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d027      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f8a:	4b2e      	ldr	r3, [pc, #184]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f96:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d014      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa6:	f7fc fe7f 	bl	8000ca8 <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fae:	f7fc fe7b 	bl	8000ca8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d901      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e036      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d0ee      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	4917      	ldr	r1, [pc, #92]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d105      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004000:	4b0e      	ldr	r3, [pc, #56]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	490b      	ldr	r1, [pc, #44]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800401e:	4b07      	ldr	r3, [pc, #28]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	4904      	ldr	r1, [pc, #16]	; (800403c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800402c:	4313      	orrs	r3, r2
 800402e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	40007000 	.word	0x40007000
 8004044:	42420440 	.word	0x42420440

08004048 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e01d      	b.n	8004096 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b00      	cmp	r3, #0
 8004064:	d106      	bne.n	8004074 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fc fc6a 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4619      	mov	r1, r3
 8004086:	4610      	mov	r0, r2
 8004088:	f000 faf0 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e01d      	b.n	80040ec <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d106      	bne.n	80040ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f815 	bl	80040f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	3304      	adds	r3, #4
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 fac5 	bl	800466c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b082      	sub	sp, #8
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d122      	bne.n	8004162 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68db      	ldr	r3, [r3, #12]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d11b      	bne.n	8004162 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f06f 0202 	mvn.w	r2, #2
 8004132:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0303 	and.w	r3, r3, #3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 fa74 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 800414e:	e005      	b.n	800415c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fa67 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa76 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d122      	bne.n	80041b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d11b      	bne.n	80041b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f06f 0204 	mvn.w	r2, #4
 8004186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa4a 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 80041a2:	e005      	b.n	80041b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa3d 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fa4c 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d122      	bne.n	800420a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11b      	bne.n	800420a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0208 	mvn.w	r2, #8
 80041da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2204      	movs	r2, #4
 80041e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f003 0303 	and.w	r3, r3, #3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa20 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 80041f6:	e005      	b.n	8004204 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fa13 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fa22 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d122      	bne.n	800425e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0310 	and.w	r3, r3, #16
 8004222:	2b10      	cmp	r3, #16
 8004224:	d11b      	bne.n	800425e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f06f 0210 	mvn.w	r2, #16
 800422e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2208      	movs	r2, #8
 8004234:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69db      	ldr	r3, [r3, #28]
 800423c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004240:	2b00      	cmp	r3, #0
 8004242:	d003      	beq.n	800424c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f9f6 	bl	8004636 <HAL_TIM_IC_CaptureCallback>
 800424a:	e005      	b.n	8004258 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f9e9 	bl	8004624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f9f8 	bl	8004648 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10e      	bne.n	800428a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b01      	cmp	r3, #1
 8004278:	d107      	bne.n	800428a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f06f 0201 	mvn.w	r2, #1
 8004282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9c4 	bl	8004612 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d10e      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d107      	bne.n	80042b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fca8 	bl	8004c06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d10e      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ce:	2b40      	cmp	r3, #64	; 0x40
 80042d0:	d107      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f000 f9bc 	bl	800465a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	2b20      	cmp	r3, #32
 80042ee:	d10e      	bne.n	800430e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	2b20      	cmp	r3, #32
 80042fc:	d107      	bne.n	800430e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0220 	mvn.w	r2, #32
 8004306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fc73 	bl	8004bf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800430e:	bf00      	nop
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e0b4      	b.n	800449c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	f200 809f 	bhi.w	8004488 <HAL_TIM_PWM_ConfigChannel+0x170>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004385 	.word	0x08004385
 8004354:	08004489 	.word	0x08004489
 8004358:	08004489 	.word	0x08004489
 800435c:	08004489 	.word	0x08004489
 8004360:	080043c5 	.word	0x080043c5
 8004364:	08004489 	.word	0x08004489
 8004368:	08004489 	.word	0x08004489
 800436c:	08004489 	.word	0x08004489
 8004370:	08004407 	.word	0x08004407
 8004374:	08004489 	.word	0x08004489
 8004378:	08004489 	.word	0x08004489
 800437c:	08004489 	.word	0x08004489
 8004380:	08004447 	.word	0x08004447
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f9d0 	bl	8004730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0204 	bic.w	r2, r2, #4
 80043ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6999      	ldr	r1, [r3, #24]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	691a      	ldr	r2, [r3, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	619a      	str	r2, [r3, #24]
      break;
 80043c2:	e062      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68b9      	ldr	r1, [r7, #8]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa16 	bl	80047fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	699a      	ldr	r2, [r3, #24]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	430a      	orrs	r2, r1
 8004402:	619a      	str	r2, [r3, #24]
      break;
 8004404:	e041      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68b9      	ldr	r1, [r7, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fa5f 	bl	80048d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0208 	orr.w	r2, r2, #8
 8004420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0204 	bic.w	r2, r2, #4
 8004430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69d9      	ldr	r1, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	430a      	orrs	r2, r1
 8004442:	61da      	str	r2, [r3, #28]
      break;
 8004444:	e021      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 faa9 	bl	80049a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69d9      	ldr	r1, [r3, #28]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	021a      	lsls	r2, r3, #8
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	61da      	str	r2, [r3, #28]
      break;
 8004486:	e000      	b.n	800448a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004488:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d101      	bne.n	80044bc <HAL_TIM_ConfigClockSource+0x18>
 80044b8:	2302      	movs	r3, #2
 80044ba:	e0a6      	b.n	800460a <HAL_TIM_ConfigClockSource+0x166>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2202      	movs	r2, #2
 80044c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80044da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d067      	beq.n	80045c4 <HAL_TIM_ConfigClockSource+0x120>
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d80b      	bhi.n	8004510 <HAL_TIM_ConfigClockSource+0x6c>
 80044f8:	2b10      	cmp	r3, #16
 80044fa:	d073      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
 80044fc:	2b10      	cmp	r3, #16
 80044fe:	d802      	bhi.n	8004506 <HAL_TIM_ConfigClockSource+0x62>
 8004500:	2b00      	cmp	r3, #0
 8004502:	d06f      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004504:	e078      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004506:	2b20      	cmp	r3, #32
 8004508:	d06c      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
 800450a:	2b30      	cmp	r3, #48	; 0x30
 800450c:	d06a      	beq.n	80045e4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800450e:	e073      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004510:	2b70      	cmp	r3, #112	; 0x70
 8004512:	d00d      	beq.n	8004530 <HAL_TIM_ConfigClockSource+0x8c>
 8004514:	2b70      	cmp	r3, #112	; 0x70
 8004516:	d804      	bhi.n	8004522 <HAL_TIM_ConfigClockSource+0x7e>
 8004518:	2b50      	cmp	r3, #80	; 0x50
 800451a:	d033      	beq.n	8004584 <HAL_TIM_ConfigClockSource+0xe0>
 800451c:	2b60      	cmp	r3, #96	; 0x60
 800451e:	d041      	beq.n	80045a4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004520:	e06a      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004526:	d066      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x152>
 8004528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800452c:	d017      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800452e:	e063      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	6899      	ldr	r1, [r3, #8]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f000 faf5 	bl	8004b2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004552:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	609a      	str	r2, [r3, #8]
      break;
 800455c:	e04c      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f000 fade 	bl	8004b2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004580:	609a      	str	r2, [r3, #8]
      break;
 8004582:	e039      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	461a      	mov	r2, r3
 8004592:	f000 fa55 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2150      	movs	r1, #80	; 0x50
 800459c:	4618      	mov	r0, r3
 800459e:	f000 faac 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045a2:	e029      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	6859      	ldr	r1, [r3, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f000 fa73 	bl	8004a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2160      	movs	r1, #96	; 0x60
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fa9c 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045c2:	e019      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6818      	ldr	r0, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	461a      	mov	r2, r3
 80045d2:	f000 fa35 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fa8c 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045e2:	e009      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4619      	mov	r1, r3
 80045ee:	4610      	mov	r0, r2
 80045f0:	f000 fa83 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045f4:	e000      	b.n	80045f8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800461a:	bf00      	nop
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr

08004636 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004636:	b480      	push	{r7}
 8004638:	b083      	sub	sp, #12
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	bc80      	pop	{r7}
 8004646:	4770      	bx	lr

08004648 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a29      	ldr	r2, [pc, #164]	; (8004724 <TIM_Base_SetConfig+0xb8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_Base_SetConfig+0x30>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d007      	beq.n	800469c <TIM_Base_SetConfig+0x30>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a26      	ldr	r2, [pc, #152]	; (8004728 <TIM_Base_SetConfig+0xbc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_Base_SetConfig+0x30>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a25      	ldr	r2, [pc, #148]	; (800472c <TIM_Base_SetConfig+0xc0>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d108      	bne.n	80046ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <TIM_Base_SetConfig+0xb8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00b      	beq.n	80046ce <TIM_Base_SetConfig+0x62>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046bc:	d007      	beq.n	80046ce <TIM_Base_SetConfig+0x62>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <TIM_Base_SetConfig+0xbc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d003      	beq.n	80046ce <TIM_Base_SetConfig+0x62>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <TIM_Base_SetConfig+0xc0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d108      	bne.n	80046e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a07      	ldr	r2, [pc, #28]	; (8004724 <TIM_Base_SetConfig+0xb8>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d103      	bne.n	8004714 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	615a      	str	r2, [r3, #20]
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800

08004730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f023 0201 	bic.w	r2, r3, #1
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <TIM_OC1_SetConfig+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10c      	bne.n	80047a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0308 	bic.w	r3, r3, #8
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <TIM_OC1_SetConfig+0xc8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d111      	bne.n	80047d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00

080047fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	f023 0210 	bic.w	r2, r3, #16
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0320 	bic.w	r3, r3, #32
 8004846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <TIM_OC2_SetConfig+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10d      	bne.n	8004878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004876:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a14      	ldr	r2, [pc, #80]	; (80048cc <TIM_OC2_SetConfig+0xd0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d113      	bne.n	80048a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00

080048d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1d      	ldr	r2, [pc, #116]	; (80049a0 <TIM_OC3_SetConfig+0xd0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10d      	bne.n	800494a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <TIM_OC3_SetConfig+0xd0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d113      	bne.n	800497a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00

080049a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <TIM_OC4_SetConfig+0x98>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d109      	bne.n	8004a18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 030a 	bic.w	r3, r3, #10
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f023 0210 	bic.w	r2, r3, #16
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	031b      	lsls	r3, r3, #12
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f043 0307 	orr.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	609a      	str	r2, [r3, #8]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d101      	bne.n	8004b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b80:	2302      	movs	r3, #2
 8004b82:	e032      	b.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2202      	movs	r2, #2
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004baa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c0e:	bf00      	nop
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr

08004c18 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004c18:	b084      	sub	sp, #16
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	f107 0014 	add.w	r0, r7, #20
 8004c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	b004      	add	sp, #16
 8004c36:	4770      	bx	lr

08004c38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c40:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c44:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c4c:	b29a      	uxth	r2, r3
 8004c4e:	89fb      	ldrh	r3, [r7, #14]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004c6e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004c72:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	b21a      	sxth	r2, r3
 8004c7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c82:	43db      	mvns	r3, r3
 8004c84:	b21b      	sxth	r3, r3
 8004c86:	4013      	ands	r3, r2
 8004c88:	b21b      	sxth	r3, r3
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr

08004cb6 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	f107 0014 	add.w	r0, r7, #20
 8004cc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ffa5 	bl	8004c38 <USB_EnableGlobalInt>

  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3708      	adds	r7, #8
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfa:	b004      	add	sp, #16
 8004cfc:	4770      	bx	lr
	...

08004d00 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d00:	b490      	push	{r4, r7}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d24:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	78db      	ldrb	r3, [r3, #3]
 8004d2a:	2b03      	cmp	r3, #3
 8004d2c:	d819      	bhi.n	8004d62 <USB_ActivateEndpoint+0x62>
 8004d2e:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <USB_ActivateEndpoint+0x34>)
 8004d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d34:	08004d45 	.word	0x08004d45
 8004d38:	08004d59 	.word	0x08004d59
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d4f 	.word	0x08004d4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004d44:	89bb      	ldrh	r3, [r7, #12]
 8004d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d4a:	81bb      	strh	r3, [r7, #12]
      break;
 8004d4c:	e00d      	b.n	8004d6a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004d4e:	89bb      	ldrh	r3, [r7, #12]
 8004d50:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004d54:	81bb      	strh	r3, [r7, #12]
      break;
 8004d56:	e008      	b.n	8004d6a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004d58:	89bb      	ldrh	r3, [r7, #12]
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d5e:	81bb      	strh	r3, [r7, #12]
      break;
 8004d60:	e003      	b.n	8004d6a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	73fb      	strb	r3, [r7, #15]
      break;
 8004d66:	e000      	b.n	8004d6a <USB_ActivateEndpoint+0x6a>
      break;
 8004d68:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	89bb      	ldrh	r3, [r7, #12]
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	4313      	orrs	r3, r2
 8004daa:	b29c      	uxth	r4, r3
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	441a      	add	r2, r3
 8004db6:	4b8a      	ldr	r3, [pc, #552]	; (8004fe0 <USB_ActivateEndpoint+0x2e0>)
 8004db8:	4323      	orrs	r3, r4
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	7b1b      	ldrb	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f040 8112 	bne.w	8004fec <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	785b      	ldrb	r3, [r3, #1]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d067      	beq.n	8004ea0 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004dd0:	687c      	ldr	r4, [r7, #4]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	441c      	add	r4, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011b      	lsls	r3, r3, #4
 8004de2:	4423      	add	r3, r4
 8004de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004de8:	461c      	mov	r4, r3
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	88db      	ldrh	r3, [r3, #6]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	b29c      	uxth	r4, r3
 8004e06:	4623      	mov	r3, r4
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d014      	beq.n	8004e3a <USB_ActivateEndpoint+0x13a>
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e26:	b29c      	uxth	r4, r3
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	441a      	add	r2, r3
 8004e32:	4b6c      	ldr	r3, [pc, #432]	; (8004fe4 <USB_ActivateEndpoint+0x2e4>)
 8004e34:	4323      	orrs	r3, r4
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	78db      	ldrb	r3, [r3, #3]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d018      	beq.n	8004e74 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	b29c      	uxth	r4, r3
 8004e5a:	f084 0320 	eor.w	r3, r4, #32
 8004e5e:	b29c      	uxth	r4, r3
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	441a      	add	r2, r3
 8004e6a:	4b5d      	ldr	r3, [pc, #372]	; (8004fe0 <USB_ActivateEndpoint+0x2e0>)
 8004e6c:	4323      	orrs	r3, r4
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8013      	strh	r3, [r2, #0]
 8004e72:	e22b      	b.n	80052cc <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e8a:	b29c      	uxth	r4, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	4b52      	ldr	r3, [pc, #328]	; (8004fe0 <USB_ActivateEndpoint+0x2e0>)
 8004e98:	4323      	orrs	r3, r4
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
 8004e9e:	e215      	b.n	80052cc <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004ea0:	687c      	ldr	r4, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	441c      	add	r4, r3
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	4423      	add	r3, r4
 8004eb4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004eb8:	461c      	mov	r4, r3
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	88db      	ldrh	r3, [r3, #6]
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004ec8:	687c      	ldr	r4, [r7, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	441c      	add	r4, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4423      	add	r3, r4
 8004edc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ee0:	461c      	mov	r4, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10e      	bne.n	8004f08 <USB_ActivateEndpoint+0x208>
 8004eea:	8823      	ldrh	r3, [r4, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	8023      	strh	r3, [r4, #0]
 8004ef6:	8823      	ldrh	r3, [r4, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	8023      	strh	r3, [r4, #0]
 8004f06:	e02d      	b.n	8004f64 <USB_ActivateEndpoint+0x264>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2b3e      	cmp	r3, #62	; 0x3e
 8004f0e:	d812      	bhi.n	8004f36 <USB_ActivateEndpoint+0x236>
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	60bb      	str	r3, [r7, #8]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <USB_ActivateEndpoint+0x22a>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8023      	strh	r3, [r4, #0]
 8004f34:	e016      	b.n	8004f64 <USB_ActivateEndpoint+0x264>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	60bb      	str	r3, [r7, #8]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d102      	bne.n	8004f50 <USB_ActivateEndpoint+0x250>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	029b      	lsls	r3, r3, #10
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29c      	uxth	r4, r3
 8004f72:	4623      	mov	r3, r4
 8004f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d014      	beq.n	8004fa6 <USB_ActivateEndpoint+0x2a6>
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	b29c      	uxth	r4, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	441a      	add	r2, r3
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <USB_ActivateEndpoint+0x2e8>)
 8004fa0:	4323      	orrs	r3, r4
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	881b      	ldrh	r3, [r3, #0]
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbc:	b29c      	uxth	r4, r3
 8004fbe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004fc2:	b29c      	uxth	r4, r3
 8004fc4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004fc8:	b29c      	uxth	r4, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	441a      	add	r2, r3
 8004fd4:	4b02      	ldr	r3, [pc, #8]	; (8004fe0 <USB_ActivateEndpoint+0x2e0>)
 8004fd6:	4323      	orrs	r3, r4
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	8013      	strh	r3, [r2, #0]
 8004fdc:	e176      	b.n	80052cc <USB_ActivateEndpoint+0x5cc>
 8004fde:	bf00      	nop
 8004fe0:	ffff8080 	.word	0xffff8080
 8004fe4:	ffff80c0 	.word	0xffff80c0
 8004fe8:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	b29c      	uxth	r4, r3
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	441a      	add	r2, r3
 800500e:	4b96      	ldr	r3, [pc, #600]	; (8005268 <USB_ActivateEndpoint+0x568>)
 8005010:	4323      	orrs	r3, r4
 8005012:	b29b      	uxth	r3, r3
 8005014:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005016:	687c      	ldr	r4, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	441c      	add	r4, r3
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4423      	add	r3, r4
 800502a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502e:	461c      	mov	r4, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	891b      	ldrh	r3, [r3, #8]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	b29b      	uxth	r3, r3
 800503c:	8023      	strh	r3, [r4, #0]
 800503e:	687c      	ldr	r4, [r7, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005046:	b29b      	uxth	r3, r3
 8005048:	441c      	add	r4, r3
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	4423      	add	r3, r4
 8005052:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005056:	461c      	mov	r4, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	895b      	ldrh	r3, [r3, #10]
 800505c:	085b      	lsrs	r3, r3, #1
 800505e:	b29b      	uxth	r3, r3
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 8088 	bne.w	8005180 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29c      	uxth	r4, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d014      	beq.n	80050b2 <USB_ActivateEndpoint+0x3b2>
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509e:	b29c      	uxth	r4, r3
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	4b70      	ldr	r3, [pc, #448]	; (800526c <USB_ActivateEndpoint+0x56c>)
 80050ac:	4323      	orrs	r3, r4
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	b29c      	uxth	r4, r3
 80050c0:	4623      	mov	r3, r4
 80050c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d014      	beq.n	80050f4 <USB_ActivateEndpoint+0x3f4>
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	881b      	ldrh	r3, [r3, #0]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e0:	b29c      	uxth	r4, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	441a      	add	r2, r3
 80050ec:	4b60      	ldr	r3, [pc, #384]	; (8005270 <USB_ActivateEndpoint+0x570>)
 80050ee:	4323      	orrs	r3, r4
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510a:	b29c      	uxth	r4, r3
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	4b56      	ldr	r3, [pc, #344]	; (8005270 <USB_ActivateEndpoint+0x570>)
 8005118:	4323      	orrs	r3, r4
 800511a:	b29b      	uxth	r3, r3
 800511c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005134:	b29c      	uxth	r4, r3
 8005136:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800513a:	b29c      	uxth	r4, r3
 800513c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005140:	b29c      	uxth	r4, r3
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	441a      	add	r2, r3
 800514c:	4b49      	ldr	r3, [pc, #292]	; (8005274 <USB_ActivateEndpoint+0x574>)
 800514e:	4323      	orrs	r3, r4
 8005150:	b29b      	uxth	r3, r3
 8005152:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800516a:	b29c      	uxth	r4, r3
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	4b3f      	ldr	r3, [pc, #252]	; (8005274 <USB_ActivateEndpoint+0x574>)
 8005178:	4323      	orrs	r3, r4
 800517a:	b29b      	uxth	r3, r3
 800517c:	8013      	strh	r3, [r2, #0]
 800517e:	e0a5      	b.n	80052cc <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	b29c      	uxth	r4, r3
 800518e:	4623      	mov	r3, r4
 8005190:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d014      	beq.n	80051c2 <USB_ActivateEndpoint+0x4c2>
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	b29c      	uxth	r4, r3
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	441a      	add	r2, r3
 80051ba:	4b2c      	ldr	r3, [pc, #176]	; (800526c <USB_ActivateEndpoint+0x56c>)
 80051bc:	4323      	orrs	r3, r4
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29c      	uxth	r4, r3
 80051d0:	4623      	mov	r3, r4
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d014      	beq.n	8005204 <USB_ActivateEndpoint+0x504>
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	4413      	add	r3, r2
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f0:	b29c      	uxth	r4, r3
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	441a      	add	r2, r3
 80051fc:	4b1c      	ldr	r3, [pc, #112]	; (8005270 <USB_ActivateEndpoint+0x570>)
 80051fe:	4323      	orrs	r3, r4
 8005200:	b29b      	uxth	r3, r3
 8005202:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	b29c      	uxth	r4, r3
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	441a      	add	r2, r3
 8005226:	4b11      	ldr	r3, [pc, #68]	; (800526c <USB_ActivateEndpoint+0x56c>)
 8005228:	4323      	orrs	r3, r4
 800522a:	b29b      	uxth	r3, r3
 800522c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	78db      	ldrb	r3, [r3, #3]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d020      	beq.n	8005278 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29b      	uxth	r3, r3
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	b29c      	uxth	r4, r3
 800524e:	f084 0320 	eor.w	r3, r4, #32
 8005252:	b29c      	uxth	r4, r3
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <USB_ActivateEndpoint+0x574>)
 8005260:	4323      	orrs	r3, r4
 8005262:	b29b      	uxth	r3, r3
 8005264:	8013      	strh	r3, [r2, #0]
 8005266:	e01c      	b.n	80052a2 <USB_ActivateEndpoint+0x5a2>
 8005268:	ffff8180 	.word	0xffff8180
 800526c:	ffffc080 	.word	0xffffc080
 8005270:	ffff80c0 	.word	0xffff80c0
 8005274:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	4413      	add	r3, r2
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800528a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528e:	b29c      	uxth	r4, r3
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	441a      	add	r2, r3
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <USB_ActivateEndpoint+0x5d8>)
 800529c:	4323      	orrs	r3, r4
 800529e:	b29b      	uxth	r3, r3
 80052a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052b8:	b29c      	uxth	r4, r3
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	441a      	add	r2, r3
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <USB_ActivateEndpoint+0x5d8>)
 80052c6:	4323      	orrs	r3, r4
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bc90      	pop	{r4, r7}
 80052d6:	4770      	bx	lr
 80052d8:	ffff8080 	.word	0xffff8080

080052dc <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80052dc:	b490      	push	{r4, r7}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7b1b      	ldrb	r3, [r3, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d171      	bne.n	80053d2 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	785b      	ldrb	r3, [r3, #1]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d036      	beq.n	8005364 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29c      	uxth	r4, r3
 8005304:	4623      	mov	r3, r4
 8005306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800530a:	2b00      	cmp	r3, #0
 800530c:	d014      	beq.n	8005338 <USB_DeactivateEndpoint+0x5c>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
 800531c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	b29c      	uxth	r4, r3
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	4b6b      	ldr	r3, [pc, #428]	; (80054e0 <USB_DeactivateEndpoint+0x204>)
 8005332:	4323      	orrs	r3, r4
 8005334:	b29b      	uxth	r3, r3
 8005336:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800534a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800534e:	b29c      	uxth	r4, r3
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	441a      	add	r2, r3
 800535a:	4b62      	ldr	r3, [pc, #392]	; (80054e4 <USB_DeactivateEndpoint+0x208>)
 800535c:	4323      	orrs	r3, r4
 800535e:	b29b      	uxth	r3, r3
 8005360:	8013      	strh	r3, [r2, #0]
 8005362:	e144      	b.n	80055ee <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b29c      	uxth	r4, r3
 8005372:	4623      	mov	r3, r4
 8005374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d014      	beq.n	80053a6 <USB_DeactivateEndpoint+0xca>
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	881b      	ldrh	r3, [r3, #0]
 8005388:	b29b      	uxth	r3, r3
 800538a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005392:	b29c      	uxth	r4, r3
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	441a      	add	r2, r3
 800539e:	4b52      	ldr	r3, [pc, #328]	; (80054e8 <USB_DeactivateEndpoint+0x20c>)
 80053a0:	4323      	orrs	r3, r4
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	b29c      	uxth	r4, r3
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	4b46      	ldr	r3, [pc, #280]	; (80054e4 <USB_DeactivateEndpoint+0x208>)
 80053ca:	4323      	orrs	r3, r4
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	8013      	strh	r3, [r2, #0]
 80053d0:	e10d      	b.n	80055ee <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	785b      	ldrb	r3, [r3, #1]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f040 8088 	bne.w	80054ec <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b29c      	uxth	r4, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d014      	beq.n	800541e <USB_DeactivateEndpoint+0x142>
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540a:	b29c      	uxth	r4, r3
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	441a      	add	r2, r3
 8005416:	4b34      	ldr	r3, [pc, #208]	; (80054e8 <USB_DeactivateEndpoint+0x20c>)
 8005418:	4323      	orrs	r3, r4
 800541a:	b29b      	uxth	r3, r3
 800541c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4413      	add	r3, r2
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b29c      	uxth	r4, r3
 800542c:	4623      	mov	r3, r4
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <USB_DeactivateEndpoint+0x184>
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544c:	b29c      	uxth	r4, r3
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	441a      	add	r2, r3
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <USB_DeactivateEndpoint+0x204>)
 800545a:	4323      	orrs	r3, r4
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	b29c      	uxth	r4, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	4b17      	ldr	r3, [pc, #92]	; (80054e0 <USB_DeactivateEndpoint+0x204>)
 8005484:	4323      	orrs	r3, r4
 8005486:	b29b      	uxth	r3, r3
 8005488:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29b      	uxth	r3, r3
 8005498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a0:	b29c      	uxth	r4, r3
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	441a      	add	r2, r3
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <USB_DeactivateEndpoint+0x208>)
 80054ae:	4323      	orrs	r3, r4
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	b29c      	uxth	r4, r3
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <USB_DeactivateEndpoint+0x208>)
 80054d8:	4323      	orrs	r3, r4
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]
 80054de:	e086      	b.n	80055ee <USB_DeactivateEndpoint+0x312>
 80054e0:	ffff80c0 	.word	0xffff80c0
 80054e4:	ffff8080 	.word	0xffff8080
 80054e8:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	881b      	ldrh	r3, [r3, #0]
 80054f8:	b29c      	uxth	r4, r3
 80054fa:	4623      	mov	r3, r4
 80054fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d014      	beq.n	800552e <USB_DeactivateEndpoint+0x252>
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	b29c      	uxth	r4, r3
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	4b35      	ldr	r3, [pc, #212]	; (80055fc <USB_DeactivateEndpoint+0x320>)
 8005528:	4323      	orrs	r3, r4
 800552a:	b29b      	uxth	r3, r3
 800552c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	b29c      	uxth	r4, r3
 800553c:	4623      	mov	r3, r4
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d014      	beq.n	8005570 <USB_DeactivateEndpoint+0x294>
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4413      	add	r3, r2
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555c:	b29c      	uxth	r4, r3
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	441a      	add	r2, r3
 8005568:	4b25      	ldr	r3, [pc, #148]	; (8005600 <USB_DeactivateEndpoint+0x324>)
 800556a:	4323      	orrs	r3, r4
 800556c:	b29b      	uxth	r3, r3
 800556e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	881b      	ldrh	r3, [r3, #0]
 800557c:	b29b      	uxth	r3, r3
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005586:	b29c      	uxth	r4, r3
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	441a      	add	r2, r3
 8005592:	4b1a      	ldr	r3, [pc, #104]	; (80055fc <USB_DeactivateEndpoint+0x320>)
 8005594:	4323      	orrs	r3, r4
 8005596:	b29b      	uxth	r3, r3
 8005598:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b0:	b29c      	uxth	r4, r3
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	441a      	add	r2, r3
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <USB_DeactivateEndpoint+0x328>)
 80055be:	4323      	orrs	r3, r4
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	b29c      	uxth	r4, r3
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	441a      	add	r2, r3
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <USB_DeactivateEndpoint+0x328>)
 80055e8:	4323      	orrs	r3, r4
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc90      	pop	{r4, r7}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	ffffc080 	.word	0xffffc080
 8005600:	ffff80c0 	.word	0xffff80c0
 8005604:	ffff8080 	.word	0xffff8080

08005608 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005608:	b590      	push	{r4, r7, lr}
 800560a:	b08d      	sub	sp, #52	; 0x34
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	785b      	ldrb	r3, [r3, #1]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 8160 	bne.w	80058dc <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	429a      	cmp	r2, r3
 8005626:	d909      	bls.n	800563c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	619a      	str	r2, [r3, #24]
 800563a:	e005      	b.n	8005648 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2200      	movs	r2, #0
 8005646:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	7b1b      	ldrb	r3, [r3, #12]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d119      	bne.n	8005684 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	6959      	ldr	r1, [r3, #20]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	88da      	ldrh	r2, [r3, #6]
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	b29b      	uxth	r3, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fba2 	bl	8005da6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005662:	687c      	ldr	r4, [r7, #4]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800566a:	b29b      	uxth	r3, r3
 800566c:	441c      	add	r4, r3
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	4423      	add	r3, r4
 8005676:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800567a:	461c      	mov	r4, r3
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	b29b      	uxth	r3, r3
 8005680:	8023      	strh	r3, [r4, #0]
 8005682:	e10f      	b.n	80058a4 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	4413      	add	r3, r2
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d065      	beq.n	8005766 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800569a:	687c      	ldr	r4, [r7, #4]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d148      	bne.n	8005736 <USB_EPStartXfer+0x12e>
 80056a4:	687c      	ldr	r4, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	441c      	add	r4, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	4423      	add	r3, r4
 80056b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056bc:	461c      	mov	r4, r3
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d10e      	bne.n	80056e2 <USB_EPStartXfer+0xda>
 80056c4:	8823      	ldrh	r3, [r4, #0]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	8023      	strh	r3, [r4, #0]
 80056d0:	8823      	ldrh	r3, [r4, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056dc:	b29b      	uxth	r3, r3
 80056de:	8023      	strh	r3, [r4, #0]
 80056e0:	e03d      	b.n	800575e <USB_EPStartXfer+0x156>
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	2b3e      	cmp	r3, #62	; 0x3e
 80056e6:	d810      	bhi.n	800570a <USB_EPStartXfer+0x102>
 80056e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	f003 0301 	and.w	r3, r3, #1
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <USB_EPStartXfer+0xf6>
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	3301      	adds	r3, #1
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005700:	b29b      	uxth	r3, r3
 8005702:	029b      	lsls	r3, r3, #10
 8005704:	b29b      	uxth	r3, r3
 8005706:	8023      	strh	r3, [r4, #0]
 8005708:	e029      	b.n	800575e <USB_EPStartXfer+0x156>
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
 8005710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	2b00      	cmp	r3, #0
 8005718:	d102      	bne.n	8005720 <USB_EPStartXfer+0x118>
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	3b01      	subs	r3, #1
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	b29b      	uxth	r3, r3
 8005724:	029b      	lsls	r3, r3, #10
 8005726:	b29b      	uxth	r3, r3
 8005728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800572c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005730:	b29b      	uxth	r3, r3
 8005732:	8023      	strh	r3, [r4, #0]
 8005734:	e013      	b.n	800575e <USB_EPStartXfer+0x156>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d10f      	bne.n	800575e <USB_EPStartXfer+0x156>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005744:	b29b      	uxth	r3, r3
 8005746:	441c      	add	r4, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	4423      	add	r3, r4
 8005750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	895b      	ldrh	r3, [r3, #10]
 8005762:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005764:	e063      	b.n	800582e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d148      	bne.n	8005800 <USB_EPStartXfer+0x1f8>
 800576e:	687c      	ldr	r4, [r7, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005776:	b29b      	uxth	r3, r3
 8005778:	441c      	add	r4, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	4423      	add	r3, r4
 8005782:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005786:	461c      	mov	r4, r3
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10e      	bne.n	80057ac <USB_EPStartXfer+0x1a4>
 800578e:	8823      	ldrh	r3, [r4, #0]
 8005790:	b29b      	uxth	r3, r3
 8005792:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005796:	b29b      	uxth	r3, r3
 8005798:	8023      	strh	r3, [r4, #0]
 800579a:	8823      	ldrh	r3, [r4, #0]
 800579c:	b29b      	uxth	r3, r3
 800579e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8023      	strh	r3, [r4, #0]
 80057aa:	e03d      	b.n	8005828 <USB_EPStartXfer+0x220>
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	2b3e      	cmp	r3, #62	; 0x3e
 80057b0:	d810      	bhi.n	80057d4 <USB_EPStartXfer+0x1cc>
 80057b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	623b      	str	r3, [r7, #32]
 80057b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <USB_EPStartXfer+0x1c0>
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	3301      	adds	r3, #1
 80057c6:	623b      	str	r3, [r7, #32]
 80057c8:	6a3b      	ldr	r3, [r7, #32]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	029b      	lsls	r3, r3, #10
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8023      	strh	r3, [r4, #0]
 80057d2:	e029      	b.n	8005828 <USB_EPStartXfer+0x220>
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	623b      	str	r3, [r7, #32]
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <USB_EPStartXfer+0x1e2>
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	623b      	str	r3, [r7, #32]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	029b      	lsls	r3, r3, #10
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8023      	strh	r3, [r4, #0]
 80057fe:	e013      	b.n	8005828 <USB_EPStartXfer+0x220>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	785b      	ldrb	r3, [r3, #1]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d10f      	bne.n	8005828 <USB_EPStartXfer+0x220>
 8005808:	687c      	ldr	r4, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005810:	b29b      	uxth	r3, r3
 8005812:	441c      	add	r4, r3
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	4423      	add	r3, r4
 800581c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005820:	461c      	mov	r4, r3
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	b29b      	uxth	r3, r3
 8005826:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	891b      	ldrh	r3, [r3, #8]
 800582c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6959      	ldr	r1, [r3, #20]
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	b29b      	uxth	r3, r3
 8005836:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fab4 	bl	8005da6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d115      	bne.n	8005872 <USB_EPStartXfer+0x26a>
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29b      	uxth	r3, r3
 8005854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585c:	b29c      	uxth	r4, r3
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	441a      	add	r2, r3
 8005868:	4b9a      	ldr	r3, [pc, #616]	; (8005ad4 <USB_EPStartXfer+0x4cc>)
 800586a:	4323      	orrs	r3, r4
 800586c:	b29b      	uxth	r3, r3
 800586e:	8013      	strh	r3, [r2, #0]
 8005870:	e018      	b.n	80058a4 <USB_EPStartXfer+0x29c>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	785b      	ldrb	r3, [r3, #1]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d114      	bne.n	80058a4 <USB_EPStartXfer+0x29c>
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005890:	b29c      	uxth	r4, r3
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	441a      	add	r2, r3
 800589c:	4b8e      	ldr	r3, [pc, #568]	; (8005ad8 <USB_EPStartXfer+0x4d0>)
 800589e:	4323      	orrs	r3, r4
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ba:	b29c      	uxth	r4, r3
 80058bc:	f084 0310 	eor.w	r3, r4, #16
 80058c0:	b29c      	uxth	r4, r3
 80058c2:	f084 0320 	eor.w	r3, r4, #32
 80058c6:	b29c      	uxth	r4, r3
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	4b82      	ldr	r3, [pc, #520]	; (8005adc <USB_EPStartXfer+0x4d4>)
 80058d4:	4323      	orrs	r3, r4
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	8013      	strh	r3, [r2, #0]
 80058da:	e146      	b.n	8005b6a <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699a      	ldr	r2, [r3, #24]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d909      	bls.n	80058fc <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	1ad2      	subs	r2, r2, r3
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	619a      	str	r2, [r3, #24]
 80058fa:	e005      	b.n	8005908 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	699b      	ldr	r3, [r3, #24]
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2200      	movs	r2, #0
 8005906:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	7b1b      	ldrb	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d148      	bne.n	80059a2 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005910:	687c      	ldr	r4, [r7, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005918:	b29b      	uxth	r3, r3
 800591a:	441c      	add	r4, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	011b      	lsls	r3, r3, #4
 8005922:	4423      	add	r3, r4
 8005924:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005928:	461c      	mov	r4, r3
 800592a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10e      	bne.n	800594e <USB_EPStartXfer+0x346>
 8005930:	8823      	ldrh	r3, [r4, #0]
 8005932:	b29b      	uxth	r3, r3
 8005934:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005938:	b29b      	uxth	r3, r3
 800593a:	8023      	strh	r3, [r4, #0]
 800593c:	8823      	ldrh	r3, [r4, #0]
 800593e:	b29b      	uxth	r3, r3
 8005940:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005944:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005948:	b29b      	uxth	r3, r3
 800594a:	8023      	strh	r3, [r4, #0]
 800594c:	e0f2      	b.n	8005b34 <USB_EPStartXfer+0x52c>
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2b3e      	cmp	r3, #62	; 0x3e
 8005952:	d810      	bhi.n	8005976 <USB_EPStartXfer+0x36e>
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d002      	beq.n	800596a <USB_EPStartXfer+0x362>
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	3301      	adds	r3, #1
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	b29b      	uxth	r3, r3
 800596e:	029b      	lsls	r3, r3, #10
 8005970:	b29b      	uxth	r3, r3
 8005972:	8023      	strh	r3, [r4, #0]
 8005974:	e0de      	b.n	8005b34 <USB_EPStartXfer+0x52c>
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	61fb      	str	r3, [r7, #28]
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	f003 031f 	and.w	r3, r3, #31
 8005982:	2b00      	cmp	r3, #0
 8005984:	d102      	bne.n	800598c <USB_EPStartXfer+0x384>
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	3b01      	subs	r3, #1
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	b29b      	uxth	r3, r3
 8005990:	029b      	lsls	r3, r3, #10
 8005992:	b29b      	uxth	r3, r3
 8005994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800599c:	b29b      	uxth	r3, r3
 800599e:	8023      	strh	r3, [r4, #0]
 80059a0:	e0c8      	b.n	8005b34 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d148      	bne.n	8005a3c <USB_EPStartXfer+0x434>
 80059aa:	687c      	ldr	r4, [r7, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	441c      	add	r4, r3
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	011b      	lsls	r3, r3, #4
 80059bc:	4423      	add	r3, r4
 80059be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059c2:	461c      	mov	r4, r3
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10e      	bne.n	80059e8 <USB_EPStartXfer+0x3e0>
 80059ca:	8823      	ldrh	r3, [r4, #0]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8023      	strh	r3, [r4, #0]
 80059d6:	8823      	ldrh	r3, [r4, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8023      	strh	r3, [r4, #0]
 80059e6:	e03d      	b.n	8005a64 <USB_EPStartXfer+0x45c>
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	2b3e      	cmp	r3, #62	; 0x3e
 80059ec:	d810      	bhi.n	8005a10 <USB_EPStartXfer+0x408>
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	085b      	lsrs	r3, r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <USB_EPStartXfer+0x3fc>
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	3301      	adds	r3, #1
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	8023      	strh	r3, [r4, #0]
 8005a0e:	e029      	b.n	8005a64 <USB_EPStartXfer+0x45c>
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	095b      	lsrs	r3, r3, #5
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	f003 031f 	and.w	r3, r3, #31
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d102      	bne.n	8005a26 <USB_EPStartXfer+0x41e>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	029b      	lsls	r3, r3, #10
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	8023      	strh	r3, [r4, #0]
 8005a3a:	e013      	b.n	8005a64 <USB_EPStartXfer+0x45c>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d10f      	bne.n	8005a64 <USB_EPStartXfer+0x45c>
 8005a44:	687c      	ldr	r4, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	441c      	add	r4, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	4423      	add	r3, r4
 8005a58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a5c:	461c      	mov	r4, r3
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	8023      	strh	r3, [r4, #0]
 8005a64:	687c      	ldr	r4, [r7, #4]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d14e      	bne.n	8005b0c <USB_EPStartXfer+0x504>
 8005a6e:	687c      	ldr	r4, [r7, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	441c      	add	r4, r3
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	011b      	lsls	r3, r3, #4
 8005a80:	4423      	add	r3, r4
 8005a82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a86:	461c      	mov	r4, r3
 8005a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10e      	bne.n	8005aac <USB_EPStartXfer+0x4a4>
 8005a8e:	8823      	ldrh	r3, [r4, #0]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	8023      	strh	r3, [r4, #0]
 8005a9a:	8823      	ldrh	r3, [r4, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	8023      	strh	r3, [r4, #0]
 8005aaa:	e043      	b.n	8005b34 <USB_EPStartXfer+0x52c>
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab0:	d816      	bhi.n	8005ae0 <USB_EPStartXfer+0x4d8>
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	617b      	str	r3, [r7, #20]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d002      	beq.n	8005ac8 <USB_EPStartXfer+0x4c0>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	8023      	strh	r3, [r4, #0]
 8005ad2:	e02f      	b.n	8005b34 <USB_EPStartXfer+0x52c>
 8005ad4:	ffff80c0 	.word	0xffff80c0
 8005ad8:	ffffc080 	.word	0xffffc080
 8005adc:	ffff8080 	.word	0xffff8080
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d102      	bne.n	8005af6 <USB_EPStartXfer+0x4ee>
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	029b      	lsls	r3, r3, #10
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8023      	strh	r3, [r4, #0]
 8005b0a:	e013      	b.n	8005b34 <USB_EPStartXfer+0x52c>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	785b      	ldrb	r3, [r3, #1]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10f      	bne.n	8005b34 <USB_EPStartXfer+0x52c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	441c      	add	r4, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	011b      	lsls	r3, r3, #4
 8005b24:	4423      	add	r3, r4
 8005b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	b29c      	uxth	r4, r3
 8005b4c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b50:	b29c      	uxth	r4, r3
 8005b52:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b56:	b29c      	uxth	r4, r3
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <USB_EPStartXfer+0x56c>)
 8005b64:	4323      	orrs	r3, r4
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3734      	adds	r7, #52	; 0x34
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd90      	pop	{r4, r7, pc}
 8005b74:	ffff8080 	.word	0xffff8080

08005b78 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b78:	b490      	push	{r4, r7}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	785b      	ldrb	r3, [r3, #1]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d018      	beq.n	8005bbc <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4413      	add	r3, r2
 8005b94:	881b      	ldrh	r3, [r3, #0]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba0:	b29c      	uxth	r4, r3
 8005ba2:	f084 0310 	eor.w	r3, r4, #16
 8005ba6:	b29c      	uxth	r4, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	4b11      	ldr	r3, [pc, #68]	; (8005bf8 <USB_EPSetStall+0x80>)
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	8013      	strh	r3, [r2, #0]
 8005bba:	e017      	b.n	8005bec <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	4413      	add	r3, r2
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	b29c      	uxth	r4, r3
 8005bd4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005bd8:	b29c      	uxth	r4, r3
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	441a      	add	r2, r3
 8005be4:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <USB_EPSetStall+0x80>)
 8005be6:	4323      	orrs	r3, r4
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc90      	pop	{r4, r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	ffff8080 	.word	0xffff8080

08005bfc <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bfc:	b490      	push	{r4, r7}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	7b1b      	ldrb	r3, [r3, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d17d      	bne.n	8005d0a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d03d      	beq.n	8005c92 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29c      	uxth	r4, r3
 8005c24:	4623      	mov	r3, r4
 8005c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d014      	beq.n	8005c58 <USB_EPClearStall+0x5c>
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	881b      	ldrh	r3, [r3, #0]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c44:	b29c      	uxth	r4, r3
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	441a      	add	r2, r3
 8005c50:	4b31      	ldr	r3, [pc, #196]	; (8005d18 <USB_EPClearStall+0x11c>)
 8005c52:	4323      	orrs	r3, r4
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d054      	beq.n	8005d0a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c76:	b29c      	uxth	r4, r3
 8005c78:	f084 0320 	eor.w	r3, r4, #32
 8005c7c:	b29c      	uxth	r4, r3
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	4b24      	ldr	r3, [pc, #144]	; (8005d1c <USB_EPClearStall+0x120>)
 8005c8a:	4323      	orrs	r3, r4
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	8013      	strh	r3, [r2, #0]
 8005c90:	e03b      	b.n	8005d0a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	881b      	ldrh	r3, [r3, #0]
 8005c9e:	b29c      	uxth	r4, r3
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d014      	beq.n	8005cd4 <USB_EPClearStall+0xd8>
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	881b      	ldrh	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc0:	b29c      	uxth	r4, r3
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	441a      	add	r2, r3
 8005ccc:	4b14      	ldr	r3, [pc, #80]	; (8005d20 <USB_EPClearStall+0x124>)
 8005cce:	4323      	orrs	r3, r4
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	b29c      	uxth	r4, r3
 8005cec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005cf0:	b29c      	uxth	r4, r3
 8005cf2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005cf6:	b29c      	uxth	r4, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <USB_EPClearStall+0x120>)
 8005d04:	4323      	orrs	r3, r4
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc90      	pop	{r4, r7}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	ffff80c0 	.word	0xffff80c0
 8005d1c:	ffff8080 	.word	0xffff8080
 8005d20:	ffffc080 	.word	0xffffc080

08005d24 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d103      	bne.n	8005d3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2280      	movs	r2, #128	; 0x80
 8005d3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr

08005d5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bc80      	pop	{r7}
 8005d70:	4770      	bx	lr

08005d72 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005d84:	68fb      	ldr	r3, [r7, #12]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bc80      	pop	{r7}
 8005d8e:	4770      	bx	lr

08005d90 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b08d      	sub	sp, #52	; 0x34
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	60f8      	str	r0, [r7, #12]
 8005dae:	60b9      	str	r1, [r7, #8]
 8005db0:	4611      	mov	r1, r2
 8005db2:	461a      	mov	r2, r3
 8005db4:	460b      	mov	r3, r1
 8005db6:	80fb      	strh	r3, [r7, #6]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005dbc:	88bb      	ldrh	r3, [r7, #4]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dcc:	88fb      	ldrh	r3, [r7, #6]
 8005dce:	005a      	lsls	r2, r3, #1
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dde:	e01e      	b.n	8005e1e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de8:	3301      	adds	r3, #1
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	021b      	lsls	r3, r3, #8
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	461a      	mov	r2, r3
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e08:	3302      	adds	r3, #2
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0e:	3302      	adds	r3, #2
 8005e10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e14:	3301      	adds	r3, #1
 8005e16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1dd      	bne.n	8005de0 <USB_WritePMA+0x3a>
  }
}
 8005e24:	bf00      	nop
 8005e26:	3734      	adds	r7, #52	; 0x34
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr

08005e2e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b08b      	sub	sp, #44	; 0x2c
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	60f8      	str	r0, [r7, #12]
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	4611      	mov	r1, r2
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	80fb      	strh	r3, [r7, #6]
 8005e40:	4613      	mov	r3, r2
 8005e42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e44:	88bb      	ldrh	r3, [r7, #4]
 8005e46:	085b      	lsrs	r3, r3, #1
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e54:	88fb      	ldrh	r3, [r7, #6]
 8005e56:	005a      	lsls	r2, r3, #1
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e60:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	e01b      	b.n	8005ea0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	3302      	adds	r3, #2
 8005e74:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	3301      	adds	r3, #1
 8005e82:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	3301      	adds	r3, #1
 8005e92:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	3302      	adds	r3, #2
 8005e98:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e0      	bne.n	8005e68 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005ea6:	88bb      	ldrh	r3, [r7, #4]
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	701a      	strb	r2, [r3, #0]
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	372c      	adds	r7, #44	; 0x2c
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr

08005ecc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	7c1b      	ldrb	r3, [r3, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d115      	bne.n	8005f10 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005ee4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee8:	2202      	movs	r2, #2
 8005eea:	2181      	movs	r1, #129	; 0x81
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 fe6a 	bl	8007bc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ef8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efc:	2202      	movs	r2, #2
 8005efe:	2101      	movs	r1, #1
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f001 fe60 	bl	8007bc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005f0e:	e012      	b.n	8005f36 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f10:	2340      	movs	r3, #64	; 0x40
 8005f12:	2202      	movs	r2, #2
 8005f14:	2181      	movs	r1, #129	; 0x81
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f001 fe55 	bl	8007bc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	2202      	movs	r2, #2
 8005f26:	2101      	movs	r1, #1
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fe4c 	bl	8007bc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f36:	2308      	movs	r3, #8
 8005f38:	2203      	movs	r2, #3
 8005f3a:	2182      	movs	r1, #130	; 0x82
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f001 fe42 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005f4c:	f001 ff5c 	bl	8007e08 <USBD_static_malloc>
 8005f50:	4602      	mov	r2, r0
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e026      	b.n	8005fb6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f6e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	7c1b      	ldrb	r3, [r3, #16]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f001 fefb 	bl	8007d9a <USBD_LL_PrepareReceive>
 8005fa4:	e007      	b.n	8005fb6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f001 fef2 	bl	8007d9a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fd0:	2181      	movs	r1, #129	; 0x81
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fe1d 	bl	8007c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fde:	2101      	movs	r1, #1
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 fe16 	bl	8007c12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005fee:	2182      	movs	r1, #130	; 0x82
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 fe0e 	bl	8007c12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006016:	4618      	mov	r0, r3
 8006018:	f001 ff02 	bl	8007e20 <USBD_static_free>
    pdev->pClassData = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006024:	7bfb      	ldrb	r3, [r7, #15]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b086      	sub	sp, #24
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006044:	2300      	movs	r3, #0
 8006046:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006048:	2300      	movs	r3, #0
 800604a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006054:	2b00      	cmp	r3, #0
 8006056:	d039      	beq.n	80060cc <USBD_CDC_Setup+0x9e>
 8006058:	2b20      	cmp	r3, #32
 800605a:	d17c      	bne.n	8006156 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	88db      	ldrh	r3, [r3, #6]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d029      	beq.n	80060b8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	b25b      	sxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	da11      	bge.n	8006092 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	683a      	ldr	r2, [r7, #0]
 8006078:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800607a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	88d2      	ldrh	r2, [r2, #6]
 8006080:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006082:	6939      	ldr	r1, [r7, #16]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	88db      	ldrh	r3, [r3, #6]
 8006088:	461a      	mov	r2, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f9f6 	bl	800747c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006090:	e068      	b.n	8006164 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	785a      	ldrb	r2, [r3, #1]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	88db      	ldrh	r3, [r3, #6]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80060a8:	6939      	ldr	r1, [r7, #16]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	88db      	ldrh	r3, [r3, #6]
 80060ae:	461a      	mov	r2, r3
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f001 fa11 	bl	80074d8 <USBD_CtlPrepareRx>
      break;
 80060b6:	e055      	b.n	8006164 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	7850      	ldrb	r0, [r2, #1]
 80060c4:	2200      	movs	r2, #0
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	4798      	blx	r3
      break;
 80060ca:	e04b      	b.n	8006164 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b0a      	cmp	r3, #10
 80060d2:	d017      	beq.n	8006104 <USBD_CDC_Setup+0xd6>
 80060d4:	2b0b      	cmp	r3, #11
 80060d6:	d029      	beq.n	800612c <USBD_CDC_Setup+0xfe>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d133      	bne.n	8006144 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d107      	bne.n	80060f6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	2202      	movs	r2, #2
 80060ec:	4619      	mov	r1, r3
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f9c4 	bl	800747c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060f4:	e02e      	b.n	8006154 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f001 f955 	bl	80073a8 <USBD_CtlError>
            ret = USBD_FAIL;
 80060fe:	2302      	movs	r3, #2
 8006100:	75fb      	strb	r3, [r7, #23]
          break;
 8006102:	e027      	b.n	8006154 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	2b03      	cmp	r3, #3
 800610c:	d107      	bne.n	800611e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800610e:	f107 030f 	add.w	r3, r7, #15
 8006112:	2201      	movs	r2, #1
 8006114:	4619      	mov	r1, r3
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f001 f9b0 	bl	800747c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800611c:	e01a      	b.n	8006154 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f001 f941 	bl	80073a8 <USBD_CtlError>
            ret = USBD_FAIL;
 8006126:	2302      	movs	r3, #2
 8006128:	75fb      	strb	r3, [r7, #23]
          break;
 800612a:	e013      	b.n	8006154 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006132:	2b03      	cmp	r3, #3
 8006134:	d00d      	beq.n	8006152 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 f935 	bl	80073a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800613e:	2302      	movs	r3, #2
 8006140:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006142:	e006      	b.n	8006152 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006144:	6839      	ldr	r1, [r7, #0]
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f001 f92e 	bl	80073a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800614c:	2302      	movs	r3, #2
 800614e:	75fb      	strb	r3, [r7, #23]
          break;
 8006150:	e000      	b.n	8006154 <USBD_CDC_Setup+0x126>
          break;
 8006152:	bf00      	nop
      }
      break;
 8006154:	e006      	b.n	8006164 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006156:	6839      	ldr	r1, [r7, #0]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f925 	bl	80073a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800615e:	2302      	movs	r3, #2
 8006160:	75fb      	strb	r3, [r7, #23]
      break;
 8006162:	bf00      	nop
  }

  return ret;
 8006164:	7dfb      	ldrb	r3, [r7, #23]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006188:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d037      	beq.n	8006204 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	331c      	adds	r3, #28
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d026      	beq.n	80061f8 <USBD_CDC_DataIn+0x8a>
 80061aa:	78fa      	ldrb	r2, [r7, #3]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	440b      	add	r3, r1
 80061b8:	331c      	adds	r3, #28
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	68b9      	ldr	r1, [r7, #8]
 80061c0:	0152      	lsls	r2, r2, #5
 80061c2:	440a      	add	r2, r1
 80061c4:	3238      	adds	r2, #56	; 0x38
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80061cc:	fb02 f201 	mul.w	r2, r2, r1
 80061d0:	1a9b      	subs	r3, r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d110      	bne.n	80061f8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80061d6:	78fa      	ldrb	r2, [r7, #3]
 80061d8:	6879      	ldr	r1, [r7, #4]
 80061da:	4613      	mov	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	440b      	add	r3, r1
 80061e4:	331c      	adds	r3, #28
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061ea:	78f9      	ldrb	r1, [r7, #3]
 80061ec:	2300      	movs	r3, #0
 80061ee:	2200      	movs	r2, #0
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 fdaf 	bl	8007d54 <USBD_LL_Transmit>
 80061f6:	e003      	b.n	8006200 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	e000      	b.n	8006206 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006204:	2302      	movs	r3, #2
  }
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	4619      	mov	r1, r3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f001 fdda 	bl	8007de0 <USBD_LL_GetRxDataSize>
 800622c:	4602      	mov	r2, r0
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006252:	4611      	mov	r1, r2
 8006254:	4798      	blx	r3

    return USBD_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	e000      	b.n	800625c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800625a:	2302      	movs	r3, #2
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800627a:	2b00      	cmp	r3, #0
 800627c:	d015      	beq.n	80062aa <USBD_CDC_EP0_RxReady+0x46>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006284:	2bff      	cmp	r3, #255	; 0xff
 8006286:	d010      	beq.n	80062aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006296:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800629e:	b292      	uxth	r2, r2
 80062a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2243      	movs	r2, #67	; 0x43
 80062c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bc80      	pop	{r7}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	20000094 	.word	0x20000094

080062d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2243      	movs	r2, #67	; 0x43
 80062e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80062e2:	4b03      	ldr	r3, [pc, #12]	; (80062f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr
 80062ee:	bf00      	nop
 80062f0:	20000050 	.word	0x20000050

080062f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2243      	movs	r2, #67	; 0x43
 8006300:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006302:	4b03      	ldr	r3, [pc, #12]	; (8006310 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006304:	4618      	mov	r0, r3
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	200000d8 	.word	0x200000d8

08006314 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	220a      	movs	r2, #10
 8006320:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006322:	4b03      	ldr	r3, [pc, #12]	; (8006330 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	bc80      	pop	{r7}
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	2000000c 	.word	0x2000000c

08006334 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800633e:	2302      	movs	r3, #2
 8006340:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d005      	beq.n	8006354 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	bc80      	pop	{r7}
 800635e:	4770      	bx	lr

08006360 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	4613      	mov	r3, r2
 800636c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	68ba      	ldr	r2, [r7, #8]
 800637a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr

08006392 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d01c      	beq.n	800640c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d115      	bne.n	8006408 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2201      	movs	r2, #1
 80063e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2181      	movs	r1, #129	; 0x81
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f001 fca8 	bl	8007d54 <USBD_LL_Transmit>

      return USBD_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e002      	b.n	800640e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006408:	2301      	movs	r3, #1
 800640a:	e000      	b.n	800640e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800640c:	2302      	movs	r3, #2
  }
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006424:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800642c:	2b00      	cmp	r3, #0
 800642e:	d017      	beq.n	8006460 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7c1b      	ldrb	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d109      	bne.n	800644c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800643e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006442:	2101      	movs	r1, #1
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fca8 	bl	8007d9a <USBD_LL_PrepareReceive>
 800644a:	e007      	b.n	800645c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006452:	2340      	movs	r3, #64	; 0x40
 8006454:	2101      	movs	r1, #1
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fc9f 	bl	8007d9a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	60f8      	str	r0, [r7, #12]
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	4613      	mov	r3, r2
 8006476:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800647e:	2302      	movs	r3, #2
 8006480:	e01a      	b.n	80064b8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006488:	2b00      	cmp	r3, #0
 800648a:	d003      	beq.n	8006494 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	79fa      	ldrb	r2, [r7, #7]
 80064ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f001 fb13 	bl	8007adc <USBD_LL_Init>

  return USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d006      	beq.n	80064e2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e001      	b.n	80064e6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064e2:	2302      	movs	r3, #2
 80064e4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr

080064f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fb48 	bl	8007b90 <USBD_LL_Start>

  return USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	bc80      	pop	{r7}
 800651c:	4770      	bx	lr

0800651e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	460b      	mov	r3, r1
 8006528:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800652a:	2302      	movs	r3, #2
 800652c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00c      	beq.n	8006552 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	78fa      	ldrb	r2, [r7, #3]
 8006542:	4611      	mov	r1, r2
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	78fa      	ldrb	r2, [r7, #3]
 8006572:	4611      	mov	r1, r2
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fecb 	bl	8007330 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80065a8:	461a      	mov	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065b6:	f003 031f 	and.w	r3, r3, #31
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d00c      	beq.n	80065d8 <USBD_LL_SetupStage+0x56>
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d302      	bcc.n	80065c8 <USBD_LL_SetupStage+0x46>
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d010      	beq.n	80065e8 <USBD_LL_SetupStage+0x66>
 80065c6:	e017      	b.n	80065f8 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f9cb 	bl	800696c <USBD_StdDevReq>
      break;
 80065d6:	e01a      	b.n	800660e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065de:	4619      	mov	r1, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fa2d 	bl	8006a40 <USBD_StdItfReq>
      break;
 80065e6:	e012      	b.n	800660e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fa6b 	bl	8006acc <USBD_StdEPReq>
      break;
 80065f6:	e00a      	b.n	800660e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006602:	b2db      	uxtb	r3, r3
 8006604:	4619      	mov	r1, r3
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f001 fb22 	bl	8007c50 <USBD_LL_StallEP>
      break;
 800660c:	bf00      	nop
  }

  return USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	460b      	mov	r3, r1
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006626:	7afb      	ldrb	r3, [r7, #11]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d14b      	bne.n	80066c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006632:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800663a:	2b03      	cmp	r3, #3
 800663c:	d134      	bne.n	80066a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	68da      	ldr	r2, [r3, #12]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	429a      	cmp	r2, r3
 8006648:	d919      	bls.n	800667e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	68da      	ldr	r2, [r3, #12]
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006660:	429a      	cmp	r2, r3
 8006662:	d203      	bcs.n	800666c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006668:	b29b      	uxth	r3, r3
 800666a:	e002      	b.n	8006672 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006670:	b29b      	uxth	r3, r3
 8006672:	461a      	mov	r2, r3
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 ff4c 	bl	8007514 <USBD_CtlContinueRx>
 800667c:	e038      	b.n	80066f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006690:	2b03      	cmp	r3, #3
 8006692:	d105      	bne.n	80066a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f000 ff49 	bl	8007538 <USBD_CtlSendStatus>
 80066a6:	e023      	b.n	80066f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066ae:	2b05      	cmp	r3, #5
 80066b0:	d11e      	bne.n	80066f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066ba:	2100      	movs	r1, #0
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f001 fac7 	bl	8007c50 <USBD_LL_StallEP>
 80066c2:	e015      	b.n	80066f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066d6:	2b03      	cmp	r3, #3
 80066d8:	d108      	bne.n	80066ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	7afa      	ldrb	r2, [r7, #11]
 80066e4:	4611      	mov	r1, r2
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	4798      	blx	r3
 80066ea:	e001      	b.n	80066f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066ec:	2302      	movs	r3, #2
 80066ee:	e000      	b.n	80066f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3718      	adds	r7, #24
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	460b      	mov	r3, r1
 8006704:	607a      	str	r2, [r7, #4]
 8006706:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d17f      	bne.n	800680e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3314      	adds	r3, #20
 8006712:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800671a:	2b02      	cmp	r3, #2
 800671c:	d15c      	bne.n	80067d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d915      	bls.n	8006756 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	1ad2      	subs	r2, r2, r3
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	b29b      	uxth	r3, r3
 800673e:	461a      	mov	r2, r3
 8006740:	6879      	ldr	r1, [r7, #4]
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 feb6 	bl	80074b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006748:	2300      	movs	r3, #0
 800674a:	2200      	movs	r2, #0
 800674c:	2100      	movs	r1, #0
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f001 fb23 	bl	8007d9a <USBD_LL_PrepareReceive>
 8006754:	e04e      	b.n	80067f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	6912      	ldr	r2, [r2, #16]
 800675e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006762:	fb02 f201 	mul.w	r2, r2, r1
 8006766:	1a9b      	subs	r3, r3, r2
 8006768:	2b00      	cmp	r3, #0
 800676a:	d11c      	bne.n	80067a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006774:	429a      	cmp	r2, r3
 8006776:	d316      	bcc.n	80067a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006782:	429a      	cmp	r2, r3
 8006784:	d20f      	bcs.n	80067a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006786:	2200      	movs	r2, #0
 8006788:	2100      	movs	r1, #0
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fe92 	bl	80074b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006798:	2300      	movs	r3, #0
 800679a:	2200      	movs	r2, #0
 800679c:	2100      	movs	r1, #0
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f001 fafb 	bl	8007d9a <USBD_LL_PrepareReceive>
 80067a4:	e026      	b.n	80067f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d105      	bne.n	80067c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067c8:	2180      	movs	r1, #128	; 0x80
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f001 fa40 	bl	8007c50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fec4 	bl	800755e <USBD_CtlReceiveStatus>
 80067d6:	e00d      	b.n	80067f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d004      	beq.n	80067ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f001 fa2e 	bl	8007c50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d11d      	bne.n	800683a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff fe83 	bl	800650a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800680c:	e015      	b.n	800683a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00d      	beq.n	8006836 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006820:	2b03      	cmp	r3, #3
 8006822:	d108      	bne.n	8006836 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	7afa      	ldrb	r2, [r7, #11]
 800682e:	4611      	mov	r1, r2
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	4798      	blx	r3
 8006834:	e001      	b.n	800683a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006836:	2302      	movs	r3, #2
 8006838:	e000      	b.n	800683c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800684c:	2340      	movs	r3, #64	; 0x40
 800684e:	2200      	movs	r2, #0
 8006850:	2100      	movs	r1, #0
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 f9b7 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2240      	movs	r2, #64	; 0x40
 8006864:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006868:	2340      	movs	r3, #64	; 0x40
 800686a:	2200      	movs	r2, #0
 800686c:	2180      	movs	r1, #128	; 0x80
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f001 f9a9 	bl	8007bc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2240      	movs	r2, #64	; 0x40
 800687e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d009      	beq.n	80068bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6852      	ldr	r2, [r2, #4]
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	4611      	mov	r1, r2
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
  }

  return USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2204      	movs	r2, #4
 80068fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	370c      	adds	r7, #12
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691a:	2b04      	cmp	r3, #4
 800691c:	d105      	bne.n	800692a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	bc80      	pop	{r7}
 8006934:	4770      	bx	lr

08006936 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006944:	2b03      	cmp	r3, #3
 8006946:	d10b      	bne.n	8006960 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	69db      	ldr	r3, [r3, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006982:	2b20      	cmp	r3, #32
 8006984:	d004      	beq.n	8006990 <USBD_StdDevReq+0x24>
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d002      	beq.n	8006990 <USBD_StdDevReq+0x24>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <USBD_StdDevReq+0x34>
 800698e:	e04c      	b.n	8006a2a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
      break;
 800699e:	e049      	b.n	8006a34 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	d83a      	bhi.n	8006a1e <USBD_StdDevReq+0xb2>
 80069a8:	a201      	add	r2, pc, #4	; (adr r2, 80069b0 <USBD_StdDevReq+0x44>)
 80069aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ae:	bf00      	nop
 80069b0:	08006a01 	.word	0x08006a01
 80069b4:	08006a15 	.word	0x08006a15
 80069b8:	08006a1f 	.word	0x08006a1f
 80069bc:	08006a0b 	.word	0x08006a0b
 80069c0:	08006a1f 	.word	0x08006a1f
 80069c4:	080069e3 	.word	0x080069e3
 80069c8:	080069d9 	.word	0x080069d9
 80069cc:	08006a1f 	.word	0x08006a1f
 80069d0:	080069f7 	.word	0x080069f7
 80069d4:	080069ed 	.word	0x080069ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f9d4 	bl	8006d88 <USBD_GetDescriptor>
          break;
 80069e0:	e022      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb37 	bl	8007058 <USBD_SetAddress>
          break;
 80069ea:	e01d      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fb74 	bl	80070dc <USBD_SetConfig>
          break;
 80069f4:	e018      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fbfd 	bl	80071f8 <USBD_GetConfig>
          break;
 80069fe:	e013      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fc2c 	bl	8007260 <USBD_GetStatus>
          break;
 8006a08:	e00e      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fc5a 	bl	80072c6 <USBD_SetFeature>
          break;
 8006a12:	e009      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fc69 	bl	80072ee <USBD_ClrFeature>
          break;
 8006a1c:	e004      	b.n	8006a28 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fcc1 	bl	80073a8 <USBD_CtlError>
          break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e004      	b.n	8006a34 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fcbb 	bl	80073a8 <USBD_CtlError>
      break;
 8006a32:	bf00      	nop
  }

  return ret;
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop

08006a40 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d003      	beq.n	8006a62 <USBD_StdItfReq+0x22>
 8006a5a:	2b40      	cmp	r3, #64	; 0x40
 8006a5c:	d001      	beq.n	8006a62 <USBD_StdItfReq+0x22>
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d12a      	bne.n	8006ab8 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d81d      	bhi.n	8006aaa <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	889b      	ldrh	r3, [r3, #4]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d813      	bhi.n	8006aa0 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	6839      	ldr	r1, [r7, #0]
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d110      	bne.n	8006ab4 <USBD_StdItfReq+0x74>
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10d      	bne.n	8006ab4 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fd4d 	bl	8007538 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a9e:	e009      	b.n	8006ab4 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc80 	bl	80073a8 <USBD_CtlError>
          break;
 8006aa8:	e004      	b.n	8006ab4 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fc7b 	bl	80073a8 <USBD_CtlError>
          break;
 8006ab2:	e000      	b.n	8006ab6 <USBD_StdItfReq+0x76>
          break;
 8006ab4:	bf00      	nop
      }
      break;
 8006ab6:	e004      	b.n	8006ac2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fc74 	bl	80073a8 <USBD_CtlError>
      break;
 8006ac0:	bf00      	nop
  }

  return USBD_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	889b      	ldrh	r3, [r3, #4]
 8006ade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d004      	beq.n	8006af6 <USBD_StdEPReq+0x2a>
 8006aec:	2b40      	cmp	r3, #64	; 0x40
 8006aee:	d002      	beq.n	8006af6 <USBD_StdEPReq+0x2a>
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <USBD_StdEPReq+0x3a>
 8006af4:	e13d      	b.n	8006d72 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	4798      	blx	r3
      break;
 8006b04:	e13a      	b.n	8006d7c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d10a      	bne.n	8006b28 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	e12a      	b.n	8006d7e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	785b      	ldrb	r3, [r3, #1]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d03e      	beq.n	8006bae <USBD_StdEPReq+0xe2>
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d002      	beq.n	8006b3a <USBD_StdEPReq+0x6e>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d070      	beq.n	8006c1a <USBD_StdEPReq+0x14e>
 8006b38:	e115      	b.n	8006d66 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d002      	beq.n	8006b4a <USBD_StdEPReq+0x7e>
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d015      	beq.n	8006b74 <USBD_StdEPReq+0xa8>
 8006b48:	e02b      	b.n	8006ba2 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00c      	beq.n	8006b6a <USBD_StdEPReq+0x9e>
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	2b80      	cmp	r3, #128	; 0x80
 8006b54:	d009      	beq.n	8006b6a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 f878 	bl	8007c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b60:	2180      	movs	r1, #128	; 0x80
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f001 f874 	bl	8007c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b68:	e020      	b.n	8006bac <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc1b 	bl	80073a8 <USBD_CtlError>
              break;
 8006b72:	e01b      	b.n	8006bac <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10e      	bne.n	8006b9a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00b      	beq.n	8006b9a <USBD_StdEPReq+0xce>
 8006b82:	7bbb      	ldrb	r3, [r7, #14]
 8006b84:	2b80      	cmp	r3, #128	; 0x80
 8006b86:	d008      	beq.n	8006b9a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d104      	bne.n	8006b9a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f001 f85b 	bl	8007c50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fccc 	bl	8007538 <USBD_CtlSendStatus>

              break;
 8006ba0:	e004      	b.n	8006bac <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8006ba2:	6839      	ldr	r1, [r7, #0]
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fbff 	bl	80073a8 <USBD_CtlError>
              break;
 8006baa:	bf00      	nop
          }
          break;
 8006bac:	e0e0      	b.n	8006d70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d002      	beq.n	8006bbe <USBD_StdEPReq+0xf2>
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d015      	beq.n	8006be8 <USBD_StdEPReq+0x11c>
 8006bbc:	e026      	b.n	8006c0c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <USBD_StdEPReq+0x112>
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	d009      	beq.n	8006bde <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bca:	7bbb      	ldrb	r3, [r7, #14]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f83e 	bl	8007c50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bd4:	2180      	movs	r1, #128	; 0x80
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f83a 	bl	8007c50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bdc:	e01c      	b.n	8006c18 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fbe1 	bl	80073a8 <USBD_CtlError>
              break;
 8006be6:	e017      	b.n	8006c18 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	885b      	ldrh	r3, [r3, #2]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d112      	bne.n	8006c16 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 f845 	bl	8007c8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc97 	bl	8007538 <USBD_CtlSendStatus>
              }
              break;
 8006c0a:	e004      	b.n	8006c16 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fbca 	bl	80073a8 <USBD_CtlError>
              break;
 8006c14:	e000      	b.n	8006c18 <USBD_StdEPReq+0x14c>
              break;
 8006c16:	bf00      	nop
          }
          break;
 8006c18:	e0aa      	b.n	8006d70 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d002      	beq.n	8006c2a <USBD_StdEPReq+0x15e>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d032      	beq.n	8006c8e <USBD_StdEPReq+0x1c2>
 8006c28:	e097      	b.n	8006d5a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d007      	beq.n	8006c40 <USBD_StdEPReq+0x174>
 8006c30:	7bbb      	ldrb	r3, [r7, #14]
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d004      	beq.n	8006c40 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fbb5 	bl	80073a8 <USBD_CtlError>
                break;
 8006c3e:	e091      	b.n	8006d64 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	da0b      	bge.n	8006c60 <USBD_StdEPReq+0x194>
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c4e:	4613      	mov	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4413      	add	r3, r2
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	3310      	adds	r3, #16
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	e00b      	b.n	8006c78 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c66:	4613      	mov	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4413      	add	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	3304      	adds	r3, #4
 8006c78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2202      	movs	r2, #2
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 fbf8 	bl	800747c <USBD_CtlSendData>
              break;
 8006c8c:	e06a      	b.n	8006d64 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	da11      	bge.n	8006cba <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	3318      	adds	r3, #24
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d117      	bne.n	8006ce0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fb78 	bl	80073a8 <USBD_CtlError>
                  break;
 8006cb8:	e054      	b.n	8006d64 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 fb65 	bl	80073a8 <USBD_CtlError>
                  break;
 8006cde:	e041      	b.n	8006d64 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da0b      	bge.n	8006d00 <USBD_StdEPReq+0x234>
 8006ce8:	7bbb      	ldrb	r3, [r7, #14]
 8006cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	3310      	adds	r3, #16
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	e00b      	b.n	8006d18 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d06:	4613      	mov	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	4413      	add	r3, r2
 8006d16:	3304      	adds	r3, #4
 8006d18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d1a:	7bbb      	ldrb	r3, [r7, #14]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <USBD_StdEPReq+0x25a>
 8006d20:	7bbb      	ldrb	r3, [r7, #14]
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d103      	bne.n	8006d2e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e00e      	b.n	8006d4c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	4619      	mov	r1, r3
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 ffca 	bl	8007ccc <USBD_LL_IsStallEP>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2201      	movs	r2, #1
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e002      	b.n	8006d4c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 fb92 	bl	800747c <USBD_CtlSendData>
              break;
 8006d58:	e004      	b.n	8006d64 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fb23 	bl	80073a8 <USBD_CtlError>
              break;
 8006d62:	bf00      	nop
          }
          break;
 8006d64:	e004      	b.n	8006d70 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8006d66:	6839      	ldr	r1, [r7, #0]
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f000 fb1d 	bl	80073a8 <USBD_CtlError>
          break;
 8006d6e:	bf00      	nop
      }
      break;
 8006d70:	e004      	b.n	8006d7c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fb17 	bl	80073a8 <USBD_CtlError>
      break;
 8006d7a:	bf00      	nop
  }

  return ret;
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	885b      	ldrh	r3, [r3, #2]
 8006da2:	0a1b      	lsrs	r3, r3, #8
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	2b06      	cmp	r3, #6
 8006daa:	f200 8128 	bhi.w	8006ffe <USBD_GetDescriptor+0x276>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBD_GetDescriptor+0x2c>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dd1 	.word	0x08006dd1
 8006db8:	08006de9 	.word	0x08006de9
 8006dbc:	08006e29 	.word	0x08006e29
 8006dc0:	08006fff 	.word	0x08006fff
 8006dc4:	08006fff 	.word	0x08006fff
 8006dc8:	08006f9f 	.word	0x08006f9f
 8006dcc:	08006fcb 	.word	0x08006fcb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	7c12      	ldrb	r2, [r2, #16]
 8006ddc:	f107 0108 	add.w	r1, r7, #8
 8006de0:	4610      	mov	r0, r2
 8006de2:	4798      	blx	r3
 8006de4:	60f8      	str	r0, [r7, #12]
      break;
 8006de6:	e112      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7c1b      	ldrb	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10d      	bne.n	8006e0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	f107 0208 	add.w	r2, r7, #8
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	4798      	blx	r3
 8006e00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	2202      	movs	r2, #2
 8006e08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e0a:	e100      	b.n	800700e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	f107 0208 	add.w	r2, r7, #8
 8006e18:	4610      	mov	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3301      	adds	r3, #1
 8006e22:	2202      	movs	r2, #2
 8006e24:	701a      	strb	r2, [r3, #0]
      break;
 8006e26:	e0f2      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	885b      	ldrh	r3, [r3, #2]
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b05      	cmp	r3, #5
 8006e30:	f200 80ac 	bhi.w	8006f8c <USBD_GetDescriptor+0x204>
 8006e34:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <USBD_GetDescriptor+0xb4>)
 8006e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3a:	bf00      	nop
 8006e3c:	08006e55 	.word	0x08006e55
 8006e40:	08006e89 	.word	0x08006e89
 8006e44:	08006ebd 	.word	0x08006ebd
 8006e48:	08006ef1 	.word	0x08006ef1
 8006e4c:	08006f25 	.word	0x08006f25
 8006e50:	08006f59 	.word	0x08006f59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7c12      	ldrb	r2, [r2, #16]
 8006e6c:	f107 0108 	add.w	r1, r7, #8
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e76:	e091      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa94 	bl	80073a8 <USBD_CtlError>
            err++;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	3301      	adds	r3, #1
 8006e84:	72fb      	strb	r3, [r7, #11]
          break;
 8006e86:	e089      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00b      	beq.n	8006eac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	7c12      	ldrb	r2, [r2, #16]
 8006ea0:	f107 0108 	add.w	r1, r7, #8
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4798      	blx	r3
 8006ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eaa:	e077      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fa7a 	bl	80073a8 <USBD_CtlError>
            err++;
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eba:	e06f      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00b      	beq.n	8006ee0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	7c12      	ldrb	r2, [r2, #16]
 8006ed4:	f107 0108 	add.w	r1, r7, #8
 8006ed8:	4610      	mov	r0, r2
 8006eda:	4798      	blx	r3
 8006edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ede:	e05d      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ee0:	6839      	ldr	r1, [r7, #0]
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa60 	bl	80073a8 <USBD_CtlError>
            err++;
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	3301      	adds	r3, #1
 8006eec:	72fb      	strb	r3, [r7, #11]
          break;
 8006eee:	e055      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e043      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa46 	bl	80073a8 <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e03b      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e029      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa2c 	bl	80073a8 <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e021      	b.n	8006f9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f6a:	699b      	ldr	r3, [r3, #24]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e00f      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa12 	bl	80073a8 <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e007      	b.n	8006f9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fa0a 	bl	80073a8 <USBD_CtlError>
          err++;
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	3301      	adds	r3, #1
 8006f98:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f9a:	e038      	b.n	800700e <USBD_GetDescriptor+0x286>
 8006f9c:	e037      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7c1b      	ldrb	r3, [r3, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f107 0208 	add.w	r2, r7, #8
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4798      	blx	r3
 8006fb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fb8:	e029      	b.n	800700e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9f3 	bl	80073a8 <USBD_CtlError>
        err++;
 8006fc2:	7afb      	ldrb	r3, [r7, #11]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc8:	e021      	b.n	800700e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7c1b      	ldrb	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10d      	bne.n	8006fee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fda:	f107 0208 	add.w	r2, r7, #8
 8006fde:	4610      	mov	r0, r2
 8006fe0:	4798      	blx	r3
 8006fe2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	2207      	movs	r2, #7
 8006fea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fec:	e00f      	b.n	800700e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f9d9 	bl	80073a8 <USBD_CtlError>
        err++;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	72fb      	strb	r3, [r7, #11]
      break;
 8006ffc:	e007      	b.n	800700e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f9d1 	bl	80073a8 <USBD_CtlError>
      err++;
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	3301      	adds	r3, #1
 800700a:	72fb      	strb	r3, [r7, #11]
      break;
 800700c:	bf00      	nop
  }

  if (err != 0U)
 800700e:	7afb      	ldrb	r3, [r7, #11]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d11c      	bne.n	800704e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d011      	beq.n	800703e <USBD_GetDescriptor+0x2b6>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	88da      	ldrh	r2, [r3, #6]
 8007026:	893b      	ldrh	r3, [r7, #8]
 8007028:	4293      	cmp	r3, r2
 800702a:	bf28      	it	cs
 800702c:	4613      	movcs	r3, r2
 800702e:	b29b      	uxth	r3, r3
 8007030:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007032:	893b      	ldrh	r3, [r7, #8]
 8007034:	461a      	mov	r2, r3
 8007036:	68f9      	ldr	r1, [r7, #12]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fa1f 	bl	800747c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	88db      	ldrh	r3, [r3, #6]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d104      	bne.n	8007050 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fa76 	bl	8007538 <USBD_CtlSendStatus>
 800704c:	e000      	b.n	8007050 <USBD_GetDescriptor+0x2c8>
    return;
 800704e:	bf00      	nop
    }
  }
}
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	889b      	ldrh	r3, [r3, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d130      	bne.n	80070cc <USBD_SetAddress+0x74>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	88db      	ldrh	r3, [r3, #6]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d12c      	bne.n	80070cc <USBD_SetAddress+0x74>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	2b7f      	cmp	r3, #127	; 0x7f
 8007078:	d828      	bhi.n	80070cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	885b      	ldrh	r3, [r3, #2]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007084:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708c:	2b03      	cmp	r3, #3
 800708e:	d104      	bne.n	800709a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f988 	bl	80073a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007098:	e01c      	b.n	80070d4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7bfa      	ldrb	r2, [r7, #15]
 800709e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4619      	mov	r1, r3
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fe35 	bl	8007d16 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa43 	bl	8007538 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d004      	beq.n	80070c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c0:	e008      	b.n	80070d4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ca:	e003      	b.n	80070d4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f96a 	bl	80073a8 <USBD_CtlError>
  }
}
 80070d4:	bf00      	nop
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	4b41      	ldr	r3, [pc, #260]	; (80071f4 <USBD_SetConfig+0x118>)
 80070ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070f0:	4b40      	ldr	r3, [pc, #256]	; (80071f4 <USBD_SetConfig+0x118>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d904      	bls.n	8007102 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f954 	bl	80073a8 <USBD_CtlError>
 8007100:	e075      	b.n	80071ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	2b02      	cmp	r3, #2
 800710a:	d002      	beq.n	8007112 <USBD_SetConfig+0x36>
 800710c:	2b03      	cmp	r3, #3
 800710e:	d023      	beq.n	8007158 <USBD_SetConfig+0x7c>
 8007110:	e062      	b.n	80071d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007112:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <USBD_SetConfig+0x118>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01a      	beq.n	8007150 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800711a:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <USBD_SetConfig+0x118>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800712c:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <USBD_SetConfig+0x118>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f9f3 	bl	800651e <USBD_SetClassConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d104      	bne.n	8007148 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f931 	bl	80073a8 <USBD_CtlError>
            return;
 8007146:	e052      	b.n	80071ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9f5 	bl	8007538 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800714e:	e04e      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9f1 	bl	8007538 <USBD_CtlSendStatus>
        break;
 8007156:	e04a      	b.n	80071ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007158:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d112      	bne.n	8007186 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007168:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <USBD_SetConfig+0x118>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <USBD_SetConfig+0x118>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff f9ef 	bl	800655c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f9da 	bl	8007538 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007184:	e033      	b.n	80071ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007186:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <USBD_SetConfig+0x118>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01d      	beq.n	80071d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff f9dd 	bl	800655c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <USBD_SetConfig+0x118>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <USBD_SetConfig+0x118>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff f9b3 	bl	800651e <USBD_SetClassConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d104      	bne.n	80071c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8f1 	bl	80073a8 <USBD_CtlError>
            return;
 80071c6:	e012      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f9b5 	bl	8007538 <USBD_CtlSendStatus>
        break;
 80071ce:	e00e      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9b1 	bl	8007538 <USBD_CtlSendStatus>
        break;
 80071d6:	e00a      	b.n	80071ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8e4 	bl	80073a8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <USBD_SetConfig+0x118>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f9b8 	bl	800655c <USBD_ClrClassConfig>
        break;
 80071ec:	bf00      	nop
    }
  }
}
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000200 	.word	0x20000200

080071f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88db      	ldrh	r3, [r3, #6]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d004      	beq.n	8007214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8cb 	bl	80073a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007212:	e021      	b.n	8007258 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721a:	2b01      	cmp	r3, #1
 800721c:	db17      	blt.n	800724e <USBD_GetConfig+0x56>
 800721e:	2b02      	cmp	r3, #2
 8007220:	dd02      	ble.n	8007228 <USBD_GetConfig+0x30>
 8007222:	2b03      	cmp	r3, #3
 8007224:	d00b      	beq.n	800723e <USBD_GetConfig+0x46>
 8007226:	e012      	b.n	800724e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3308      	adds	r3, #8
 8007232:	2201      	movs	r2, #1
 8007234:	4619      	mov	r1, r3
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f920 	bl	800747c <USBD_CtlSendData>
        break;
 800723c:	e00c      	b.n	8007258 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3304      	adds	r3, #4
 8007242:	2201      	movs	r2, #1
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f918 	bl	800747c <USBD_CtlSendData>
        break;
 800724c:	e004      	b.n	8007258 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f8a9 	bl	80073a8 <USBD_CtlError>
        break;
 8007256:	bf00      	nop
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007270:	3b01      	subs	r3, #1
 8007272:	2b02      	cmp	r3, #2
 8007274:	d81e      	bhi.n	80072b4 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	88db      	ldrh	r3, [r3, #6]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d004      	beq.n	8007288 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800727e:	6839      	ldr	r1, [r7, #0]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 f891 	bl	80073a8 <USBD_CtlError>
        break;
 8007286:	e01a      	b.n	80072be <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 0202 	orr.w	r2, r3, #2
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	330c      	adds	r3, #12
 80072a8:	2202      	movs	r2, #2
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8e5 	bl	800747c <USBD_CtlSendData>
      break;
 80072b2:	e004      	b.n	80072be <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072b4:	6839      	ldr	r1, [r7, #0]
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f876 	bl	80073a8 <USBD_CtlError>
      break;
 80072bc:	bf00      	nop
  }
}
 80072be:	bf00      	nop
 80072c0:	3708      	adds	r7, #8
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072c6:	b580      	push	{r7, lr}
 80072c8:	b082      	sub	sp, #8
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	885b      	ldrh	r3, [r3, #2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d106      	bne.n	80072e6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f929 	bl	8007538 <USBD_CtlSendStatus>
  }
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	3b01      	subs	r3, #1
 8007300:	2b02      	cmp	r3, #2
 8007302:	d80b      	bhi.n	800731c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	885b      	ldrh	r3, [r3, #2]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d10c      	bne.n	8007326 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f90f 	bl	8007538 <USBD_CtlSendStatus>
      }
      break;
 800731a:	e004      	b.n	8007326 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f842 	bl	80073a8 <USBD_CtlError>
      break;
 8007324:	e000      	b.n	8007328 <USBD_ClrFeature+0x3a>
      break;
 8007326:	bf00      	nop
  }
}
 8007328:	bf00      	nop
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	781a      	ldrb	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785a      	ldrb	r2, [r3, #1]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	3302      	adds	r3, #2
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	b29a      	uxth	r2, r3
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	3303      	adds	r3, #3
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	b29b      	uxth	r3, r3
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	b29b      	uxth	r3, r3
 800735e:	4413      	add	r3, r2
 8007360:	b29a      	uxth	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	3304      	adds	r3, #4
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	b29a      	uxth	r2, r3
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	3305      	adds	r3, #5
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	b29b      	uxth	r3, r3
 8007376:	021b      	lsls	r3, r3, #8
 8007378:	b29b      	uxth	r3, r3
 800737a:	4413      	add	r3, r2
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	3306      	adds	r3, #6
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	b29a      	uxth	r2, r3
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	3307      	adds	r3, #7
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	b29b      	uxth	r3, r3
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	4413      	add	r3, r2
 8007398:	b29a      	uxth	r2, r3
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	80da      	strh	r2, [r3, #6]

}
 800739e:	bf00      	nop
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bc80      	pop	{r7}
 80073a6:	4770      	bx	lr

080073a8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073b2:	2180      	movs	r1, #128	; 0x80
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fc4b 	bl	8007c50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073ba:	2100      	movs	r1, #0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fc47 	bl	8007c50 <USBD_LL_StallEP>
}
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	60f8      	str	r0, [r7, #12]
 80073d2:	60b9      	str	r1, [r7, #8]
 80073d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d032      	beq.n	8007446 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 f834 	bl	800744e <USBD_GetLen>
 80073e6:	4603      	mov	r3, r0
 80073e8:	3301      	adds	r3, #1
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	75fa      	strb	r2, [r7, #23]
 80073fa:	461a      	mov	r2, r3
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	4413      	add	r3, r2
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	75fa      	strb	r2, [r7, #23]
 800740c:	461a      	mov	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	4413      	add	r3, r2
 8007412:	2203      	movs	r2, #3
 8007414:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007416:	e012      	b.n	800743e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	60fa      	str	r2, [r7, #12]
 800741e:	7dfa      	ldrb	r2, [r7, #23]
 8007420:	1c51      	adds	r1, r2, #1
 8007422:	75f9      	strb	r1, [r7, #23]
 8007424:	4611      	mov	r1, r2
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	440a      	add	r2, r1
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	75fa      	strb	r2, [r7, #23]
 8007434:	461a      	mov	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4413      	add	r3, r2
 800743a:	2200      	movs	r2, #0
 800743c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1e8      	bne.n	8007418 <USBD_GetString+0x4e>
    }
  }
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800744e:	b480      	push	{r7}
 8007450:	b085      	sub	sp, #20
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800745a:	e005      	b.n	8007468 <USBD_GetLen+0x1a>
  {
    len++;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	3301      	adds	r3, #1
 8007460:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3301      	adds	r3, #1
 8007466:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1f5      	bne.n	800745c <USBD_GetLen+0xe>
  }

  return len;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	4613      	mov	r3, r2
 8007488:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2202      	movs	r2, #2
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007492:	88fa      	ldrh	r2, [r7, #6]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007498:	88fa      	ldrh	r2, [r7, #6]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	2100      	movs	r1, #0
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 fc55 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	4613      	mov	r3, r2
 80074c0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c2:	88fb      	ldrh	r3, [r7, #6]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	2100      	movs	r1, #0
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 fc43 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	4613      	mov	r3, r2
 80074e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2203      	movs	r2, #3
 80074ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	2100      	movs	r1, #0
 8007504:	68f8      	ldr	r0, [r7, #12]
 8007506:	f000 fc48 	bl	8007d9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	2100      	movs	r1, #0
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fc36 	bl	8007d9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2204      	movs	r2, #4
 8007544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007548:	2300      	movs	r3, #0
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fc00 	bl	8007d54 <USBD_LL_Transmit>

  return USBD_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800755e:	b580      	push	{r7, lr}
 8007560:	b082      	sub	sp, #8
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2205      	movs	r2, #5
 800756a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800756e:	2300      	movs	r3, #0
 8007570:	2200      	movs	r2, #0
 8007572:	2100      	movs	r1, #0
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fc10 	bl	8007d9a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007588:	2200      	movs	r2, #0
 800758a:	4912      	ldr	r1, [pc, #72]	; (80075d4 <MX_USB_DEVICE_Init+0x50>)
 800758c:	4812      	ldr	r0, [pc, #72]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 800758e:	f7fe ff6c 	bl	800646a <USBD_Init>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007598:	f7f9 f956 	bl	8000848 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800759c:	490f      	ldr	r1, [pc, #60]	; (80075dc <MX_USB_DEVICE_Init+0x58>)
 800759e:	480e      	ldr	r0, [pc, #56]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075a0:	f7fe ff8e 	bl	80064c0 <USBD_RegisterClass>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075aa:	f7f9 f94d 	bl	8000848 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075ae:	490c      	ldr	r1, [pc, #48]	; (80075e0 <MX_USB_DEVICE_Init+0x5c>)
 80075b0:	4809      	ldr	r0, [pc, #36]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075b2:	f7fe febf 	bl	8006334 <USBD_CDC_RegisterInterface>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d001      	beq.n	80075c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075bc:	f7f9 f944 	bl	8000848 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075c0:	4805      	ldr	r0, [pc, #20]	; (80075d8 <MX_USB_DEVICE_Init+0x54>)
 80075c2:	f7fe ff96 	bl	80064f2 <USBD_Start>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075cc:	f7f9 f93c 	bl	8000848 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075d0:	bf00      	nop
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	2000012c 	.word	0x2000012c
 80075d8:	20000594 	.word	0x20000594
 80075dc:	20000018 	.word	0x20000018
 80075e0:	2000011c 	.word	0x2000011c

080075e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075e8:	2200      	movs	r2, #0
 80075ea:	4905      	ldr	r1, [pc, #20]	; (8007600 <CDC_Init_FS+0x1c>)
 80075ec:	4805      	ldr	r0, [pc, #20]	; (8007604 <CDC_Init_FS+0x20>)
 80075ee:	f7fe feb7 	bl	8006360 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075f2:	4905      	ldr	r1, [pc, #20]	; (8007608 <CDC_Init_FS+0x24>)
 80075f4:	4803      	ldr	r0, [pc, #12]	; (8007604 <CDC_Init_FS+0x20>)
 80075f6:	f7fe fecc 	bl	8006392 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000c40 	.word	0x20000c40
 8007604:	20000594 	.word	0x20000594
 8007608:	20000858 	.word	0x20000858

0800760c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007610:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007612:	4618      	mov	r0, r3
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
	...

0800761c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
 8007628:	4613      	mov	r3, r2
 800762a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800762c:	79fb      	ldrb	r3, [r7, #7]
 800762e:	2b23      	cmp	r3, #35	; 0x23
 8007630:	d84a      	bhi.n	80076c8 <CDC_Control_FS+0xac>
 8007632:	a201      	add	r2, pc, #4	; (adr r2, 8007638 <CDC_Control_FS+0x1c>)
 8007634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007638:	080076c9 	.word	0x080076c9
 800763c:	080076c9 	.word	0x080076c9
 8007640:	080076c9 	.word	0x080076c9
 8007644:	080076c9 	.word	0x080076c9
 8007648:	080076c9 	.word	0x080076c9
 800764c:	080076c9 	.word	0x080076c9
 8007650:	080076c9 	.word	0x080076c9
 8007654:	080076c9 	.word	0x080076c9
 8007658:	080076c9 	.word	0x080076c9
 800765c:	080076c9 	.word	0x080076c9
 8007660:	080076c9 	.word	0x080076c9
 8007664:	080076c9 	.word	0x080076c9
 8007668:	080076c9 	.word	0x080076c9
 800766c:	080076c9 	.word	0x080076c9
 8007670:	080076c9 	.word	0x080076c9
 8007674:	080076c9 	.word	0x080076c9
 8007678:	080076c9 	.word	0x080076c9
 800767c:	080076c9 	.word	0x080076c9
 8007680:	080076c9 	.word	0x080076c9
 8007684:	080076c9 	.word	0x080076c9
 8007688:	080076c9 	.word	0x080076c9
 800768c:	080076c9 	.word	0x080076c9
 8007690:	080076c9 	.word	0x080076c9
 8007694:	080076c9 	.word	0x080076c9
 8007698:	080076c9 	.word	0x080076c9
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076c9 	.word	0x080076c9
 80076a8:	080076c9 	.word	0x080076c9
 80076ac:	080076c9 	.word	0x080076c9
 80076b0:	080076c9 	.word	0x080076c9
 80076b4:	080076c9 	.word	0x080076c9
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076c9 	.word	0x080076c9
 80076c0:	080076c9 	.word	0x080076c9
 80076c4:	080076c9 	.word	0x080076c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80076c8:	bf00      	nop
  }

  return (USBD_OK);
 80076ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop

080076d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_rx_flag = Buf[0];//Se guarda lo que llega en la variable externa CDC_rx_flag. declarada en el main
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	4b07      	ldr	r3, [pc, #28]	; (8007704 <CDC_Receive_FS+0x2c>)
 80076e8:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4806      	ldr	r0, [pc, #24]	; (8007708 <CDC_Receive_FS+0x30>)
 80076ee:	f7fe fe50 	bl	8006392 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076f2:	4805      	ldr	r0, [pc, #20]	; (8007708 <CDC_Receive_FS+0x30>)
 80076f4:	f7fe fe8f 	bl	8006416 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 80076f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	2000046c 	.word	0x2000046c
 8007708:	20000594 	.word	0x20000594

0800770c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	460b      	mov	r3, r1
 8007716:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <CDC_Transmit_FS+0x48>)
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007722:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800772e:	2301      	movs	r3, #1
 8007730:	e00b      	b.n	800774a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007732:	887b      	ldrh	r3, [r7, #2]
 8007734:	461a      	mov	r2, r3
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4806      	ldr	r0, [pc, #24]	; (8007754 <CDC_Transmit_FS+0x48>)
 800773a:	f7fe fe11 	bl	8006360 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800773e:	4805      	ldr	r0, [pc, #20]	; (8007754 <CDC_Transmit_FS+0x48>)
 8007740:	f7fe fe3a 	bl	80063b8 <USBD_CDC_TransmitPacket>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007748:	7bfb      	ldrb	r3, [r7, #15]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000594 	.word	0x20000594

08007758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2212      	movs	r2, #18
 8007768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800776a:	4b03      	ldr	r3, [pc, #12]	; (8007778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	bc80      	pop	{r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000148 	.word	0x20000148

0800777c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2204      	movs	r2, #4
 800778c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800778e:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000015c 	.word	0x2000015c

080077a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4907      	ldr	r1, [pc, #28]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077b6:	4808      	ldr	r0, [pc, #32]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077b8:	f7ff fe07 	bl	80073ca <USBD_GetString>
 80077bc:	e004      	b.n	80077c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077c4:	f7ff fe01 	bl	80073ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80077c8:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20001028 	.word	0x20001028
 80077d8:	080087e0 	.word	0x080087e0

080077dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077ec:	4804      	ldr	r0, [pc, #16]	; (8007800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077ee:	f7ff fdec 	bl	80073ca <USBD_GetString>
  return USBD_StrDesc;
 80077f2:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20001028 	.word	0x20001028
 8007800:	080087f8 	.word	0x080087f8

08007804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	221a      	movs	r2, #26
 8007814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007816:	f000 f843 	bl	80078a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800781a:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000160 	.word	0x20000160

08007828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d105      	bne.n	8007846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4907      	ldr	r1, [pc, #28]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800783e:	4808      	ldr	r0, [pc, #32]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007840:	f7ff fdc3 	bl	80073ca <USBD_GetString>
 8007844:	e004      	b.n	8007850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4904      	ldr	r1, [pc, #16]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800784a:	4805      	ldr	r0, [pc, #20]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800784c:	f7ff fdbd 	bl	80073ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20001028 	.word	0x20001028
 8007860:	0800880c 	.word	0x0800880c

08007864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4907      	ldr	r1, [pc, #28]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800787a:	4808      	ldr	r0, [pc, #32]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800787c:	f7ff fda5 	bl	80073ca <USBD_GetString>
 8007880:	e004      	b.n	800788c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007888:	f7ff fd9f 	bl	80073ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800788c:	4b02      	ldr	r3, [pc, #8]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20001028 	.word	0x20001028
 800789c:	08008818 	.word	0x08008818

080078a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <Get_SerialNum+0x44>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078ac:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <Get_SerialNum+0x48>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078b2:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <Get_SerialNum+0x4c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4413      	add	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d009      	beq.n	80078da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078c6:	2208      	movs	r2, #8
 80078c8:	4909      	ldr	r1, [pc, #36]	; (80078f0 <Get_SerialNum+0x50>)
 80078ca:	68f8      	ldr	r0, [r7, #12]
 80078cc:	f000 f814 	bl	80078f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078d0:	2204      	movs	r2, #4
 80078d2:	4908      	ldr	r1, [pc, #32]	; (80078f4 <Get_SerialNum+0x54>)
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f000 f80f 	bl	80078f8 <IntToUnicode>
  }
}
 80078da:	bf00      	nop
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	1ffff7e8 	.word	0x1ffff7e8
 80078e8:	1ffff7ec 	.word	0x1ffff7ec
 80078ec:	1ffff7f0 	.word	0x1ffff7f0
 80078f0:	20000162 	.word	0x20000162
 80078f4:	20000172 	.word	0x20000172

080078f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]
 800790e:	e027      	b.n	8007960 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	0f1b      	lsrs	r3, r3, #28
 8007914:	2b09      	cmp	r3, #9
 8007916:	d80b      	bhi.n	8007930 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	0f1b      	lsrs	r3, r3, #28
 800791c:	b2da      	uxtb	r2, r3
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	005b      	lsls	r3, r3, #1
 8007922:	4619      	mov	r1, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	440b      	add	r3, r1
 8007928:	3230      	adds	r2, #48	; 0x30
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	e00a      	b.n	8007946 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	0f1b      	lsrs	r3, r3, #28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4619      	mov	r1, r3
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	440b      	add	r3, r1
 8007940:	3237      	adds	r2, #55	; 0x37
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	011b      	lsls	r3, r3, #4
 800794a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800794c:	7dfb      	ldrb	r3, [r7, #23]
 800794e:	005b      	lsls	r3, r3, #1
 8007950:	3301      	adds	r3, #1
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	3301      	adds	r3, #1
 800795e:	75fb      	strb	r3, [r7, #23]
 8007960:	7dfa      	ldrb	r2, [r7, #23]
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3d3      	bcc.n	8007910 <IntToUnicode+0x18>
  }
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	bc80      	pop	{r7}
 8007970:	4770      	bx	lr
	...

08007974 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007974:	b480      	push	{r7}
 8007976:	b085      	sub	sp, #20
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a09      	ldr	r2, [pc, #36]	; (80079a8 <HAL_PCD_MspInit+0x34>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d10b      	bne.n	800799e <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <HAL_PCD_MspInit+0x38>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	4a08      	ldr	r2, [pc, #32]	; (80079ac <HAL_PCD_MspInit+0x38>)
 800798c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007990:	61d3      	str	r3, [r2, #28]
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <HAL_PCD_MspInit+0x38>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800799e:	bf00      	nop
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr
 80079a8:	40005c00 	.word	0x40005c00
 80079ac:	40021000 	.word	0x40021000

080079b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80079c4:	4619      	mov	r1, r3
 80079c6:	4610      	mov	r0, r2
 80079c8:	f7fe fddb 	bl	8006582 <USBD_LL_SetupStage>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	460b      	mov	r3, r1
 80079de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80079e6:	78fb      	ldrb	r3, [r7, #3]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7fe fe0e 	bl	8006618 <USBD_LL_DataOutStage>
}
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	015b      	lsls	r3, r3, #5
 8007a1c:	4413      	add	r3, r2
 8007a1e:	333c      	adds	r3, #60	; 0x3c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	78fb      	ldrb	r3, [r7, #3]
 8007a24:	4619      	mov	r1, r3
 8007a26:	f7fe fe68 	bl	80066fa <USBD_LL_DataInStage>
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe ff78 	bl	8006936 <USBD_LL_SOF>
}
 8007a46:	bf00      	nop
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b084      	sub	sp, #16
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007a56:	2301      	movs	r3, #1
 8007a58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d001      	beq.n	8007a66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007a62:	f7f8 fef1 	bl	8000848 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a6c:	7bfa      	ldrb	r2, [r7, #15]
 8007a6e:	4611      	mov	r1, r2
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe ff28 	bl	80068c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fee1 	bl	8006844 <USBD_LL_Reset>
}
 8007a82:	bf00      	nop
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7fe ff22 	bl	80068e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d005      	beq.n	8007ab4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007aa8:	4b04      	ldr	r3, [pc, #16]	; (8007abc <HAL_PCD_SuspendCallback+0x30>)
 8007aaa:	691b      	ldr	r3, [r3, #16]
 8007aac:	4a03      	ldr	r2, [pc, #12]	; (8007abc <HAL_PCD_SuspendCallback+0x30>)
 8007aae:	f043 0306 	orr.w	r3, r3, #6
 8007ab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ab4:	bf00      	nop
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	e000ed00 	.word	0xe000ed00

08007ac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe ff1c 	bl	800690c <USBD_LL_Resume>
}
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ae4:	4a28      	ldr	r2, [pc, #160]	; (8007b88 <USBD_LL_Init+0xac>)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a26      	ldr	r2, [pc, #152]	; (8007b88 <USBD_LL_Init+0xac>)
 8007af0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007af4:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <USBD_LL_Init+0xac>)
 8007af6:	4a25      	ldr	r2, [pc, #148]	; (8007b8c <USBD_LL_Init+0xb0>)
 8007af8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007afa:	4b23      	ldr	r3, [pc, #140]	; (8007b88 <USBD_LL_Init+0xac>)
 8007afc:	2208      	movs	r2, #8
 8007afe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b00:	4b21      	ldr	r3, [pc, #132]	; (8007b88 <USBD_LL_Init+0xac>)
 8007b02:	2202      	movs	r2, #2
 8007b04:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b06:	4b20      	ldr	r3, [pc, #128]	; (8007b88 <USBD_LL_Init+0xac>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b0c:	4b1e      	ldr	r3, [pc, #120]	; (8007b88 <USBD_LL_Init+0xac>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <USBD_LL_Init+0xac>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b18:	481b      	ldr	r0, [pc, #108]	; (8007b88 <USBD_LL_Init+0xac>)
 8007b1a:	f7fa fef5 	bl	8002908 <HAL_PCD_Init>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b24:	f7f8 fe90 	bl	8000848 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b2e:	2318      	movs	r3, #24
 8007b30:	2200      	movs	r2, #0
 8007b32:	2100      	movs	r1, #0
 8007b34:	f7fb fd8e 	bl	8003654 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b3e:	2358      	movs	r3, #88	; 0x58
 8007b40:	2200      	movs	r2, #0
 8007b42:	2180      	movs	r1, #128	; 0x80
 8007b44:	f7fb fd86 	bl	8003654 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b4e:	23c0      	movs	r3, #192	; 0xc0
 8007b50:	2200      	movs	r2, #0
 8007b52:	2181      	movs	r1, #129	; 0x81
 8007b54:	f7fb fd7e 	bl	8003654 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007b62:	2200      	movs	r2, #0
 8007b64:	2101      	movs	r1, #1
 8007b66:	f7fb fd75 	bl	8003654 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b74:	2200      	movs	r2, #0
 8007b76:	2182      	movs	r1, #130	; 0x82
 8007b78:	f7fb fd6c 	bl	8003654 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20001228 	.word	0x20001228
 8007b8c:	40005c00 	.word	0x40005c00

08007b90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fa ff8f 	bl	8002aca <HAL_PCD_Start>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bb0:	7bfb      	ldrb	r3, [r7, #15]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 f948 	bl	8007e48 <USBD_Get_USB_Status>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b084      	sub	sp, #16
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	4608      	mov	r0, r1
 8007bd0:	4611      	mov	r1, r2
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	70fb      	strb	r3, [r7, #3]
 8007bd8:	460b      	mov	r3, r1
 8007bda:	70bb      	strb	r3, [r7, #2]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bee:	78bb      	ldrb	r3, [r7, #2]
 8007bf0:	883a      	ldrh	r2, [r7, #0]
 8007bf2:	78f9      	ldrb	r1, [r7, #3]
 8007bf4:	f7fb f8c2 	bl	8002d7c <HAL_PCD_EP_Open>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 f922 	bl	8007e48 <USBD_Get_USB_Status>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fb f903 	bl	8002e3c <HAL_PCD_EP_Close>
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f903 	bl	8007e48 <USBD_Get_USB_Status>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c60:	2300      	movs	r3, #0
 8007c62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c6a:	78fa      	ldrb	r2, [r7, #3]
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fb f9ad 	bl	8002fce <HAL_PCD_EP_SetStall>
 8007c74:	4603      	mov	r3, r0
 8007c76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f8e4 	bl	8007e48 <USBD_Get_USB_Status>
 8007c80:	4603      	mov	r3, r0
 8007c82:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007c84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ca8:	78fa      	ldrb	r2, [r7, #3]
 8007caa:	4611      	mov	r1, r2
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fb f9e8 	bl	8003082 <HAL_PCD_EP_ClrStall>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f000 f8c5 	bl	8007e48 <USBD_Get_USB_Status>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cde:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007ce0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da08      	bge.n	8007cfa <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007ce8:	78fb      	ldrb	r3, [r7, #3]
 8007cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	015b      	lsls	r3, r3, #5
 8007cf2:	4413      	add	r3, r2
 8007cf4:	332a      	adds	r3, #42	; 0x2a
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	e008      	b.n	8007d0c <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	015b      	lsls	r3, r3, #5
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007d0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b084      	sub	sp, #16
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d30:	78fa      	ldrb	r2, [r7, #3]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fa fffc 	bl	8002d32 <HAL_PCD_SetAddress>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 f881 	bl	8007e48 <USBD_Get_USB_Status>
 8007d46:	4603      	mov	r3, r0
 8007d48:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007d4a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	607a      	str	r2, [r7, #4]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	460b      	mov	r3, r1
 8007d62:	72fb      	strb	r3, [r7, #11]
 8007d64:	4613      	mov	r3, r2
 8007d66:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d76:	893b      	ldrh	r3, [r7, #8]
 8007d78:	7af9      	ldrb	r1, [r7, #11]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	f7fb f8ee 	bl	8002f5c <HAL_PCD_EP_Transmit>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f85e 	bl	8007e48 <USBD_Get_USB_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8007d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b086      	sub	sp, #24
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	461a      	mov	r2, r3
 8007da6:	460b      	mov	r3, r1
 8007da8:	72fb      	strb	r3, [r7, #11]
 8007daa:	4613      	mov	r3, r2
 8007dac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db2:	2300      	movs	r3, #0
 8007db4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dbc:	893b      	ldrh	r3, [r7, #8]
 8007dbe:	7af9      	ldrb	r1, [r7, #11]
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	f7fb f87d 	bl	8002ec0 <HAL_PCD_EP_Receive>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 f83b 	bl	8007e48 <USBD_Get_USB_Status>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8007dd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3718      	adds	r7, #24
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007df2:	78fa      	ldrb	r2, [r7, #3]
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7fb f89c 	bl	8002f34 <HAL_PCD_EP_GetRxCount>
 8007dfc:	4603      	mov	r3, r0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <USBD_static_malloc+0x14>)
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr
 8007e1c:	20000204 	.word	0x20000204

08007e20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]

}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr

08007e32 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007e3e:	bf00      	nop
 8007e40:	370c      	adds	r7, #12
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr

08007e48 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e52:	2300      	movs	r3, #0
 8007e54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d817      	bhi.n	8007e8c <USBD_Get_USB_Status+0x44>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <USBD_Get_USB_Status+0x1c>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007e75 	.word	0x08007e75
 8007e68:	08007e7b 	.word	0x08007e7b
 8007e6c:	08007e81 	.word	0x08007e81
 8007e70:	08007e87 	.word	0x08007e87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
    break;
 8007e78:	e00b      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e7a:	2302      	movs	r3, #2
 8007e7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007e7e:	e008      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e80:	2301      	movs	r3, #1
 8007e82:	73fb      	strb	r3, [r7, #15]
    break;
 8007e84:	e005      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8a:	e002      	b.n	8007e92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e90:	bf00      	nop
  }
  return usb_status;
 8007e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bc80      	pop	{r7}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop

08007ea0 <__errno>:
 8007ea0:	4b01      	ldr	r3, [pc, #4]	; (8007ea8 <__errno+0x8>)
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	2000017c 	.word	0x2000017c

08007eac <__libc_init_array>:
 8007eac:	b570      	push	{r4, r5, r6, lr}
 8007eae:	2500      	movs	r5, #0
 8007eb0:	4e0c      	ldr	r6, [pc, #48]	; (8007ee4 <__libc_init_array+0x38>)
 8007eb2:	4c0d      	ldr	r4, [pc, #52]	; (8007ee8 <__libc_init_array+0x3c>)
 8007eb4:	1ba4      	subs	r4, r4, r6
 8007eb6:	10a4      	asrs	r4, r4, #2
 8007eb8:	42a5      	cmp	r5, r4
 8007eba:	d109      	bne.n	8007ed0 <__libc_init_array+0x24>
 8007ebc:	f000 fc34 	bl	8008728 <_init>
 8007ec0:	2500      	movs	r5, #0
 8007ec2:	4e0a      	ldr	r6, [pc, #40]	; (8007eec <__libc_init_array+0x40>)
 8007ec4:	4c0a      	ldr	r4, [pc, #40]	; (8007ef0 <__libc_init_array+0x44>)
 8007ec6:	1ba4      	subs	r4, r4, r6
 8007ec8:	10a4      	asrs	r4, r4, #2
 8007eca:	42a5      	cmp	r5, r4
 8007ecc:	d105      	bne.n	8007eda <__libc_init_array+0x2e>
 8007ece:	bd70      	pop	{r4, r5, r6, pc}
 8007ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ed4:	4798      	blx	r3
 8007ed6:	3501      	adds	r5, #1
 8007ed8:	e7ee      	b.n	8007eb8 <__libc_init_array+0xc>
 8007eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ede:	4798      	blx	r3
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	e7f2      	b.n	8007eca <__libc_init_array+0x1e>
 8007ee4:	08008874 	.word	0x08008874
 8007ee8:	08008874 	.word	0x08008874
 8007eec:	08008874 	.word	0x08008874
 8007ef0:	08008878 	.word	0x08008878

08007ef4 <memset>:
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4402      	add	r2, r0
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d100      	bne.n	8007efe <memset+0xa>
 8007efc:	4770      	bx	lr
 8007efe:	f803 1b01 	strb.w	r1, [r3], #1
 8007f02:	e7f9      	b.n	8007ef8 <memset+0x4>

08007f04 <siprintf>:
 8007f04:	b40e      	push	{r1, r2, r3}
 8007f06:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f0a:	b500      	push	{lr}
 8007f0c:	b09c      	sub	sp, #112	; 0x70
 8007f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f10:	9002      	str	r0, [sp, #8]
 8007f12:	9006      	str	r0, [sp, #24]
 8007f14:	9107      	str	r1, [sp, #28]
 8007f16:	9104      	str	r1, [sp, #16]
 8007f18:	4808      	ldr	r0, [pc, #32]	; (8007f3c <siprintf+0x38>)
 8007f1a:	4909      	ldr	r1, [pc, #36]	; (8007f40 <siprintf+0x3c>)
 8007f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f20:	9105      	str	r1, [sp, #20]
 8007f22:	6800      	ldr	r0, [r0, #0]
 8007f24:	a902      	add	r1, sp, #8
 8007f26:	9301      	str	r3, [sp, #4]
 8007f28:	f000 f866 	bl	8007ff8 <_svfiprintf_r>
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	9b02      	ldr	r3, [sp, #8]
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	b01c      	add	sp, #112	; 0x70
 8007f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f38:	b003      	add	sp, #12
 8007f3a:	4770      	bx	lr
 8007f3c:	2000017c 	.word	0x2000017c
 8007f40:	ffff0208 	.word	0xffff0208

08007f44 <__ssputs_r>:
 8007f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	688e      	ldr	r6, [r1, #8]
 8007f4a:	4682      	mov	sl, r0
 8007f4c:	429e      	cmp	r6, r3
 8007f4e:	460c      	mov	r4, r1
 8007f50:	4690      	mov	r8, r2
 8007f52:	4699      	mov	r9, r3
 8007f54:	d837      	bhi.n	8007fc6 <__ssputs_r+0x82>
 8007f56:	898a      	ldrh	r2, [r1, #12]
 8007f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f5c:	d031      	beq.n	8007fc2 <__ssputs_r+0x7e>
 8007f5e:	2302      	movs	r3, #2
 8007f60:	6825      	ldr	r5, [r4, #0]
 8007f62:	6909      	ldr	r1, [r1, #16]
 8007f64:	1a6f      	subs	r7, r5, r1
 8007f66:	6965      	ldr	r5, [r4, #20]
 8007f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f6c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007f70:	f109 0301 	add.w	r3, r9, #1
 8007f74:	443b      	add	r3, r7
 8007f76:	429d      	cmp	r5, r3
 8007f78:	bf38      	it	cc
 8007f7a:	461d      	movcc	r5, r3
 8007f7c:	0553      	lsls	r3, r2, #21
 8007f7e:	d530      	bpl.n	8007fe2 <__ssputs_r+0x9e>
 8007f80:	4629      	mov	r1, r5
 8007f82:	f000 fb37 	bl	80085f4 <_malloc_r>
 8007f86:	4606      	mov	r6, r0
 8007f88:	b950      	cbnz	r0, 8007fa0 <__ssputs_r+0x5c>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f90:	f8ca 3000 	str.w	r3, [sl]
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa0:	463a      	mov	r2, r7
 8007fa2:	6921      	ldr	r1, [r4, #16]
 8007fa4:	f000 fab6 	bl	8008514 <memcpy>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fb2:	81a3      	strh	r3, [r4, #12]
 8007fb4:	6126      	str	r6, [r4, #16]
 8007fb6:	443e      	add	r6, r7
 8007fb8:	6026      	str	r6, [r4, #0]
 8007fba:	464e      	mov	r6, r9
 8007fbc:	6165      	str	r5, [r4, #20]
 8007fbe:	1bed      	subs	r5, r5, r7
 8007fc0:	60a5      	str	r5, [r4, #8]
 8007fc2:	454e      	cmp	r6, r9
 8007fc4:	d900      	bls.n	8007fc8 <__ssputs_r+0x84>
 8007fc6:	464e      	mov	r6, r9
 8007fc8:	4632      	mov	r2, r6
 8007fca:	4641      	mov	r1, r8
 8007fcc:	6820      	ldr	r0, [r4, #0]
 8007fce:	f000 faac 	bl	800852a <memmove>
 8007fd2:	68a3      	ldr	r3, [r4, #8]
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	1b9b      	subs	r3, r3, r6
 8007fd8:	60a3      	str	r3, [r4, #8]
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	441e      	add	r6, r3
 8007fde:	6026      	str	r6, [r4, #0]
 8007fe0:	e7dc      	b.n	8007f9c <__ssputs_r+0x58>
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	f000 fb60 	bl	80086a8 <_realloc_r>
 8007fe8:	4606      	mov	r6, r0
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d1e2      	bne.n	8007fb4 <__ssputs_r+0x70>
 8007fee:	6921      	ldr	r1, [r4, #16]
 8007ff0:	4650      	mov	r0, sl
 8007ff2:	f000 fab3 	bl	800855c <_free_r>
 8007ff6:	e7c8      	b.n	8007f8a <__ssputs_r+0x46>

08007ff8 <_svfiprintf_r>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	461d      	mov	r5, r3
 8007ffe:	898b      	ldrh	r3, [r1, #12]
 8008000:	b09d      	sub	sp, #116	; 0x74
 8008002:	061f      	lsls	r7, r3, #24
 8008004:	4680      	mov	r8, r0
 8008006:	460c      	mov	r4, r1
 8008008:	4616      	mov	r6, r2
 800800a:	d50f      	bpl.n	800802c <_svfiprintf_r+0x34>
 800800c:	690b      	ldr	r3, [r1, #16]
 800800e:	b96b      	cbnz	r3, 800802c <_svfiprintf_r+0x34>
 8008010:	2140      	movs	r1, #64	; 0x40
 8008012:	f000 faef 	bl	80085f4 <_malloc_r>
 8008016:	6020      	str	r0, [r4, #0]
 8008018:	6120      	str	r0, [r4, #16]
 800801a:	b928      	cbnz	r0, 8008028 <_svfiprintf_r+0x30>
 800801c:	230c      	movs	r3, #12
 800801e:	f8c8 3000 	str.w	r3, [r8]
 8008022:	f04f 30ff 	mov.w	r0, #4294967295
 8008026:	e0c8      	b.n	80081ba <_svfiprintf_r+0x1c2>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	6163      	str	r3, [r4, #20]
 800802c:	2300      	movs	r3, #0
 800802e:	9309      	str	r3, [sp, #36]	; 0x24
 8008030:	2320      	movs	r3, #32
 8008032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008036:	2330      	movs	r3, #48	; 0x30
 8008038:	f04f 0b01 	mov.w	fp, #1
 800803c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008040:	9503      	str	r5, [sp, #12]
 8008042:	4637      	mov	r7, r6
 8008044:	463d      	mov	r5, r7
 8008046:	f815 3b01 	ldrb.w	r3, [r5], #1
 800804a:	b10b      	cbz	r3, 8008050 <_svfiprintf_r+0x58>
 800804c:	2b25      	cmp	r3, #37	; 0x25
 800804e:	d13e      	bne.n	80080ce <_svfiprintf_r+0xd6>
 8008050:	ebb7 0a06 	subs.w	sl, r7, r6
 8008054:	d00b      	beq.n	800806e <_svfiprintf_r+0x76>
 8008056:	4653      	mov	r3, sl
 8008058:	4632      	mov	r2, r6
 800805a:	4621      	mov	r1, r4
 800805c:	4640      	mov	r0, r8
 800805e:	f7ff ff71 	bl	8007f44 <__ssputs_r>
 8008062:	3001      	adds	r0, #1
 8008064:	f000 80a4 	beq.w	80081b0 <_svfiprintf_r+0x1b8>
 8008068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800806a:	4453      	add	r3, sl
 800806c:	9309      	str	r3, [sp, #36]	; 0x24
 800806e:	783b      	ldrb	r3, [r7, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 809d 	beq.w	80081b0 <_svfiprintf_r+0x1b8>
 8008076:	2300      	movs	r3, #0
 8008078:	f04f 32ff 	mov.w	r2, #4294967295
 800807c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008080:	9304      	str	r3, [sp, #16]
 8008082:	9307      	str	r3, [sp, #28]
 8008084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008088:	931a      	str	r3, [sp, #104]	; 0x68
 800808a:	462f      	mov	r7, r5
 800808c:	2205      	movs	r2, #5
 800808e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008092:	4850      	ldr	r0, [pc, #320]	; (80081d4 <_svfiprintf_r+0x1dc>)
 8008094:	f000 fa30 	bl	80084f8 <memchr>
 8008098:	9b04      	ldr	r3, [sp, #16]
 800809a:	b9d0      	cbnz	r0, 80080d2 <_svfiprintf_r+0xda>
 800809c:	06d9      	lsls	r1, r3, #27
 800809e:	bf44      	itt	mi
 80080a0:	2220      	movmi	r2, #32
 80080a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080a6:	071a      	lsls	r2, r3, #28
 80080a8:	bf44      	itt	mi
 80080aa:	222b      	movmi	r2, #43	; 0x2b
 80080ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80080b0:	782a      	ldrb	r2, [r5, #0]
 80080b2:	2a2a      	cmp	r2, #42	; 0x2a
 80080b4:	d015      	beq.n	80080e2 <_svfiprintf_r+0xea>
 80080b6:	462f      	mov	r7, r5
 80080b8:	2000      	movs	r0, #0
 80080ba:	250a      	movs	r5, #10
 80080bc:	9a07      	ldr	r2, [sp, #28]
 80080be:	4639      	mov	r1, r7
 80080c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080c4:	3b30      	subs	r3, #48	; 0x30
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d94d      	bls.n	8008166 <_svfiprintf_r+0x16e>
 80080ca:	b1b8      	cbz	r0, 80080fc <_svfiprintf_r+0x104>
 80080cc:	e00f      	b.n	80080ee <_svfiprintf_r+0xf6>
 80080ce:	462f      	mov	r7, r5
 80080d0:	e7b8      	b.n	8008044 <_svfiprintf_r+0x4c>
 80080d2:	4a40      	ldr	r2, [pc, #256]	; (80081d4 <_svfiprintf_r+0x1dc>)
 80080d4:	463d      	mov	r5, r7
 80080d6:	1a80      	subs	r0, r0, r2
 80080d8:	fa0b f000 	lsl.w	r0, fp, r0
 80080dc:	4318      	orrs	r0, r3
 80080de:	9004      	str	r0, [sp, #16]
 80080e0:	e7d3      	b.n	800808a <_svfiprintf_r+0x92>
 80080e2:	9a03      	ldr	r2, [sp, #12]
 80080e4:	1d11      	adds	r1, r2, #4
 80080e6:	6812      	ldr	r2, [r2, #0]
 80080e8:	9103      	str	r1, [sp, #12]
 80080ea:	2a00      	cmp	r2, #0
 80080ec:	db01      	blt.n	80080f2 <_svfiprintf_r+0xfa>
 80080ee:	9207      	str	r2, [sp, #28]
 80080f0:	e004      	b.n	80080fc <_svfiprintf_r+0x104>
 80080f2:	4252      	negs	r2, r2
 80080f4:	f043 0302 	orr.w	r3, r3, #2
 80080f8:	9207      	str	r2, [sp, #28]
 80080fa:	9304      	str	r3, [sp, #16]
 80080fc:	783b      	ldrb	r3, [r7, #0]
 80080fe:	2b2e      	cmp	r3, #46	; 0x2e
 8008100:	d10c      	bne.n	800811c <_svfiprintf_r+0x124>
 8008102:	787b      	ldrb	r3, [r7, #1]
 8008104:	2b2a      	cmp	r3, #42	; 0x2a
 8008106:	d133      	bne.n	8008170 <_svfiprintf_r+0x178>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	3702      	adds	r7, #2
 800810c:	1d1a      	adds	r2, r3, #4
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	9203      	str	r2, [sp, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfb8      	it	lt
 8008116:	f04f 33ff 	movlt.w	r3, #4294967295
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	4d2e      	ldr	r5, [pc, #184]	; (80081d8 <_svfiprintf_r+0x1e0>)
 800811e:	2203      	movs	r2, #3
 8008120:	7839      	ldrb	r1, [r7, #0]
 8008122:	4628      	mov	r0, r5
 8008124:	f000 f9e8 	bl	80084f8 <memchr>
 8008128:	b138      	cbz	r0, 800813a <_svfiprintf_r+0x142>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	1b40      	subs	r0, r0, r5
 800812e:	fa03 f000 	lsl.w	r0, r3, r0
 8008132:	9b04      	ldr	r3, [sp, #16]
 8008134:	3701      	adds	r7, #1
 8008136:	4303      	orrs	r3, r0
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	7839      	ldrb	r1, [r7, #0]
 800813c:	2206      	movs	r2, #6
 800813e:	4827      	ldr	r0, [pc, #156]	; (80081dc <_svfiprintf_r+0x1e4>)
 8008140:	1c7e      	adds	r6, r7, #1
 8008142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008146:	f000 f9d7 	bl	80084f8 <memchr>
 800814a:	2800      	cmp	r0, #0
 800814c:	d038      	beq.n	80081c0 <_svfiprintf_r+0x1c8>
 800814e:	4b24      	ldr	r3, [pc, #144]	; (80081e0 <_svfiprintf_r+0x1e8>)
 8008150:	bb13      	cbnz	r3, 8008198 <_svfiprintf_r+0x1a0>
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	3307      	adds	r3, #7
 8008156:	f023 0307 	bic.w	r3, r3, #7
 800815a:	3308      	adds	r3, #8
 800815c:	9303      	str	r3, [sp, #12]
 800815e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008160:	444b      	add	r3, r9
 8008162:	9309      	str	r3, [sp, #36]	; 0x24
 8008164:	e76d      	b.n	8008042 <_svfiprintf_r+0x4a>
 8008166:	fb05 3202 	mla	r2, r5, r2, r3
 800816a:	2001      	movs	r0, #1
 800816c:	460f      	mov	r7, r1
 800816e:	e7a6      	b.n	80080be <_svfiprintf_r+0xc6>
 8008170:	2300      	movs	r3, #0
 8008172:	250a      	movs	r5, #10
 8008174:	4619      	mov	r1, r3
 8008176:	3701      	adds	r7, #1
 8008178:	9305      	str	r3, [sp, #20]
 800817a:	4638      	mov	r0, r7
 800817c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008180:	3a30      	subs	r2, #48	; 0x30
 8008182:	2a09      	cmp	r2, #9
 8008184:	d903      	bls.n	800818e <_svfiprintf_r+0x196>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0c8      	beq.n	800811c <_svfiprintf_r+0x124>
 800818a:	9105      	str	r1, [sp, #20]
 800818c:	e7c6      	b.n	800811c <_svfiprintf_r+0x124>
 800818e:	fb05 2101 	mla	r1, r5, r1, r2
 8008192:	2301      	movs	r3, #1
 8008194:	4607      	mov	r7, r0
 8008196:	e7f0      	b.n	800817a <_svfiprintf_r+0x182>
 8008198:	ab03      	add	r3, sp, #12
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	4622      	mov	r2, r4
 800819e:	4b11      	ldr	r3, [pc, #68]	; (80081e4 <_svfiprintf_r+0x1ec>)
 80081a0:	a904      	add	r1, sp, #16
 80081a2:	4640      	mov	r0, r8
 80081a4:	f3af 8000 	nop.w
 80081a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80081ac:	4681      	mov	r9, r0
 80081ae:	d1d6      	bne.n	800815e <_svfiprintf_r+0x166>
 80081b0:	89a3      	ldrh	r3, [r4, #12]
 80081b2:	065b      	lsls	r3, r3, #25
 80081b4:	f53f af35 	bmi.w	8008022 <_svfiprintf_r+0x2a>
 80081b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081ba:	b01d      	add	sp, #116	; 0x74
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c0:	ab03      	add	r3, sp, #12
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4622      	mov	r2, r4
 80081c6:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <_svfiprintf_r+0x1ec>)
 80081c8:	a904      	add	r1, sp, #16
 80081ca:	4640      	mov	r0, r8
 80081cc:	f000 f882 	bl	80082d4 <_printf_i>
 80081d0:	e7ea      	b.n	80081a8 <_svfiprintf_r+0x1b0>
 80081d2:	bf00      	nop
 80081d4:	08008840 	.word	0x08008840
 80081d8:	08008846 	.word	0x08008846
 80081dc:	0800884a 	.word	0x0800884a
 80081e0:	00000000 	.word	0x00000000
 80081e4:	08007f45 	.word	0x08007f45

080081e8 <_printf_common>:
 80081e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ec:	4691      	mov	r9, r2
 80081ee:	461f      	mov	r7, r3
 80081f0:	688a      	ldr	r2, [r1, #8]
 80081f2:	690b      	ldr	r3, [r1, #16]
 80081f4:	4606      	mov	r6, r0
 80081f6:	4293      	cmp	r3, r2
 80081f8:	bfb8      	it	lt
 80081fa:	4613      	movlt	r3, r2
 80081fc:	f8c9 3000 	str.w	r3, [r9]
 8008200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008204:	460c      	mov	r4, r1
 8008206:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800820a:	b112      	cbz	r2, 8008212 <_printf_common+0x2a>
 800820c:	3301      	adds	r3, #1
 800820e:	f8c9 3000 	str.w	r3, [r9]
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	0699      	lsls	r1, r3, #26
 8008216:	bf42      	ittt	mi
 8008218:	f8d9 3000 	ldrmi.w	r3, [r9]
 800821c:	3302      	addmi	r3, #2
 800821e:	f8c9 3000 	strmi.w	r3, [r9]
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	f015 0506 	ands.w	r5, r5, #6
 8008228:	d107      	bne.n	800823a <_printf_common+0x52>
 800822a:	f104 0a19 	add.w	sl, r4, #25
 800822e:	68e3      	ldr	r3, [r4, #12]
 8008230:	f8d9 2000 	ldr.w	r2, [r9]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	42ab      	cmp	r3, r5
 8008238:	dc29      	bgt.n	800828e <_printf_common+0xa6>
 800823a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800823e:	6822      	ldr	r2, [r4, #0]
 8008240:	3300      	adds	r3, #0
 8008242:	bf18      	it	ne
 8008244:	2301      	movne	r3, #1
 8008246:	0692      	lsls	r2, r2, #26
 8008248:	d42e      	bmi.n	80082a8 <_printf_common+0xc0>
 800824a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800824e:	4639      	mov	r1, r7
 8008250:	4630      	mov	r0, r6
 8008252:	47c0      	blx	r8
 8008254:	3001      	adds	r0, #1
 8008256:	d021      	beq.n	800829c <_printf_common+0xb4>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	68e5      	ldr	r5, [r4, #12]
 800825c:	f003 0306 	and.w	r3, r3, #6
 8008260:	2b04      	cmp	r3, #4
 8008262:	bf18      	it	ne
 8008264:	2500      	movne	r5, #0
 8008266:	f8d9 2000 	ldr.w	r2, [r9]
 800826a:	f04f 0900 	mov.w	r9, #0
 800826e:	bf08      	it	eq
 8008270:	1aad      	subeq	r5, r5, r2
 8008272:	68a3      	ldr	r3, [r4, #8]
 8008274:	6922      	ldr	r2, [r4, #16]
 8008276:	bf08      	it	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	4293      	cmp	r3, r2
 800827e:	bfc4      	itt	gt
 8008280:	1a9b      	subgt	r3, r3, r2
 8008282:	18ed      	addgt	r5, r5, r3
 8008284:	341a      	adds	r4, #26
 8008286:	454d      	cmp	r5, r9
 8008288:	d11a      	bne.n	80082c0 <_printf_common+0xd8>
 800828a:	2000      	movs	r0, #0
 800828c:	e008      	b.n	80082a0 <_printf_common+0xb8>
 800828e:	2301      	movs	r3, #1
 8008290:	4652      	mov	r2, sl
 8008292:	4639      	mov	r1, r7
 8008294:	4630      	mov	r0, r6
 8008296:	47c0      	blx	r8
 8008298:	3001      	adds	r0, #1
 800829a:	d103      	bne.n	80082a4 <_printf_common+0xbc>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a4:	3501      	adds	r5, #1
 80082a6:	e7c2      	b.n	800822e <_printf_common+0x46>
 80082a8:	2030      	movs	r0, #48	; 0x30
 80082aa:	18e1      	adds	r1, r4, r3
 80082ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b6:	4422      	add	r2, r4
 80082b8:	3302      	adds	r3, #2
 80082ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082be:	e7c4      	b.n	800824a <_printf_common+0x62>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4622      	mov	r2, r4
 80082c4:	4639      	mov	r1, r7
 80082c6:	4630      	mov	r0, r6
 80082c8:	47c0      	blx	r8
 80082ca:	3001      	adds	r0, #1
 80082cc:	d0e6      	beq.n	800829c <_printf_common+0xb4>
 80082ce:	f109 0901 	add.w	r9, r9, #1
 80082d2:	e7d8      	b.n	8008286 <_printf_common+0x9e>

080082d4 <_printf_i>:
 80082d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082dc:	460c      	mov	r4, r1
 80082de:	7e09      	ldrb	r1, [r1, #24]
 80082e0:	b085      	sub	sp, #20
 80082e2:	296e      	cmp	r1, #110	; 0x6e
 80082e4:	4617      	mov	r7, r2
 80082e6:	4606      	mov	r6, r0
 80082e8:	4698      	mov	r8, r3
 80082ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ec:	f000 80b3 	beq.w	8008456 <_printf_i+0x182>
 80082f0:	d822      	bhi.n	8008338 <_printf_i+0x64>
 80082f2:	2963      	cmp	r1, #99	; 0x63
 80082f4:	d036      	beq.n	8008364 <_printf_i+0x90>
 80082f6:	d80a      	bhi.n	800830e <_printf_i+0x3a>
 80082f8:	2900      	cmp	r1, #0
 80082fa:	f000 80b9 	beq.w	8008470 <_printf_i+0x19c>
 80082fe:	2958      	cmp	r1, #88	; 0x58
 8008300:	f000 8083 	beq.w	800840a <_printf_i+0x136>
 8008304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008308:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800830c:	e032      	b.n	8008374 <_printf_i+0xa0>
 800830e:	2964      	cmp	r1, #100	; 0x64
 8008310:	d001      	beq.n	8008316 <_printf_i+0x42>
 8008312:	2969      	cmp	r1, #105	; 0x69
 8008314:	d1f6      	bne.n	8008304 <_printf_i+0x30>
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	6813      	ldr	r3, [r2, #0]
 800831a:	0605      	lsls	r5, r0, #24
 800831c:	f103 0104 	add.w	r1, r3, #4
 8008320:	d52a      	bpl.n	8008378 <_printf_i+0xa4>
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6011      	str	r1, [r2, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	da03      	bge.n	8008332 <_printf_i+0x5e>
 800832a:	222d      	movs	r2, #45	; 0x2d
 800832c:	425b      	negs	r3, r3
 800832e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008332:	486f      	ldr	r0, [pc, #444]	; (80084f0 <_printf_i+0x21c>)
 8008334:	220a      	movs	r2, #10
 8008336:	e039      	b.n	80083ac <_printf_i+0xd8>
 8008338:	2973      	cmp	r1, #115	; 0x73
 800833a:	f000 809d 	beq.w	8008478 <_printf_i+0x1a4>
 800833e:	d808      	bhi.n	8008352 <_printf_i+0x7e>
 8008340:	296f      	cmp	r1, #111	; 0x6f
 8008342:	d020      	beq.n	8008386 <_printf_i+0xb2>
 8008344:	2970      	cmp	r1, #112	; 0x70
 8008346:	d1dd      	bne.n	8008304 <_printf_i+0x30>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	f043 0320 	orr.w	r3, r3, #32
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	e003      	b.n	800835a <_printf_i+0x86>
 8008352:	2975      	cmp	r1, #117	; 0x75
 8008354:	d017      	beq.n	8008386 <_printf_i+0xb2>
 8008356:	2978      	cmp	r1, #120	; 0x78
 8008358:	d1d4      	bne.n	8008304 <_printf_i+0x30>
 800835a:	2378      	movs	r3, #120	; 0x78
 800835c:	4865      	ldr	r0, [pc, #404]	; (80084f4 <_printf_i+0x220>)
 800835e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008362:	e055      	b.n	8008410 <_printf_i+0x13c>
 8008364:	6813      	ldr	r3, [r2, #0]
 8008366:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800836a:	1d19      	adds	r1, r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6011      	str	r1, [r2, #0]
 8008370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008374:	2301      	movs	r3, #1
 8008376:	e08c      	b.n	8008492 <_printf_i+0x1be>
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800837e:	6011      	str	r1, [r2, #0]
 8008380:	bf18      	it	ne
 8008382:	b21b      	sxthne	r3, r3
 8008384:	e7cf      	b.n	8008326 <_printf_i+0x52>
 8008386:	6813      	ldr	r3, [r2, #0]
 8008388:	6825      	ldr	r5, [r4, #0]
 800838a:	1d18      	adds	r0, r3, #4
 800838c:	6010      	str	r0, [r2, #0]
 800838e:	0628      	lsls	r0, r5, #24
 8008390:	d501      	bpl.n	8008396 <_printf_i+0xc2>
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	e002      	b.n	800839c <_printf_i+0xc8>
 8008396:	0668      	lsls	r0, r5, #25
 8008398:	d5fb      	bpl.n	8008392 <_printf_i+0xbe>
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	296f      	cmp	r1, #111	; 0x6f
 800839e:	bf14      	ite	ne
 80083a0:	220a      	movne	r2, #10
 80083a2:	2208      	moveq	r2, #8
 80083a4:	4852      	ldr	r0, [pc, #328]	; (80084f0 <_printf_i+0x21c>)
 80083a6:	2100      	movs	r1, #0
 80083a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083ac:	6865      	ldr	r5, [r4, #4]
 80083ae:	2d00      	cmp	r5, #0
 80083b0:	60a5      	str	r5, [r4, #8]
 80083b2:	f2c0 8095 	blt.w	80084e0 <_printf_i+0x20c>
 80083b6:	6821      	ldr	r1, [r4, #0]
 80083b8:	f021 0104 	bic.w	r1, r1, #4
 80083bc:	6021      	str	r1, [r4, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d13d      	bne.n	800843e <_printf_i+0x16a>
 80083c2:	2d00      	cmp	r5, #0
 80083c4:	f040 808e 	bne.w	80084e4 <_printf_i+0x210>
 80083c8:	4665      	mov	r5, ip
 80083ca:	2a08      	cmp	r2, #8
 80083cc:	d10b      	bne.n	80083e6 <_printf_i+0x112>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	07db      	lsls	r3, r3, #31
 80083d2:	d508      	bpl.n	80083e6 <_printf_i+0x112>
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	6862      	ldr	r2, [r4, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	bfde      	ittt	le
 80083dc:	2330      	movle	r3, #48	; 0x30
 80083de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083e6:	ebac 0305 	sub.w	r3, ip, r5
 80083ea:	6123      	str	r3, [r4, #16]
 80083ec:	f8cd 8000 	str.w	r8, [sp]
 80083f0:	463b      	mov	r3, r7
 80083f2:	aa03      	add	r2, sp, #12
 80083f4:	4621      	mov	r1, r4
 80083f6:	4630      	mov	r0, r6
 80083f8:	f7ff fef6 	bl	80081e8 <_printf_common>
 80083fc:	3001      	adds	r0, #1
 80083fe:	d14d      	bne.n	800849c <_printf_i+0x1c8>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	b005      	add	sp, #20
 8008406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840a:	4839      	ldr	r0, [pc, #228]	; (80084f0 <_printf_i+0x21c>)
 800840c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008410:	6813      	ldr	r3, [r2, #0]
 8008412:	6821      	ldr	r1, [r4, #0]
 8008414:	1d1d      	adds	r5, r3, #4
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	6015      	str	r5, [r2, #0]
 800841a:	060a      	lsls	r2, r1, #24
 800841c:	d50b      	bpl.n	8008436 <_printf_i+0x162>
 800841e:	07ca      	lsls	r2, r1, #31
 8008420:	bf44      	itt	mi
 8008422:	f041 0120 	orrmi.w	r1, r1, #32
 8008426:	6021      	strmi	r1, [r4, #0]
 8008428:	b91b      	cbnz	r3, 8008432 <_printf_i+0x15e>
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	f022 0220 	bic.w	r2, r2, #32
 8008430:	6022      	str	r2, [r4, #0]
 8008432:	2210      	movs	r2, #16
 8008434:	e7b7      	b.n	80083a6 <_printf_i+0xd2>
 8008436:	064d      	lsls	r5, r1, #25
 8008438:	bf48      	it	mi
 800843a:	b29b      	uxthmi	r3, r3
 800843c:	e7ef      	b.n	800841e <_printf_i+0x14a>
 800843e:	4665      	mov	r5, ip
 8008440:	fbb3 f1f2 	udiv	r1, r3, r2
 8008444:	fb02 3311 	mls	r3, r2, r1, r3
 8008448:	5cc3      	ldrb	r3, [r0, r3]
 800844a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800844e:	460b      	mov	r3, r1
 8008450:	2900      	cmp	r1, #0
 8008452:	d1f5      	bne.n	8008440 <_printf_i+0x16c>
 8008454:	e7b9      	b.n	80083ca <_printf_i+0xf6>
 8008456:	6813      	ldr	r3, [r2, #0]
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	1d18      	adds	r0, r3, #4
 800845c:	6961      	ldr	r1, [r4, #20]
 800845e:	6010      	str	r0, [r2, #0]
 8008460:	0628      	lsls	r0, r5, #24
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	d501      	bpl.n	800846a <_printf_i+0x196>
 8008466:	6019      	str	r1, [r3, #0]
 8008468:	e002      	b.n	8008470 <_printf_i+0x19c>
 800846a:	066a      	lsls	r2, r5, #25
 800846c:	d5fb      	bpl.n	8008466 <_printf_i+0x192>
 800846e:	8019      	strh	r1, [r3, #0]
 8008470:	2300      	movs	r3, #0
 8008472:	4665      	mov	r5, ip
 8008474:	6123      	str	r3, [r4, #16]
 8008476:	e7b9      	b.n	80083ec <_printf_i+0x118>
 8008478:	6813      	ldr	r3, [r2, #0]
 800847a:	1d19      	adds	r1, r3, #4
 800847c:	6011      	str	r1, [r2, #0]
 800847e:	681d      	ldr	r5, [r3, #0]
 8008480:	6862      	ldr	r2, [r4, #4]
 8008482:	2100      	movs	r1, #0
 8008484:	4628      	mov	r0, r5
 8008486:	f000 f837 	bl	80084f8 <memchr>
 800848a:	b108      	cbz	r0, 8008490 <_printf_i+0x1bc>
 800848c:	1b40      	subs	r0, r0, r5
 800848e:	6060      	str	r0, [r4, #4]
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	2300      	movs	r3, #0
 8008496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849a:	e7a7      	b.n	80083ec <_printf_i+0x118>
 800849c:	6923      	ldr	r3, [r4, #16]
 800849e:	462a      	mov	r2, r5
 80084a0:	4639      	mov	r1, r7
 80084a2:	4630      	mov	r0, r6
 80084a4:	47c0      	blx	r8
 80084a6:	3001      	adds	r0, #1
 80084a8:	d0aa      	beq.n	8008400 <_printf_i+0x12c>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	079b      	lsls	r3, r3, #30
 80084ae:	d413      	bmi.n	80084d8 <_printf_i+0x204>
 80084b0:	68e0      	ldr	r0, [r4, #12]
 80084b2:	9b03      	ldr	r3, [sp, #12]
 80084b4:	4298      	cmp	r0, r3
 80084b6:	bfb8      	it	lt
 80084b8:	4618      	movlt	r0, r3
 80084ba:	e7a3      	b.n	8008404 <_printf_i+0x130>
 80084bc:	2301      	movs	r3, #1
 80084be:	464a      	mov	r2, r9
 80084c0:	4639      	mov	r1, r7
 80084c2:	4630      	mov	r0, r6
 80084c4:	47c0      	blx	r8
 80084c6:	3001      	adds	r0, #1
 80084c8:	d09a      	beq.n	8008400 <_printf_i+0x12c>
 80084ca:	3501      	adds	r5, #1
 80084cc:	68e3      	ldr	r3, [r4, #12]
 80084ce:	9a03      	ldr	r2, [sp, #12]
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	42ab      	cmp	r3, r5
 80084d4:	dcf2      	bgt.n	80084bc <_printf_i+0x1e8>
 80084d6:	e7eb      	b.n	80084b0 <_printf_i+0x1dc>
 80084d8:	2500      	movs	r5, #0
 80084da:	f104 0919 	add.w	r9, r4, #25
 80084de:	e7f5      	b.n	80084cc <_printf_i+0x1f8>
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1ac      	bne.n	800843e <_printf_i+0x16a>
 80084e4:	7803      	ldrb	r3, [r0, #0]
 80084e6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084ee:	e76c      	b.n	80083ca <_printf_i+0xf6>
 80084f0:	08008851 	.word	0x08008851
 80084f4:	08008862 	.word	0x08008862

080084f8 <memchr>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	b2c9      	uxtb	r1, r1
 80084fc:	4402      	add	r2, r0
 80084fe:	4290      	cmp	r0, r2
 8008500:	4603      	mov	r3, r0
 8008502:	d101      	bne.n	8008508 <memchr+0x10>
 8008504:	2300      	movs	r3, #0
 8008506:	e003      	b.n	8008510 <memchr+0x18>
 8008508:	781c      	ldrb	r4, [r3, #0]
 800850a:	3001      	adds	r0, #1
 800850c:	428c      	cmp	r4, r1
 800850e:	d1f6      	bne.n	80084fe <memchr+0x6>
 8008510:	4618      	mov	r0, r3
 8008512:	bd10      	pop	{r4, pc}

08008514 <memcpy>:
 8008514:	b510      	push	{r4, lr}
 8008516:	1e43      	subs	r3, r0, #1
 8008518:	440a      	add	r2, r1
 800851a:	4291      	cmp	r1, r2
 800851c:	d100      	bne.n	8008520 <memcpy+0xc>
 800851e:	bd10      	pop	{r4, pc}
 8008520:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008524:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008528:	e7f7      	b.n	800851a <memcpy+0x6>

0800852a <memmove>:
 800852a:	4288      	cmp	r0, r1
 800852c:	b510      	push	{r4, lr}
 800852e:	eb01 0302 	add.w	r3, r1, r2
 8008532:	d807      	bhi.n	8008544 <memmove+0x1a>
 8008534:	1e42      	subs	r2, r0, #1
 8008536:	4299      	cmp	r1, r3
 8008538:	d00a      	beq.n	8008550 <memmove+0x26>
 800853a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800853e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008542:	e7f8      	b.n	8008536 <memmove+0xc>
 8008544:	4283      	cmp	r3, r0
 8008546:	d9f5      	bls.n	8008534 <memmove+0xa>
 8008548:	1881      	adds	r1, r0, r2
 800854a:	1ad2      	subs	r2, r2, r3
 800854c:	42d3      	cmn	r3, r2
 800854e:	d100      	bne.n	8008552 <memmove+0x28>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008556:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800855a:	e7f7      	b.n	800854c <memmove+0x22>

0800855c <_free_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4605      	mov	r5, r0
 8008560:	2900      	cmp	r1, #0
 8008562:	d043      	beq.n	80085ec <_free_r+0x90>
 8008564:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008568:	1f0c      	subs	r4, r1, #4
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfb8      	it	lt
 800856e:	18e4      	addlt	r4, r4, r3
 8008570:	f000 f8d0 	bl	8008714 <__malloc_lock>
 8008574:	4a1e      	ldr	r2, [pc, #120]	; (80085f0 <_free_r+0x94>)
 8008576:	6813      	ldr	r3, [r2, #0]
 8008578:	4610      	mov	r0, r2
 800857a:	b933      	cbnz	r3, 800858a <_free_r+0x2e>
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	6014      	str	r4, [r2, #0]
 8008580:	4628      	mov	r0, r5
 8008582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008586:	f000 b8c6 	b.w	8008716 <__malloc_unlock>
 800858a:	42a3      	cmp	r3, r4
 800858c:	d90b      	bls.n	80085a6 <_free_r+0x4a>
 800858e:	6821      	ldr	r1, [r4, #0]
 8008590:	1862      	adds	r2, r4, r1
 8008592:	4293      	cmp	r3, r2
 8008594:	bf01      	itttt	eq
 8008596:	681a      	ldreq	r2, [r3, #0]
 8008598:	685b      	ldreq	r3, [r3, #4]
 800859a:	1852      	addeq	r2, r2, r1
 800859c:	6022      	streq	r2, [r4, #0]
 800859e:	6063      	str	r3, [r4, #4]
 80085a0:	6004      	str	r4, [r0, #0]
 80085a2:	e7ed      	b.n	8008580 <_free_r+0x24>
 80085a4:	4613      	mov	r3, r2
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	b10a      	cbz	r2, 80085ae <_free_r+0x52>
 80085aa:	42a2      	cmp	r2, r4
 80085ac:	d9fa      	bls.n	80085a4 <_free_r+0x48>
 80085ae:	6819      	ldr	r1, [r3, #0]
 80085b0:	1858      	adds	r0, r3, r1
 80085b2:	42a0      	cmp	r0, r4
 80085b4:	d10b      	bne.n	80085ce <_free_r+0x72>
 80085b6:	6820      	ldr	r0, [r4, #0]
 80085b8:	4401      	add	r1, r0
 80085ba:	1858      	adds	r0, r3, r1
 80085bc:	4282      	cmp	r2, r0
 80085be:	6019      	str	r1, [r3, #0]
 80085c0:	d1de      	bne.n	8008580 <_free_r+0x24>
 80085c2:	6810      	ldr	r0, [r2, #0]
 80085c4:	6852      	ldr	r2, [r2, #4]
 80085c6:	4401      	add	r1, r0
 80085c8:	6019      	str	r1, [r3, #0]
 80085ca:	605a      	str	r2, [r3, #4]
 80085cc:	e7d8      	b.n	8008580 <_free_r+0x24>
 80085ce:	d902      	bls.n	80085d6 <_free_r+0x7a>
 80085d0:	230c      	movs	r3, #12
 80085d2:	602b      	str	r3, [r5, #0]
 80085d4:	e7d4      	b.n	8008580 <_free_r+0x24>
 80085d6:	6820      	ldr	r0, [r4, #0]
 80085d8:	1821      	adds	r1, r4, r0
 80085da:	428a      	cmp	r2, r1
 80085dc:	bf01      	itttt	eq
 80085de:	6811      	ldreq	r1, [r2, #0]
 80085e0:	6852      	ldreq	r2, [r2, #4]
 80085e2:	1809      	addeq	r1, r1, r0
 80085e4:	6021      	streq	r1, [r4, #0]
 80085e6:	6062      	str	r2, [r4, #4]
 80085e8:	605c      	str	r4, [r3, #4]
 80085ea:	e7c9      	b.n	8008580 <_free_r+0x24>
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20000424 	.word	0x20000424

080085f4 <_malloc_r>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	1ccd      	adds	r5, r1, #3
 80085f8:	f025 0503 	bic.w	r5, r5, #3
 80085fc:	3508      	adds	r5, #8
 80085fe:	2d0c      	cmp	r5, #12
 8008600:	bf38      	it	cc
 8008602:	250c      	movcc	r5, #12
 8008604:	2d00      	cmp	r5, #0
 8008606:	4606      	mov	r6, r0
 8008608:	db01      	blt.n	800860e <_malloc_r+0x1a>
 800860a:	42a9      	cmp	r1, r5
 800860c:	d903      	bls.n	8008616 <_malloc_r+0x22>
 800860e:	230c      	movs	r3, #12
 8008610:	6033      	str	r3, [r6, #0]
 8008612:	2000      	movs	r0, #0
 8008614:	bd70      	pop	{r4, r5, r6, pc}
 8008616:	f000 f87d 	bl	8008714 <__malloc_lock>
 800861a:	4a21      	ldr	r2, [pc, #132]	; (80086a0 <_malloc_r+0xac>)
 800861c:	6814      	ldr	r4, [r2, #0]
 800861e:	4621      	mov	r1, r4
 8008620:	b991      	cbnz	r1, 8008648 <_malloc_r+0x54>
 8008622:	4c20      	ldr	r4, [pc, #128]	; (80086a4 <_malloc_r+0xb0>)
 8008624:	6823      	ldr	r3, [r4, #0]
 8008626:	b91b      	cbnz	r3, 8008630 <_malloc_r+0x3c>
 8008628:	4630      	mov	r0, r6
 800862a:	f000 f863 	bl	80086f4 <_sbrk_r>
 800862e:	6020      	str	r0, [r4, #0]
 8008630:	4629      	mov	r1, r5
 8008632:	4630      	mov	r0, r6
 8008634:	f000 f85e 	bl	80086f4 <_sbrk_r>
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d124      	bne.n	8008686 <_malloc_r+0x92>
 800863c:	230c      	movs	r3, #12
 800863e:	4630      	mov	r0, r6
 8008640:	6033      	str	r3, [r6, #0]
 8008642:	f000 f868 	bl	8008716 <__malloc_unlock>
 8008646:	e7e4      	b.n	8008612 <_malloc_r+0x1e>
 8008648:	680b      	ldr	r3, [r1, #0]
 800864a:	1b5b      	subs	r3, r3, r5
 800864c:	d418      	bmi.n	8008680 <_malloc_r+0x8c>
 800864e:	2b0b      	cmp	r3, #11
 8008650:	d90f      	bls.n	8008672 <_malloc_r+0x7e>
 8008652:	600b      	str	r3, [r1, #0]
 8008654:	18cc      	adds	r4, r1, r3
 8008656:	50cd      	str	r5, [r1, r3]
 8008658:	4630      	mov	r0, r6
 800865a:	f000 f85c 	bl	8008716 <__malloc_unlock>
 800865e:	f104 000b 	add.w	r0, r4, #11
 8008662:	1d23      	adds	r3, r4, #4
 8008664:	f020 0007 	bic.w	r0, r0, #7
 8008668:	1ac3      	subs	r3, r0, r3
 800866a:	d0d3      	beq.n	8008614 <_malloc_r+0x20>
 800866c:	425a      	negs	r2, r3
 800866e:	50e2      	str	r2, [r4, r3]
 8008670:	e7d0      	b.n	8008614 <_malloc_r+0x20>
 8008672:	684b      	ldr	r3, [r1, #4]
 8008674:	428c      	cmp	r4, r1
 8008676:	bf16      	itet	ne
 8008678:	6063      	strne	r3, [r4, #4]
 800867a:	6013      	streq	r3, [r2, #0]
 800867c:	460c      	movne	r4, r1
 800867e:	e7eb      	b.n	8008658 <_malloc_r+0x64>
 8008680:	460c      	mov	r4, r1
 8008682:	6849      	ldr	r1, [r1, #4]
 8008684:	e7cc      	b.n	8008620 <_malloc_r+0x2c>
 8008686:	1cc4      	adds	r4, r0, #3
 8008688:	f024 0403 	bic.w	r4, r4, #3
 800868c:	42a0      	cmp	r0, r4
 800868e:	d005      	beq.n	800869c <_malloc_r+0xa8>
 8008690:	1a21      	subs	r1, r4, r0
 8008692:	4630      	mov	r0, r6
 8008694:	f000 f82e 	bl	80086f4 <_sbrk_r>
 8008698:	3001      	adds	r0, #1
 800869a:	d0cf      	beq.n	800863c <_malloc_r+0x48>
 800869c:	6025      	str	r5, [r4, #0]
 800869e:	e7db      	b.n	8008658 <_malloc_r+0x64>
 80086a0:	20000424 	.word	0x20000424
 80086a4:	20000428 	.word	0x20000428

080086a8 <_realloc_r>:
 80086a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086aa:	4607      	mov	r7, r0
 80086ac:	4614      	mov	r4, r2
 80086ae:	460e      	mov	r6, r1
 80086b0:	b921      	cbnz	r1, 80086bc <_realloc_r+0x14>
 80086b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80086b6:	4611      	mov	r1, r2
 80086b8:	f7ff bf9c 	b.w	80085f4 <_malloc_r>
 80086bc:	b922      	cbnz	r2, 80086c8 <_realloc_r+0x20>
 80086be:	f7ff ff4d 	bl	800855c <_free_r>
 80086c2:	4625      	mov	r5, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c8:	f000 f826 	bl	8008718 <_malloc_usable_size_r>
 80086cc:	42a0      	cmp	r0, r4
 80086ce:	d20f      	bcs.n	80086f0 <_realloc_r+0x48>
 80086d0:	4621      	mov	r1, r4
 80086d2:	4638      	mov	r0, r7
 80086d4:	f7ff ff8e 	bl	80085f4 <_malloc_r>
 80086d8:	4605      	mov	r5, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0f2      	beq.n	80086c4 <_realloc_r+0x1c>
 80086de:	4631      	mov	r1, r6
 80086e0:	4622      	mov	r2, r4
 80086e2:	f7ff ff17 	bl	8008514 <memcpy>
 80086e6:	4631      	mov	r1, r6
 80086e8:	4638      	mov	r0, r7
 80086ea:	f7ff ff37 	bl	800855c <_free_r>
 80086ee:	e7e9      	b.n	80086c4 <_realloc_r+0x1c>
 80086f0:	4635      	mov	r5, r6
 80086f2:	e7e7      	b.n	80086c4 <_realloc_r+0x1c>

080086f4 <_sbrk_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	2300      	movs	r3, #0
 80086f8:	4c05      	ldr	r4, [pc, #20]	; (8008710 <_sbrk_r+0x1c>)
 80086fa:	4605      	mov	r5, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	6023      	str	r3, [r4, #0]
 8008700:	f7f8 f9f4 	bl	8000aec <_sbrk>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_sbrk_r+0x1a>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	b103      	cbz	r3, 800870e <_sbrk_r+0x1a>
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	20001494 	.word	0x20001494

08008714 <__malloc_lock>:
 8008714:	4770      	bx	lr

08008716 <__malloc_unlock>:
 8008716:	4770      	bx	lr

08008718 <_malloc_usable_size_r>:
 8008718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800871c:	1f18      	subs	r0, r3, #4
 800871e:	2b00      	cmp	r3, #0
 8008720:	bfbc      	itt	lt
 8008722:	580b      	ldrlt	r3, [r1, r0]
 8008724:	18c0      	addlt	r0, r0, r3
 8008726:	4770      	bx	lr

08008728 <_init>:
 8008728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800872a:	bf00      	nop
 800872c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872e:	bc08      	pop	{r3}
 8008730:	469e      	mov	lr, r3
 8008732:	4770      	bx	lr

08008734 <_fini>:
 8008734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008736:	bf00      	nop
 8008738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800873a:	bc08      	pop	{r3}
 800873c:	469e      	mov	lr, r3
 800873e:	4770      	bx	lr
