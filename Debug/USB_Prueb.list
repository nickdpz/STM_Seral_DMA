
USB_Prueb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007270  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007444  08007444  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007444  08007444  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007444  08007444  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800744c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b0  200001e4  08007630  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001494  08007630  00021494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a5a  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003283  00000000  00000000  00037c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003aef0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003c160  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017777  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001017e  00000000  00000000  000549df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000773d9  00000000  00000000  00064b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbf36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc4  00000000  00000000  000dbfb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	08007364 	.word	0x08007364

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	08007364 	.word	0x08007364

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fc54 	bl	80009fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f87c 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fa20 	bl	800059c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f006 f830 	bl	80061c0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000160:	f000 f90c 	bl	800037c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000164:	f000 f980 	bl	8000468 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000168:	f000 f9ca 	bl	8000500 <MX_TIM4_Init>
  MX_I2C2_Init();
 800016c:	f000 f8d8 	bl	8000320 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000170:	f000 f8c9 	bl	8000306 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_Delay(100);
 8000174:	2064      	movs	r0, #100	; 0x64
 8000176:	f000 fca3 	bl	8000ac0 <HAL_Delay>
	  	CDC_tx_size=sprintf(CDC_tx_buff,"Scanning I2C bus:\r\n");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 800017a:	4a2d      	ldr	r2, [pc, #180]	; (8000230 <main+0xe4>)
 800017c:	4b2d      	ldr	r3, [pc, #180]	; (8000234 <main+0xe8>)
 800017e:	4615      	mov	r5, r2
 8000180:	461c      	mov	r4, r3
 8000182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000184:	6028      	str	r0, [r5, #0]
 8000186:	6069      	str	r1, [r5, #4]
 8000188:	60aa      	str	r2, [r5, #8]
 800018a:	60eb      	str	r3, [r5, #12]
 800018c:	6820      	ldr	r0, [r4, #0]
 800018e:	6128      	str	r0, [r5, #16]
 8000190:	2313      	movs	r3, #19
 8000192:	b2da      	uxtb	r2, r3
 8000194:	4b28      	ldr	r3, [pc, #160]	; (8000238 <main+0xec>)
 8000196:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000198:	4b27      	ldr	r3, [pc, #156]	; (8000238 <main+0xec>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	b29b      	uxth	r3, r3
 800019e:	4619      	mov	r1, r3
 80001a0:	4823      	ldr	r0, [pc, #140]	; (8000230 <main+0xe4>)
 80001a2:	f006 f8d1 	bl	8006348 <CDC_Transmit_FS>
	  	for (i=1; i<128; i++)
 80001a6:	4b25      	ldr	r3, [pc, #148]	; (800023c <main+0xf0>)
 80001a8:	2201      	movs	r2, #1
 80001aa:	701a      	strb	r2, [r3, #0]
 80001ac:	e03a      	b.n	8000224 <main+0xd8>
	  	{
	  		result = HAL_I2C_IsDeviceReady(&hi2c2,i<<1,1,1);
 80001ae:	4b23      	ldr	r3, [pc, #140]	; (800023c <main+0xf0>)
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	b29b      	uxth	r3, r3
 80001b4:	005b      	lsls	r3, r3, #1
 80001b6:	b299      	uxth	r1, r3
 80001b8:	2301      	movs	r3, #1
 80001ba:	2201      	movs	r2, #1
 80001bc:	4820      	ldr	r0, [pc, #128]	; (8000240 <main+0xf4>)
 80001be:	f001 f849 	bl	8001254 <HAL_I2C_IsDeviceReady>
 80001c2:	4603      	mov	r3, r0
 80001c4:	461a      	mov	r2, r3
 80001c6:	4b1f      	ldr	r3, [pc, #124]	; (8000244 <main+0xf8>)
 80001c8:	601a      	str	r2, [r3, #0]
	  		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001ca:	4b1e      	ldr	r3, [pc, #120]	; (8000244 <main+0xf8>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d122      	bne.n	8000218 <main+0xcc>
	  		{
	  			//CDC_tx_size=sprintf(CDC_tx_buff,".");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
	  			//CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
	  		}else{
	  			CDC_tx_size=sprintf(CDC_tx_buff,"\r\n");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <main+0xe4>)
 80001d4:	4a1c      	ldr	r2, [pc, #112]	; (8000248 <main+0xfc>)
 80001d6:	8811      	ldrh	r1, [r2, #0]
 80001d8:	7892      	ldrb	r2, [r2, #2]
 80001da:	8019      	strh	r1, [r3, #0]
 80001dc:	709a      	strb	r2, [r3, #2]
 80001de:	2302      	movs	r3, #2
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b15      	ldr	r3, [pc, #84]	; (8000238 <main+0xec>)
 80001e4:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <main+0xec>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	b29b      	uxth	r3, r3
 80001ec:	4619      	mov	r1, r3
 80001ee:	4810      	ldr	r0, [pc, #64]	; (8000230 <main+0xe4>)
 80001f0:	f006 f8aa 	bl	8006348 <CDC_Transmit_FS>
	  			CDC_tx_size=sprintf(CDC_tx_buff,"0x%X", i);//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <main+0xf0>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	461a      	mov	r2, r3
 80001fa:	4914      	ldr	r1, [pc, #80]	; (800024c <main+0x100>)
 80001fc:	480c      	ldr	r0, [pc, #48]	; (8000230 <main+0xe4>)
 80001fe:	f006 fc9f 	bl	8006b40 <siprintf>
 8000202:	4603      	mov	r3, r0
 8000204:	b2da      	uxtb	r2, r3
 8000206:	4b0c      	ldr	r3, [pc, #48]	; (8000238 <main+0xec>)
 8000208:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS((uint8_t *)CDC_tx_buff,CDC_tx_size);//Transmite por USB
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <main+0xec>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	b29b      	uxth	r3, r3
 8000210:	4619      	mov	r1, r3
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <main+0xe4>)
 8000214:	f006 f898 	bl	8006348 <CDC_Transmit_FS>
	  	for (i=1; i<128; i++)
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <main+0xf0>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	3301      	adds	r3, #1
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b06      	ldr	r3, [pc, #24]	; (800023c <main+0xf0>)
 8000222:	701a      	strb	r2, [r3, #0]
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <main+0xf0>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	b25b      	sxtb	r3, r3
 800022a:	2b00      	cmp	r3, #0
 800022c:	dabf      	bge.n	80001ae <main+0x62>
	  	HAL_Delay(100);
 800022e:	e7a1      	b.n	8000174 <main+0x28>
 8000230:	200004c8 	.word	0x200004c8
 8000234:	0800737c 	.word	0x0800737c
 8000238:	20000544 	.word	0x20000544
 800023c:	20000000 	.word	0x20000000
 8000240:	20000474 	.word	0x20000474
 8000244:	20000548 	.word	0x20000548
 8000248:	08007390 	.word	0x08007390
 800024c:	08007394 	.word	0x08007394

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f006 fc66 	bl	8006b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800029c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 f82e 	bl	8002308 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b2:	f000 f9cb 	bl	800064c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2101      	movs	r1, #1
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 fa98 	bl	8002808 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002de:	f000 f9b5 	bl	800064c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002e2:	2310      	movs	r3, #16
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002ea:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fc12 	bl	8002b18 <HAL_RCCEx_PeriphCLKConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002fa:	f000 f9a7 	bl	800064c <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3750      	adds	r7, #80	; 0x50
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}

08000306 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800030a:	2200      	movs	r2, #0
 800030c:	2100      	movs	r1, #0
 800030e:	2014      	movs	r0, #20
 8000310:	f000 fccf 	bl	8000cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000314:	2014      	movs	r0, #20
 8000316:	f000 fce8 	bl	8000cea <HAL_NVIC_EnableIRQ>
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
	...

08000320 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <MX_I2C2_Init+0x50>)
 8000326:	4a13      	ldr	r2, [pc, #76]	; (8000374 <MX_I2C2_Init+0x54>)
 8000328:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800032a:	4b11      	ldr	r3, [pc, #68]	; (8000370 <MX_I2C2_Init+0x50>)
 800032c:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_I2C2_Init+0x58>)
 800032e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000330:	4b0f      	ldr	r3, [pc, #60]	; (8000370 <MX_I2C2_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000336:	4b0e      	ldr	r3, [pc, #56]	; (8000370 <MX_I2C2_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <MX_I2C2_Init+0x50>)
 800033e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000342:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000344:	4b0a      	ldr	r3, [pc, #40]	; (8000370 <MX_I2C2_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800034a:	4b09      	ldr	r3, [pc, #36]	; (8000370 <MX_I2C2_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <MX_I2C2_Init+0x50>)
 8000352:	2200      	movs	r2, #0
 8000354:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <MX_I2C2_Init+0x50>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035c:	4804      	ldr	r0, [pc, #16]	; (8000370 <MX_I2C2_Init+0x50>)
 800035e:	f000 fe51 	bl	8001004 <HAL_I2C_Init>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000368:	f000 f970 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000474 	.word	0x20000474
 8000374:	40005800 	.word	0x40005800
 8000378:	000186a0 	.word	0x000186a0

0800037c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b08e      	sub	sp, #56	; 0x38
 8000380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000390:	f107 0320 	add.w	r3, r7, #32
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039a:	1d3b      	adds	r3, r7, #4
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
 80003a8:	615a      	str	r2, [r3, #20]
 80003aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ac:	4b2d      	ldr	r3, [pc, #180]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80003b4:	4b2b      	ldr	r3, [pc, #172]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003b6:	2230      	movs	r2, #48	; 0x30
 80003b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	4b2a      	ldr	r3, [pc, #168]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80003c0:	4b28      	ldr	r3, [pc, #160]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c8:	4b26      	ldr	r3, [pc, #152]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ce:	4b25      	ldr	r3, [pc, #148]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003d0:	2280      	movs	r2, #128	; 0x80
 80003d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d4:	4823      	ldr	r0, [pc, #140]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003d6:	f002 fc55 	bl	8002c84 <HAL_TIM_Base_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003e0:	f000 f934 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ee:	4619      	mov	r1, r3
 80003f0:	481c      	ldr	r0, [pc, #112]	; (8000464 <MX_TIM2_Init+0xe8>)
 80003f2:	f002 fe75 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003fc:	f000 f926 	bl	800064c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000400:	4818      	ldr	r0, [pc, #96]	; (8000464 <MX_TIM2_Init+0xe8>)
 8000402:	f002 fc6a 	bl	8002cda <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800040c:	f000 f91e 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000414:	2300      	movs	r3, #0
 8000416:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000418:	f107 0320 	add.w	r3, r7, #32
 800041c:	4619      	mov	r1, r3
 800041e:	4811      	ldr	r0, [pc, #68]	; (8000464 <MX_TIM2_Init+0xe8>)
 8000420:	f003 f9c2 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800042a:	f000 f90f 	bl	800064c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800042e:	2360      	movs	r3, #96	; 0x60
 8000430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 8000432:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2200      	movs	r2, #0
 8000444:	4619      	mov	r1, r3
 8000446:	4807      	ldr	r0, [pc, #28]	; (8000464 <MX_TIM2_Init+0xe8>)
 8000448:	f002 fd84 	bl	8002f54 <HAL_TIM_PWM_ConfigChannel>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000452:	f000 f8fb 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <MX_TIM2_Init+0xe8>)
 8000458:	f000 f9cc 	bl	80007f4 <HAL_TIM_MspPostInit>

}
 800045c:	bf00      	nop
 800045e:	3738      	adds	r7, #56	; 0x38
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	2000054c 	.word	0x2000054c

08000468 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800047c:	463b      	mov	r3, r7
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000484:	4b1c      	ldr	r3, [pc, #112]	; (80004f8 <MX_TIM3_Init+0x90>)
 8000486:	4a1d      	ldr	r2, [pc, #116]	; (80004fc <MX_TIM3_Init+0x94>)
 8000488:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800048a:	4b1b      	ldr	r3, [pc, #108]	; (80004f8 <MX_TIM3_Init+0x90>)
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000490:	4b19      	ldr	r3, [pc, #100]	; (80004f8 <MX_TIM3_Init+0x90>)
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000496:	4b18      	ldr	r3, [pc, #96]	; (80004f8 <MX_TIM3_Init+0x90>)
 8000498:	2200      	movs	r2, #0
 800049a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800049c:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <MX_TIM3_Init+0x90>)
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <MX_TIM3_Init+0x90>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <MX_TIM3_Init+0x90>)
 80004aa:	f002 fbeb 	bl	8002c84 <HAL_TIM_Base_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80004b4:	f000 f8ca 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4619      	mov	r1, r3
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <MX_TIM3_Init+0x90>)
 80004c6:	f002 fe0b 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80004d0:	f000 f8bc 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2300      	movs	r3, #0
 80004d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	4619      	mov	r1, r3
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_TIM3_Init+0x90>)
 80004e2:	f003 f961 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80004ec:	f000 f8ae 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	3718      	adds	r7, #24
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000504 	.word	0x20000504
 80004fc:	40000400 	.word	0x40000400

08000500 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000506:	f107 0308 	add.w	r3, r7, #8
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000514:	463b      	mov	r3, r7
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_TIM4_Init+0x94>)
 800051e:	4a1e      	ldr	r2, [pc, #120]	; (8000598 <MX_TIM4_Init+0x98>)
 8000520:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 8000522:	4b1c      	ldr	r3, [pc, #112]	; (8000594 <MX_TIM4_Init+0x94>)
 8000524:	2230      	movs	r2, #48	; 0x30
 8000526:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000528:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_TIM4_Init+0x94>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 800052e:	4b19      	ldr	r3, [pc, #100]	; (8000594 <MX_TIM4_Init+0x94>)
 8000530:	f247 5230 	movw	r2, #30000	; 0x7530
 8000534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_TIM4_Init+0x94>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_TIM4_Init+0x94>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000542:	4814      	ldr	r0, [pc, #80]	; (8000594 <MX_TIM4_Init+0x94>)
 8000544:	f002 fb9e 	bl	8002c84 <HAL_TIM_Base_Init>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800054e:	f000 f87d 	bl	800064c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000552:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000556:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4619      	mov	r1, r3
 800055e:	480d      	ldr	r0, [pc, #52]	; (8000594 <MX_TIM4_Init+0x94>)
 8000560:	f002 fdbe 	bl	80030e0 <HAL_TIM_ConfigClockSource>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800056a:	f000 f86f 	bl	800064c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000572:	2300      	movs	r3, #0
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <MX_TIM4_Init+0x94>)
 800057c:	f003 f914 	bl	80037a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000586:	f000 f861 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000430 	.word	0x20000430
 8000598:	40000800 	.word	0x40000800

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a23      	ldr	r2, [pc, #140]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1d      	ldr	r2, [pc, #116]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a17      	ldr	r2, [pc, #92]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a11      	ldr	r2, [pc, #68]	; (8000644 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_GPIO_Init+0xac>)
 8000618:	f000 fcdc 	bl	8000fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <MX_GPIO_Init+0xac>)
 8000636:	f000 fb73 	bl	8000d20 <HAL_GPIO_Init>

}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40011000 	.word	0x40011000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <HAL_MspInit+0x6c>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a18      	ldr	r2, [pc, #96]	; (80006c4 <HAL_MspInit+0x6c>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6193      	str	r3, [r2, #24]
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <HAL_MspInit+0x6c>)
 800066c:	699b      	ldr	r3, [r3, #24]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <HAL_MspInit+0x6c>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a12      	ldr	r2, [pc, #72]	; (80006c4 <HAL_MspInit+0x6c>)
 800067c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <HAL_MspInit+0x6c>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2005      	movs	r0, #5
 8000694:	f000 fb0d 	bl	8000cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000698:	2005      	movs	r0, #5
 800069a:	f000 fb26 	bl	8000cea <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_MspInit+0x70>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	4a04      	ldr	r2, [pc, #16]	; (80006c8 <HAL_MspInit+0x70>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a16      	ldr	r2, [pc, #88]	; (8000740 <HAL_I2C_MspInit+0x74>)
 80006e8:	4293      	cmp	r3, r2
 80006ea:	d124      	bne.n	8000736 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_I2C_MspInit+0x78>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a14      	ldr	r2, [pc, #80]	; (8000744 <HAL_I2C_MspInit+0x78>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_I2C_MspInit+0x78>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0308 	and.w	r3, r3, #8
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000704:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000708:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070a:	2312      	movs	r3, #18
 800070c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800070e:	2303      	movs	r3, #3
 8000710:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4619      	mov	r1, r3
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <HAL_I2C_MspInit+0x7c>)
 800071a:	f000 fb01 	bl	8000d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_I2C_MspInit+0x78>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_I2C_MspInit+0x78>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_I2C_MspInit+0x78>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3720      	adds	r7, #32
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40005800 	.word	0x40005800
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00

0800074c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800075c:	d114      	bne.n	8000788 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075e:	4b22      	ldr	r3, [pc, #136]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	201c      	movs	r0, #28
 800077c:	f000 fa99 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000780:	201c      	movs	r0, #28
 8000782:	f000 fab2 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000786:	e02a      	b.n	80007de <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_TIM_Base_MspInit+0xa0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10c      	bne.n	80007ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	61d3      	str	r3, [r2, #28]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
}
 80007aa:	e018      	b.n	80007de <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <HAL_TIM_Base_MspInit+0xa4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d113      	bne.n	80007de <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 80007b8:	69db      	ldr	r3, [r3, #28]
 80007ba:	4a0b      	ldr	r2, [pc, #44]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	61d3      	str	r3, [r2, #28]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_TIM_Base_MspInit+0x9c>)
 80007c4:	69db      	ldr	r3, [r3, #28]
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	201e      	movs	r0, #30
 80007d4:	f000 fa6d 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007d8:	201e      	movs	r0, #30
 80007da:	f000 fa86 	bl	8000cea <HAL_NVIC_EnableIRQ>
}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40000400 	.word	0x40000400
 80007f0:	40000800 	.word	0x40000800

080007f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000812:	d117      	bne.n	8000844 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000814:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_TIM_MspPostInit+0x58>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_TIM_MspPostInit+0x58>)
 800081a:	f043 0304 	orr.w	r3, r3, #4
 800081e:	6193      	str	r3, [r2, #24]
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <HAL_TIM_MspPostInit+0x58>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Motor_1_Pin;
 800082c:	2301      	movs	r3, #1
 800082e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Motor_1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	4804      	ldr	r0, [pc, #16]	; (8000850 <HAL_TIM_MspPostInit+0x5c>)
 8000840:	f000 fa6e 	bl	8000d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <HardFault_Handler+0x4>

08000866 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <MemManage_Handler+0x4>

0800086c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <BusFault_Handler+0x4>

08000872 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <UsageFault_Handler+0x4>

08000878 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 f8f2 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008ba:	f000 ff4b 	bl	8001754 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20001224 	.word	0x20001224

080008c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM2_IRQHandler+0x10>)
 80008ce:	f002 fa38 	bl	8002d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000054c 	.word	0x2000054c

080008dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM4_IRQHandler+0x10>)
 80008e2:	f002 fa2e 	bl	8002d42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000430 	.word	0x20000430

080008f0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <_sbrk+0x50>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <_sbrk+0x16>
		heap_end = &end;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <_sbrk+0x50>)
 8000902:	4a10      	ldr	r2, [pc, #64]	; (8000944 <_sbrk+0x54>)
 8000904:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <_sbrk+0x50>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <_sbrk+0x50>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	4413      	add	r3, r2
 8000914:	466a      	mov	r2, sp
 8000916:	4293      	cmp	r3, r2
 8000918:	d907      	bls.n	800092a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800091a:	f006 f8df 	bl	8006adc <__errno>
 800091e:	4602      	mov	r2, r0
 8000920:	230c      	movs	r3, #12
 8000922:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	e006      	b.n	8000938 <_sbrk+0x48>
	}

	heap_end += incr;
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <_sbrk+0x50>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	4a03      	ldr	r2, [pc, #12]	; (8000940 <_sbrk+0x50>)
 8000934:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000936:	68fb      	ldr	r3, [r7, #12]
}
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000200 	.word	0x20000200
 8000944:	20001498 	.word	0x20001498

08000948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <SystemInit+0x5c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <SystemInit+0x5c>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <SystemInit+0x5c>)
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	4911      	ldr	r1, [pc, #68]	; (80009a4 <SystemInit+0x5c>)
 800095e:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <SystemInit+0x60>)
 8000960:	4013      	ands	r3, r2
 8000962:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <SystemInit+0x5c>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <SystemInit+0x5c>)
 800096a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800096e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000972:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000974:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <SystemInit+0x5c>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <SystemInit+0x5c>)
 800097a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800097e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <SystemInit+0x5c>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <SystemInit+0x5c>)
 8000986:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800098a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <SystemInit+0x5c>)
 800098e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000992:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SystemInit+0x64>)
 8000996:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800099a:	609a      	str	r2, [r3, #8]
#endif 
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000
 80009a8:	f8ff0000 	.word	0xf8ff0000
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009b2:	e003      	b.n	80009bc <LoopCopyDataInit>

080009b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009ba:	3104      	adds	r1, #4

080009bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009c4:	d3f6      	bcc.n	80009b4 <CopyDataInit>
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	; (80009f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009c8:	e002      	b.n	80009d0 <LoopFillZerobss>

080009ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009cc:	f842 3b04 	str.w	r3, [r2], #4

080009d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009d4:	d3f9      	bcc.n	80009ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009d6:	f7ff ffb7 	bl	8000948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f006 f885 	bl	8006ae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f7ff fbb5 	bl	800014c <main>
  bx lr
 80009e2:	4770      	bx	lr
  ldr r3, =_sidata
 80009e4:	0800744c 	.word	0x0800744c
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80009f0:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80009f4:	20001494 	.word	0x20001494

080009f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC1_2_IRQHandler>
	...

080009fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x28>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x28>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f945 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	2000      	movs	r0, #0
 8000a14:	f000 f808 	bl	8000a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe1e 	bl	8000658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40022000 	.word	0x40022000

08000a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x54>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <HAL_InitTick+0x58>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f95d 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a52:	2301      	movs	r3, #1
 8000a54:	e00e      	b.n	8000a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b0f      	cmp	r3, #15
 8000a5a:	d80a      	bhi.n	8000a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	f000 f925 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a68:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_InitTick+0x5c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e000      	b.n	8000a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	20000004 	.word	0x20000004
 8000a80:	2000000c 	.word	0x2000000c
 8000a84:	20000008 	.word	0x20000008

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	2000000c 	.word	0x2000000c
 8000aa8:	2000058c 	.word	0x2000058c

08000aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	2000058c 	.word	0x2000058c

08000ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac8:	f7ff fff0 	bl	8000aac <HAL_GetTick>
 8000acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad8:	d005      	beq.n	8000ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_Delay+0x40>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ae6:	bf00      	nop
 8000ae8:	f7ff ffe0 	bl	8000aac <HAL_GetTick>
 8000aec:	4602      	mov	r2, r0
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d8f7      	bhi.n	8000ae8 <HAL_Delay+0x28>
  {
  }
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	2000000c 	.word	0x2000000c

08000b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f003 0307 	and.w	r3, r3, #7
 8000b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b20:	4013      	ands	r3, r2
 8000b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b36:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <__NVIC_SetPriorityGrouping+0x44>)
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	60d3      	str	r3, [r2, #12]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b50:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_GetPriorityGrouping+0x18>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	0a1b      	lsrs	r3, r3, #8
 8000b56:	f003 0307 	and.w	r3, r3, #7
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	db0b      	blt.n	8000b92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	f003 021f 	and.w	r2, r3, #31
 8000b80:	4906      	ldr	r1, [pc, #24]	; (8000b9c <__NVIC_EnableIRQ+0x34>)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	095b      	lsrs	r3, r3, #5
 8000b88:	2001      	movs	r0, #1
 8000b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff90 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff2d 	bl	8000b04 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff42 	bl	8000b4c <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff90 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5f 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff35 	bl	8000b68 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b08b      	sub	sp, #44	; 0x2c
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d32:	e127      	b.n	8000f84 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d34:	2201      	movs	r2, #1
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	f040 8116 	bne.w	8000f7e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	2b12      	cmp	r3, #18
 8000d58:	d034      	beq.n	8000dc4 <HAL_GPIO_Init+0xa4>
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d80d      	bhi.n	8000d7a <HAL_GPIO_Init+0x5a>
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d02b      	beq.n	8000dba <HAL_GPIO_Init+0x9a>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d804      	bhi.n	8000d70 <HAL_GPIO_Init+0x50>
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d031      	beq.n	8000dce <HAL_GPIO_Init+0xae>
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d01c      	beq.n	8000da8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d6e:	e048      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d043      	beq.n	8000dfc <HAL_GPIO_Init+0xdc>
 8000d74:	2b11      	cmp	r3, #17
 8000d76:	d01b      	beq.n	8000db0 <HAL_GPIO_Init+0x90>
          break;
 8000d78:	e043      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d7a:	4a89      	ldr	r2, [pc, #548]	; (8000fa0 <HAL_GPIO_Init+0x280>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d026      	beq.n	8000dce <HAL_GPIO_Init+0xae>
 8000d80:	4a87      	ldr	r2, [pc, #540]	; (8000fa0 <HAL_GPIO_Init+0x280>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d806      	bhi.n	8000d94 <HAL_GPIO_Init+0x74>
 8000d86:	4a87      	ldr	r2, [pc, #540]	; (8000fa4 <HAL_GPIO_Init+0x284>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d020      	beq.n	8000dce <HAL_GPIO_Init+0xae>
 8000d8c:	4a86      	ldr	r2, [pc, #536]	; (8000fa8 <HAL_GPIO_Init+0x288>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d01d      	beq.n	8000dce <HAL_GPIO_Init+0xae>
          break;
 8000d92:	e036      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d94:	4a85      	ldr	r2, [pc, #532]	; (8000fac <HAL_GPIO_Init+0x28c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d019      	beq.n	8000dce <HAL_GPIO_Init+0xae>
 8000d9a:	4a85      	ldr	r2, [pc, #532]	; (8000fb0 <HAL_GPIO_Init+0x290>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d016      	beq.n	8000dce <HAL_GPIO_Init+0xae>
 8000da0:	4a84      	ldr	r2, [pc, #528]	; (8000fb4 <HAL_GPIO_Init+0x294>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d013      	beq.n	8000dce <HAL_GPIO_Init+0xae>
          break;
 8000da6:	e02c      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e028      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	3304      	adds	r3, #4
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e023      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	3308      	adds	r3, #8
 8000dc0:	623b      	str	r3, [r7, #32]
          break;
 8000dc2:	e01e      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	330c      	adds	r3, #12
 8000dca:	623b      	str	r3, [r7, #32]
          break;
 8000dcc:	e019      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	623b      	str	r3, [r7, #32]
          break;
 8000dda:	e012      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de4:	2308      	movs	r3, #8
 8000de6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	69fa      	ldr	r2, [r7, #28]
 8000dec:	611a      	str	r2, [r3, #16]
          break;
 8000dee:	e008      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df0:	2308      	movs	r3, #8
 8000df2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	615a      	str	r2, [r3, #20]
          break;
 8000dfa:	e002      	b.n	8000e02 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	623b      	str	r3, [r7, #32]
          break;
 8000e00:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	2bff      	cmp	r3, #255	; 0xff
 8000e06:	d801      	bhi.n	8000e0c <HAL_GPIO_Init+0xec>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	e001      	b.n	8000e10 <HAL_GPIO_Init+0xf0>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	2bff      	cmp	r3, #255	; 0xff
 8000e16:	d802      	bhi.n	8000e1e <HAL_GPIO_Init+0xfe>
 8000e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x104>
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e20:	3b08      	subs	r3, #8
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e32:	43db      	mvns	r3, r3
 8000e34:	401a      	ands	r2, r3
 8000e36:	6a39      	ldr	r1, [r7, #32]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f000 8096 	beq.w	8000f7e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e52:	4b59      	ldr	r3, [pc, #356]	; (8000fb8 <HAL_GPIO_Init+0x298>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	4a58      	ldr	r2, [pc, #352]	; (8000fb8 <HAL_GPIO_Init+0x298>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6193      	str	r3, [r2, #24]
 8000e5e:	4b56      	ldr	r3, [pc, #344]	; (8000fb8 <HAL_GPIO_Init+0x298>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6a:	4a54      	ldr	r2, [pc, #336]	; (8000fbc <HAL_GPIO_Init+0x29c>)
 8000e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4b      	ldr	r2, [pc, #300]	; (8000fc0 <HAL_GPIO_Init+0x2a0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x19e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4a      	ldr	r2, [pc, #296]	; (8000fc4 <HAL_GPIO_Init+0x2a4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x19a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	; (8000fc8 <HAL_GPIO_Init+0x2a8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x196>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a48      	ldr	r2, [pc, #288]	; (8000fcc <HAL_GPIO_Init+0x2ac>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x192>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x1a0>
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x1a0>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x1a0>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x1a0>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec2:	f002 0203 	and.w	r2, r2, #3
 8000ec6:	0092      	lsls	r2, r2, #2
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed0:	493a      	ldr	r1, [pc, #232]	; (8000fbc <HAL_GPIO_Init+0x29c>)
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3302      	adds	r3, #2
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eea:	4b39      	ldr	r3, [pc, #228]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4938      	ldr	r1, [pc, #224]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	600b      	str	r3, [r1, #0]
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	4933      	ldr	r1, [pc, #204]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d006      	beq.n	8000f20 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	492e      	ldr	r1, [pc, #184]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	604b      	str	r3, [r1, #4]
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f20:	4b2b      	ldr	r3, [pc, #172]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3a:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	4924      	ldr	r1, [pc, #144]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	608b      	str	r3, [r1, #8]
 8000f46:	e006      	b.n	8000f56 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	491f      	ldr	r1, [pc, #124]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	491a      	ldr	r1, [pc, #104]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	60cb      	str	r3, [r1, #12]
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4915      	ldr	r1, [pc, #84]	; (8000fd0 <HAL_GPIO_Init+0x2b0>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	3301      	adds	r3, #1
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f47f aed0 	bne.w	8000d34 <HAL_GPIO_Init+0x14>
  }
}
 8000f94:	bf00      	nop
 8000f96:	372c      	adds	r7, #44	; 0x2c
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	10210000 	.word	0x10210000
 8000fa4:	10110000 	.word	0x10110000
 8000fa8:	10120000 	.word	0x10120000
 8000fac:	10310000 	.word	0x10310000
 8000fb0:	10320000 	.word	0x10320000
 8000fb4:	10220000 	.word	0x10220000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	40010000 	.word	0x40010000
 8000fc0:	40010800 	.word	0x40010800
 8000fc4:	40010c00 	.word	0x40010c00
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40011400 	.word	0x40011400
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe4:	787b      	ldrb	r3, [r7, #1]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff0:	e003      	b.n	8000ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	041a      	lsls	r2, r3, #16
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	611a      	str	r2, [r3, #16]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e10f      	b.n	8001236 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800101c:	b2db      	uxtb	r3, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	d106      	bne.n	8001030 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fb4e 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2224      	movs	r2, #36	; 0x24
 8001034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001048:	f001 fd34 	bl	8002ab4 <HAL_RCC_GetPCLK1Freq>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <HAL_I2C_Init+0x23c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d807      	bhi.n	8001068 <HAL_I2C_Init+0x64>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_I2C_Init+0x240>)
 800105c:	4293      	cmp	r3, r2
 800105e:	bf94      	ite	ls
 8001060:	2301      	movls	r3, #1
 8001062:	2300      	movhi	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e006      	b.n	8001076 <HAL_I2C_Init+0x72>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_I2C_Init+0x244>)
 800106c:	4293      	cmp	r3, r2
 800106e:	bf94      	ite	ls
 8001070:	2301      	movls	r3, #1
 8001072:	2300      	movhi	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0db      	b.n	8001236 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a72      	ldr	r2, [pc, #456]	; (800124c <HAL_I2C_Init+0x248>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a64      	ldr	r2, [pc, #400]	; (8001240 <HAL_I2C_Init+0x23c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <HAL_I2C_Init+0xb4>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	e009      	b.n	80010cc <HAL_I2C_Init+0xc8>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_I2C_Init+0x24c>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4956      	ldr	r1, [pc, #344]	; (8001240 <HAL_I2C_Init+0x23c>)
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d80d      	bhi.n	8001108 <HAL_I2C_Init+0x104>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	bf38      	it	cc
 8001104:	2304      	movcc	r3, #4
 8001106:	e04f      	b.n	80011a8 <HAL_I2C_Init+0x1a4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <HAL_I2C_Init+0x130>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1e58      	subs	r0, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	440b      	add	r3, r1
 800111e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001122:	3301      	adds	r3, #1
 8001124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	e012      	b.n	800115a <HAL_I2C_Init+0x156>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e58      	subs	r0, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	fbb0 f3f3 	udiv	r3, r0, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x15e>
 800115e:	2301      	movs	r3, #1
 8001160:	e022      	b.n	80011a8 <HAL_I2C_Init+0x1a4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10e      	bne.n	8001188 <HAL_I2C_Init+0x184>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6859      	ldr	r1, [r3, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	fbb0 f3f3 	udiv	r3, r0, r3
 800117c:	3301      	adds	r3, #1
 800117e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001186:	e00f      	b.n	80011a8 <HAL_I2C_Init+0x1a4>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	0099      	lsls	r1, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	fbb0 f3f3 	udiv	r3, r0, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6911      	ldr	r1, [r2, #16]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68d2      	ldr	r2, [r2, #12]
 80011e2:	4311      	orrs	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	000186a0 	.word	0x000186a0
 8001244:	001e847f 	.word	0x001e847f
 8001248:	003d08ff 	.word	0x003d08ff
 800124c:	431bde83 	.word	0x431bde83
 8001250:	10624dd3 	.word	0x10624dd3

08001254 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	460b      	mov	r3, r1
 8001262:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fc22 	bl	8000aac <HAL_GetTick>
 8001268:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b20      	cmp	r3, #32
 8001278:	f040 8105 	bne.w	8001486 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2319      	movs	r3, #25
 8001282:	2201      	movs	r2, #1
 8001284:	4982      	ldr	r1, [pc, #520]	; (8001490 <HAL_I2C_IsDeviceReady+0x23c>)
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f000 f906 	bl	8001498 <I2C_WaitOnFlagUntilTimeout>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001292:	2302      	movs	r3, #2
 8001294:	e0f8      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800129c:	2b01      	cmp	r3, #1
 800129e:	d101      	bne.n	80012a4 <HAL_I2C_IsDeviceReady+0x50>
 80012a0:	2302      	movs	r3, #2
 80012a2:	e0f1      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d007      	beq.n	80012ca <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2224      	movs	r2, #36	; 0x24
 80012de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4a6a      	ldr	r2, [pc, #424]	; (8001494 <HAL_I2C_IsDeviceReady+0x240>)
 80012ec:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012fc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	9300      	str	r3, [sp, #0]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f8c4 	bl	8001498 <I2C_WaitOnFlagUntilTimeout>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e0b6      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800131a:	897b      	ldrh	r3, [r7, #10]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001328:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fbbf 	bl	8000aac <HAL_GetTick>
 800132e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	695b      	ldr	r3, [r3, #20]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b02      	cmp	r3, #2
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
 800135c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800135e:	e025      	b.n	80013ac <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001360:	f7ff fba4 	bl	8000aac <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d302      	bcc.n	8001376 <HAL_I2C_IsDeviceReady+0x122>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d103      	bne.n	800137e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	22a0      	movs	r2, #160	; 0xa0
 800137a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b02      	cmp	r3, #2
 800138a:	bf0c      	ite	eq
 800138c:	2301      	moveq	r3, #1
 800138e:	2300      	movne	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2ba0      	cmp	r3, #160	; 0xa0
 80013b6:	d005      	beq.n	80013c4 <HAL_I2C_IsDeviceReady+0x170>
 80013b8:	7dfb      	ldrb	r3, [r7, #23]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_I2C_IsDeviceReady+0x170>
 80013be:	7dbb      	ldrb	r3, [r7, #22]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0cd      	beq.n	8001360 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2220      	movs	r2, #32
 80013c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d129      	bne.n	800142e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2319      	movs	r3, #25
 8001406:	2201      	movs	r2, #1
 8001408:	4921      	ldr	r1, [pc, #132]	; (8001490 <HAL_I2C_IsDeviceReady+0x23c>)
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f000 f844 	bl	8001498 <I2C_WaitOnFlagUntilTimeout>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e036      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2220      	movs	r2, #32
 800141e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e02c      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800143c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001446:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	9300      	str	r3, [sp, #0]
 800144c:	2319      	movs	r3, #25
 800144e:	2201      	movs	r2, #1
 8001450:	490f      	ldr	r1, [pc, #60]	; (8001490 <HAL_I2C_IsDeviceReady+0x23c>)
 8001452:	68f8      	ldr	r0, [r7, #12]
 8001454:	f000 f820 	bl	8001498 <I2C_WaitOnFlagUntilTimeout>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e012      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	3301      	adds	r3, #1
 8001466:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	429a      	cmp	r2, r3
 800146e:	f4ff af3e 	bcc.w	80012ee <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001486:	2302      	movs	r3, #2
  }
}
 8001488:	4618      	mov	r0, r3
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	00100002 	.word	0x00100002
 8001494:	ffff0000 	.word	0xffff0000

08001498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014a8:	e025      	b.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b0:	d021      	beq.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014b2:	f7ff fafb 	bl	8000aac <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d302      	bcc.n	80014c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2220      	movs	r2, #32
 80014d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f043 0220 	orr.w	r2, r3, #32
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e023      	b.n	800153e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	0c1b      	lsrs	r3, r3, #16
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d10d      	bne.n	800151c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4013      	ands	r3, r2
 800150c:	b29b      	uxth	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	bf0c      	ite	eq
 8001512:	2301      	moveq	r3, #1
 8001514:	2300      	movne	r3, #0
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	e00c      	b.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	43da      	mvns	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4013      	ands	r3, r2
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	429a      	cmp	r2, r3
 800153a:	d0b6      	beq.n	80014aa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001548:	b08b      	sub	sp, #44	; 0x2c
 800154a:	af06      	add	r7, sp, #24
 800154c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0d3      	b.n	8001700 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d106      	bne.n	8001572 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f005 f81f 	bl	80065b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f002 f98f 	bl	80038a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	687e      	ldr	r6, [r7, #4]
 800158c:	466d      	mov	r5, sp
 800158e:	f106 0410 	add.w	r4, r6, #16
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	602b      	str	r3, [r5, #0]
 800159a:	1d33      	adds	r3, r6, #4
 800159c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f002 f958 	bl	8003854 <USB_CoreInit>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2202      	movs	r2, #2
 80015ae:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e0a4      	b.n	8001700 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 f98c 	bl	80038da <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	e035      	b.n	8001634 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	4413      	add	r3, r2
 80015d0:	3329      	adds	r3, #41	; 0x29
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	4413      	add	r3, r2
 80015de:	3328      	adds	r3, #40	; 0x28
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	b291      	uxth	r1, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	4413      	add	r3, r2
 80015f0:	3336      	adds	r3, #54	; 0x36
 80015f2:	460a      	mov	r2, r1
 80015f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	015b      	lsls	r3, r3, #5
 80015fc:	4413      	add	r3, r2
 80015fe:	332b      	adds	r3, #43	; 0x2b
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	015b      	lsls	r3, r3, #5
 800160a:	4413      	add	r3, r2
 800160c:	3338      	adds	r3, #56	; 0x38
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	4413      	add	r3, r2
 800161a:	333c      	adds	r3, #60	; 0x3c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	3302      	adds	r3, #2
 8001626:	015b      	lsls	r3, r3, #5
 8001628:	4413      	add	r3, r2
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	3301      	adds	r3, #1
 8001632:	73fb      	strb	r3, [r7, #15]
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	d3c4      	bcc.n	80015c8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163e:	2300      	movs	r3, #0
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	e031      	b.n	80016a8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	4413      	add	r3, r2
 800164c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001654:	7bfb      	ldrb	r3, [r7, #15]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	015b      	lsls	r3, r3, #5
 800165a:	4413      	add	r3, r2
 800165c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	015b      	lsls	r3, r3, #5
 800166a:	4413      	add	r3, r2
 800166c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	015b      	lsls	r3, r3, #5
 800167a:	4413      	add	r3, r2
 800167c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	015b      	lsls	r3, r3, #5
 800168a:	4413      	add	r3, r2
 800168c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001694:	7bfb      	ldrb	r3, [r7, #15]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	330a      	adds	r3, #10
 800169a:	015b      	lsls	r3, r3, #5
 800169c:	4413      	add	r3, r2
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3c8      	bcc.n	8001644 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	1d33      	adds	r3, r6, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f002 f910 	bl	80038f2 <USB_DevInit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00d      	b.n	8001700 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 f94e 	bl	800499a <USB_DevDisconnect>

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001708 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_PCD_Start+0x16>
 800171a:	2302      	movs	r3, #2
 800171c:	e016      	b.n	800174c <HAL_PCD_Start+0x44>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001726:	2101      	movs	r1, #1
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 f9a0 	bl	8006a6e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f003 f927 	bl	8004986 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f002 f899 	bl	8003874 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 f924 	bl	80049ae <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001770:	d102      	bne.n	8001778 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 faf2 	bl	8001d5c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f003 f916 	bl	80049ae <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d112      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f004 ff6f 	bl	800668a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f8de 	bl	8001970 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f8f8 	bl	80049ae <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017c8:	d10b      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017dc:	b292      	uxth	r2, r2
 80017de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f003 f8e1 	bl	80049ae <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d10b      	bne.n	8001810 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800180a:	b292      	uxth	r2, r2
 800180c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f003 f8ca 	bl	80049ae <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d126      	bne.n	8001874 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0204 	bic.w	r2, r2, #4
 8001838:	b292      	uxth	r2, r2
 800183a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f004 ff50 	bl	80066fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f003 f898 	bl	80049ae <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001888:	d13d      	bne.n	8001906 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001892:	b29a      	uxth	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f042 0208 	orr.w	r2, r2, #8
 800189c:	b292      	uxth	r2, r2
 800189e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b4:	b292      	uxth	r2, r2
 80018b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0204 	orr.w	r2, r2, #4
 80018cc:	b292      	uxth	r2, r2
 80018ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f869 	bl	80049ae <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e6:	d10b      	bne.n	8001900 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018fa:	b292      	uxth	r2, r2
 80018fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f004 fee1 	bl	80066c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f84f 	bl	80049ae <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191a:	d10e      	bne.n	800193a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001924:	b29a      	uxth	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800192e:	b292      	uxth	r2, r2
 8001930:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f004 fe9a 	bl	800666e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f003 f835 	bl	80049ae <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800194e:	d10b      	bne.n	8001968 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001958:	b29a      	uxth	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001962:	b292      	uxth	r2, r2
 8001964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_PCD_SetAddress+0x1a>
 8001986:	2302      	movs	r3, #2
 8001988:	e013      	b.n	80019b2 <HAL_PCD_SetAddress+0x42>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	78fa      	ldrb	r2, [r7, #3]
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ffdc 	bl	8004960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	461a      	mov	r2, r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	70fb      	strb	r3, [r7, #3]
 80019cc:	460b      	mov	r3, r1
 80019ce:	803b      	strh	r3, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da0b      	bge.n	80019f8 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	3328      	adds	r3, #40	; 0x28
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	705a      	strb	r2, [r3, #1]
 80019f6:	e00b      	b.n	8001a10 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019f8:	78fb      	ldrb	r3, [r7, #3]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	015b      	lsls	r3, r3, #5
 8001a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a1c:	883a      	ldrh	r2, [r7, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	78ba      	ldrb	r2, [r7, #2]
 8001a26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a3a:	78bb      	ldrb	r3, [r7, #2]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d102      	bne.n	8001a46 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_PCD_EP_Open+0x9a>
 8001a50:	2302      	movs	r3, #2
 8001a52:	e00e      	b.n	8001a72 <HAL_PCD_EP_Open+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68f9      	ldr	r1, [r7, #12]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 ff6a 	bl	800393c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001a70:	7afb      	ldrb	r3, [r7, #11]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	da0b      	bge.n	8001aa6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8e:	78fb      	ldrb	r3, [r7, #3]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	015b      	lsls	r3, r3, #5
 8001a96:	3328      	adds	r3, #40	; 0x28
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	705a      	strb	r2, [r3, #1]
 8001aa4:	e00b      	b.n	8001abe <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	015b      	lsls	r3, r3, #5
 8001aae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_PCD_EP_Close+0x5e>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	e00e      	b.n	8001af6 <HAL_PCD_EP_Close+0x7c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fa16 	bl	8003f18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b086      	sub	sp, #24
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	607a      	str	r2, [r7, #4]
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2200      	movs	r2, #0
 8001b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fb75 	bl	8004244 <USB_EPStartXfer>
 8001b5a:	e005      	b.n	8001b68 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6979      	ldr	r1, [r7, #20]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 fb6e 	bl	8004244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b72:	b480      	push	{r7}
 8001b74:	b083      	sub	sp, #12
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	330a      	adds	r3, #10
 8001b88:	015b      	lsls	r3, r3, #5
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b086      	sub	sp, #24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001baa:	7afb      	ldrb	r3, [r7, #11]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	015b      	lsls	r3, r3, #5
 8001bb2:	3328      	adds	r3, #40	; 0x28
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bde:	7afb      	ldrb	r3, [r7, #11]
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d106      	bne.n	8001bf6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6979      	ldr	r1, [r7, #20]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f002 fb28 	bl	8004244 <USB_EPStartXfer>
 8001bf4:	e005      	b.n	8001c02 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fb21 	bl	8004244 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c18:	78fb      	ldrb	r3, [r7, #3]
 8001c1a:	f003 0207 	and.w	r2, r3, #7
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d901      	bls.n	8001c2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e046      	b.n	8001cb8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da0b      	bge.n	8001c4a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	3328      	adds	r3, #40	; 0x28
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	705a      	strb	r2, [r3, #1]
 8001c48:	e009      	b.n	8001c5e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	015b      	lsls	r3, r3, #5
 8001c4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2201      	movs	r2, #1
 8001c62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_PCD_EP_SetStall+0x72>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e01c      	b.n	8001cb8 <HAL_PCD_EP_SetStall+0xac>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68f9      	ldr	r1, [r7, #12]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f002 fd91 	bl	80047b4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d108      	bne.n	8001cae <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f002 fe8f 	bl	80049cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d901      	bls.n	8001cde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e03a      	b.n	8001d54 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da0b      	bge.n	8001cfe <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ce6:	78fb      	ldrb	r3, [r7, #3]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	3328      	adds	r3, #40	; 0x28
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	705a      	strb	r2, [r3, #1]
 8001cfc:	e00b      	b.n	8001d16 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	015b      	lsls	r3, r3, #5
 8001d06:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_PCD_EP_ClrStall+0x76>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e00e      	b.n	8001d54 <HAL_PCD_EP_ClrStall+0x94>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68f9      	ldr	r1, [r7, #12]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fd77 	bl	8004838 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	; 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d64:	e282      	b.n	800226c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d70:	8afb      	ldrh	r3, [r7, #22]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001d7a:	7d7b      	ldrb	r3, [r7, #21]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 8142 	bne.w	8002006 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d82:	8afb      	ldrh	r3, [r7, #22]
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d151      	bne.n	8001e30 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	881b      	ldrh	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d9c:	b29c      	uxth	r4, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001da6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3328      	adds	r3, #40	; 0x28
 8001db2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6812      	ldr	r2, [r2, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	441a      	add	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dee:	2100      	movs	r1, #0
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f004 fc25 	bl	8006640 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8234 	beq.w	800226c <PCD_EP_ISR_Handler+0x510>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f040 822f 	bne.w	800226c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b292      	uxth	r2, r2
 8001e22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e2e:	e21d      	b.n	800226c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e36:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e40:	8a7b      	ldrh	r3, [r7, #18]
 8001e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d033      	beq.n	8001eb2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	461a      	mov	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3306      	adds	r3, #6
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6c:	881b      	ldrh	r3, [r3, #0]
 8001e6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	f002 fdee 	bl	8004a6a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	b29c      	uxth	r4, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ea6:	b292      	uxth	r2, r2
 8001ea8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f004 fb9e 	bl	80065ec <HAL_PCD_SetupStageCallback>
 8001eb0:	e1dc      	b.n	800226c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001eb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f280 81d8 	bge.w	800226c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ec8:	4013      	ands	r3, r2
 8001eca:	b29c      	uxth	r4, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ed4:	b292      	uxth	r2, r2
 8001ed6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	3306      	adds	r3, #6
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6812      	ldr	r2, [r2, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <PCD_EP_ISR_Handler+0x1e4>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d015      	beq.n	8001f40 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6959      	ldr	r1, [r3, #20]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	f002 fda0 	bl	8004a6a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	441a      	add	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f38:	2100      	movs	r1, #0
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f004 fb68 	bl	8006610 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	461c      	mov	r4, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	441c      	add	r4, r3
 8001f52:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001f56:	461c      	mov	r4, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d10e      	bne.n	8001f7e <PCD_EP_ISR_Handler+0x222>
 8001f60:	8823      	ldrh	r3, [r4, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	8023      	strh	r3, [r4, #0]
 8001f6c:	8823      	ldrh	r3, [r4, #0]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	8023      	strh	r3, [r4, #0]
 8001f7c:	e02d      	b.n	8001fda <PCD_EP_ISR_Handler+0x27e>
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b3e      	cmp	r3, #62	; 0x3e
 8001f84:	d812      	bhi.n	8001fac <PCD_EP_ISR_Handler+0x250>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <PCD_EP_ISR_Handler+0x244>
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	029b      	lsls	r3, r3, #10
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	8023      	strh	r3, [r4, #0]
 8001faa:	e016      	b.n	8001fda <PCD_EP_ISR_Handler+0x27e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	095b      	lsrs	r3, r3, #5
 8001fb2:	61bb      	str	r3, [r7, #24]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <PCD_EP_ISR_Handler+0x26a>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fea:	b29c      	uxth	r4, r3
 8001fec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001ff0:	b29c      	uxth	r4, r3
 8001ff2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001ff6:	b29c      	uxth	r4, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4ba2      	ldr	r3, [pc, #648]	; (8002288 <PCD_EP_ISR_Handler+0x52c>)
 8001ffe:	4323      	orrs	r3, r4
 8002000:	b29b      	uxth	r3, r3
 8002002:	8013      	strh	r3, [r2, #0]
 8002004:	e132      	b.n	800226c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	7d7b      	ldrb	r3, [r7, #21]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4413      	add	r3, r2
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002016:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800201a:	2b00      	cmp	r3, #0
 800201c:	f280 80d1 	bge.w	80021c2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	461a      	mov	r2, r3
 8002026:	7d7b      	ldrb	r3, [r7, #21]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29a      	uxth	r2, r3
 8002030:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002034:	4013      	ands	r3, r2
 8002036:	b29c      	uxth	r4, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	461a      	mov	r2, r3
 800203e:	7d7b      	ldrb	r3, [r7, #21]
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002048:	b292      	uxth	r2, r2
 800204a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800204c:	7d7b      	ldrb	r3, [r7, #21]
 800204e:	015b      	lsls	r3, r3, #5
 8002050:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	7b1b      	ldrb	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d121      	bne.n	80020a6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800206a:	b29b      	uxth	r3, r3
 800206c:	461a      	mov	r2, r3
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	3306      	adds	r3, #6
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6812      	ldr	r2, [r2, #0]
 800207e:	4413      	add	r3, r2
 8002080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800208a:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800208c:	8bfb      	ldrh	r3, [r7, #30]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d072      	beq.n	8002178 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6959      	ldr	r1, [r3, #20]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88da      	ldrh	r2, [r3, #6]
 800209e:	8bfb      	ldrh	r3, [r7, #30]
 80020a0:	f002 fce3 	bl	8004a6a <USB_ReadPMA>
 80020a4:	e068      	b.n	8002178 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d021      	beq.n	8002104 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	3302      	adds	r3, #2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020e8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020ea:	8bfb      	ldrh	r3, [r7, #30]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d02a      	beq.n	8002146 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6959      	ldr	r1, [r3, #20]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	891a      	ldrh	r2, [r3, #8]
 80020fc:	8bfb      	ldrh	r3, [r7, #30]
 80020fe:	f002 fcb4 	bl	8004a6a <USB_ReadPMA>
 8002102:	e020      	b.n	8002146 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	3306      	adds	r3, #6
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	4413      	add	r3, r2
 8002122:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800212c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800212e:	8bfb      	ldrh	r3, [r7, #30]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6959      	ldr	r1, [r3, #20]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	895a      	ldrh	r2, [r3, #10]
 8002140:	8bfb      	ldrh	r3, [r7, #30]
 8002142:	f002 fc92 	bl	8004a6a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002160:	b29c      	uxth	r4, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	441a      	add	r2, r3
 8002170:	4b46      	ldr	r3, [pc, #280]	; (800228c <PCD_EP_ISR_Handler+0x530>)
 8002172:	4323      	orrs	r3, r4
 8002174:	b29b      	uxth	r3, r3
 8002176:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	69da      	ldr	r2, [r3, #28]
 800217c:	8bfb      	ldrh	r3, [r7, #30]
 800217e:	441a      	add	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	695a      	ldr	r2, [r3, #20]
 8002188:	8bfb      	ldrh	r3, [r7, #30]
 800218a:	441a      	add	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d004      	beq.n	80021a2 <PCD_EP_ISR_Handler+0x446>
 8002198:	8bfa      	ldrh	r2, [r7, #30]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d206      	bcs.n	80021b0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f004 fa31 	bl	8006610 <HAL_PCD_DataOutStageCallback>
 80021ae:	e008      	b.n	80021c2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	7819      	ldrb	r1, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	695a      	ldr	r2, [r3, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff fc9e 	bl	8001afe <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021c2:	8a7b      	ldrh	r3, [r7, #18]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d04f      	beq.n	800226c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80021cc:	7d7b      	ldrb	r3, [r7, #21]
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	3328      	adds	r3, #40	; 0x28
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	7d7b      	ldrb	r3, [r7, #21]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f0:	b29c      	uxth	r4, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	7d7b      	ldrb	r3, [r7, #21]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002206:	b29b      	uxth	r3, r3
 8002208:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	3302      	adds	r3, #2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	695a      	ldr	r2, [r3, #20]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f004 f9f4 	bl	8006640 <HAL_PCD_DataInStageCallback>
 8002258:	e008      	b.n	800226c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	7819      	ldrb	r1, [r3, #0]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fc97 	bl	8001b9a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002274:	b29b      	uxth	r3, r3
 8002276:	b21b      	sxth	r3, r3
 8002278:	2b00      	cmp	r3, #0
 800227a:	f6ff ad74 	blt.w	8001d66 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3724      	adds	r7, #36	; 0x24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}
 8002288:	ffff8080 	.word	0xffff8080
 800228c:	ffff80c0 	.word	0xffff80c0

08002290 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	817b      	strh	r3, [r7, #10]
 800229e:	4613      	mov	r3, r2
 80022a0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80022a2:	897b      	ldrh	r3, [r7, #10]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d008      	beq.n	80022c0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022ae:	897b      	ldrh	r3, [r7, #10]
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	3328      	adds	r3, #40	; 0x28
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e006      	b.n	80022ce <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022c0:	897b      	ldrh	r3, [r7, #10]
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022ce:	893b      	ldrh	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d107      	bne.n	80022e4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2200      	movs	r2, #0
 80022d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	80da      	strh	r2, [r3, #6]
 80022e2:	e00b      	b.n	80022fc <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2201      	movs	r2, #1
 80022e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0c1b      	lsrs	r3, r3, #16
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e26c      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 8087 	beq.w	8002436 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b04      	cmp	r3, #4
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002334:	4b8f      	ldr	r3, [pc, #572]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d112      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234c:	d10b      	bne.n	8002366 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234e:	4b89      	ldr	r3, [pc, #548]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d06c      	beq.n	8002434 <HAL_RCC_OscConfig+0x12c>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d168      	bne.n	8002434 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e246      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800236e:	d106      	bne.n	800237e <HAL_RCC_OscConfig+0x76>
 8002370:	4b80      	ldr	r3, [pc, #512]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a7f      	ldr	r2, [pc, #508]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	e02e      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0x98>
 8002386:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7a      	ldr	r2, [pc, #488]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b78      	ldr	r3, [pc, #480]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a77      	ldr	r2, [pc, #476]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e01d      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0xbc>
 80023aa:	4b72      	ldr	r3, [pc, #456]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a71      	ldr	r2, [pc, #452]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	4b6f      	ldr	r3, [pc, #444]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a6e      	ldr	r2, [pc, #440]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0xd4>
 80023c4:	4b6b      	ldr	r3, [pc, #428]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6a      	ldr	r2, [pc, #424]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	4b68      	ldr	r3, [pc, #416]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a67      	ldr	r2, [pc, #412]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d013      	beq.n	800240c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fb62 	bl	8000aac <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ec:	f7fe fb5e 	bl	8000aac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b64      	cmp	r3, #100	; 0x64
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e1fa      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b5d      	ldr	r3, [pc, #372]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0xe4>
 800240a:	e014      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fb4e 	bl	8000aac <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fb4a 	bl	8000aac <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e1e6      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	4b53      	ldr	r3, [pc, #332]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f0      	bne.n	8002414 <HAL_RCC_OscConfig+0x10c>
 8002432:	e000      	b.n	8002436 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002434:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d063      	beq.n	800250a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002442:	4b4c      	ldr	r3, [pc, #304]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00b      	beq.n	8002466 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800244e:	4b49      	ldr	r3, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b08      	cmp	r3, #8
 8002458:	d11c      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
 800245a:	4b46      	ldr	r3, [pc, #280]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d116      	bne.n	8002494 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d001      	beq.n	800247e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1ba      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4939      	ldr	r1, [pc, #228]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	e03a      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fb03 	bl	8000aac <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe faff 	bl	8000aac <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e19b      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	4b2d      	ldr	r3, [pc, #180]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4927      	ldr	r1, [pc, #156]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_OscConfig+0x270>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fae2 	bl	8000aac <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ec:	f7fe fade 	bl	8000aac <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e17a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d03a      	beq.n	800258c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002524:	f7fe fac2 	bl	8000aac <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fabe 	bl	8000aac <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e15a      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <HAL_RCC_OscConfig+0x26c>)
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0f0      	beq.n	800252c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 fac6 	bl	8002adc <RCC_Delay>
 8002550:	e01c      	b.n	800258c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_RCC_OscConfig+0x274>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe faa8 	bl	8000aac <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255e:	e00f      	b.n	8002580 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7fe faa4 	bl	8000aac <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d908      	bls.n	8002580 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e140      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	42420000 	.word	0x42420000
 800257c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	4b9e      	ldr	r3, [pc, #632]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1e9      	bne.n	8002560 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a6 	beq.w	80026e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b97      	ldr	r3, [pc, #604]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10d      	bne.n	80025c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b94      	ldr	r3, [pc, #592]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	4a93      	ldr	r2, [pc, #588]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b4:	61d3      	str	r3, [r2, #28]
 80025b6:	4b91      	ldr	r3, [pc, #580]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c2:	2301      	movs	r3, #1
 80025c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c6:	4b8e      	ldr	r3, [pc, #568]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d118      	bne.n	8002604 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a8a      	ldr	r2, [pc, #552]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025de:	f7fe fa65 	bl	8000aac <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fa61 	bl	8000aac <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e0fd      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	4b81      	ldr	r3, [pc, #516]	; (8002800 <HAL_RCC_OscConfig+0x4f8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x312>
 800260c:	4b7b      	ldr	r3, [pc, #492]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a7a      	ldr	r2, [pc, #488]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e02d      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x334>
 8002622:	4b76      	ldr	r3, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a75      	ldr	r2, [pc, #468]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	6213      	str	r3, [r2, #32]
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002630:	6a1b      	ldr	r3, [r3, #32]
 8002632:	4a72      	ldr	r2, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	6213      	str	r3, [r2, #32]
 800263a:	e01c      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x356>
 8002644:	4b6d      	ldr	r3, [pc, #436]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4a6c      	ldr	r2, [pc, #432]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6213      	str	r3, [r2, #32]
 8002650:	4b6a      	ldr	r3, [pc, #424]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002652:	6a1b      	ldr	r3, [r3, #32]
 8002654:	4a69      	ldr	r2, [pc, #420]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6213      	str	r3, [r2, #32]
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x36e>
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002660:	6a1b      	ldr	r3, [r3, #32]
 8002662:	4a66      	ldr	r2, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
 800266a:	4b64      	ldr	r3, [pc, #400]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800267e:	f7fe fa15 	bl	8000aac <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe fa11 	bl	8000aac <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e0ab      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4b57      	ldr	r3, [pc, #348]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x37e>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7fe f9ff 	bl	8000aac <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe f9fb 	bl	8000aac <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e095      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4b48      	ldr	r3, [pc, #288]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a47      	ldr	r2, [pc, #284]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8081 	beq.w	80027f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d061      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d146      	bne.n	8002792 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270a:	f7fe f9cf 	bl	8000aac <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe f9cb 	bl	8000aac <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e067      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	4b35      	ldr	r3, [pc, #212]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800273a:	4b30      	ldr	r3, [pc, #192]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	492d      	ldr	r1, [pc, #180]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	4b2b      	ldr	r3, [pc, #172]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a19      	ldr	r1, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	430b      	orrs	r3, r1
 800275e:	4927      	ldr	r1, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b27      	ldr	r3, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe f99f 	bl	8000aac <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe f99b 	bl	8000aac <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e037      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002784:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x46a>
 8002790:	e02f      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b1c      	ldr	r3, [pc, #112]	; (8002804 <HAL_RCC_OscConfig+0x4fc>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002798:	f7fe f988 	bl	8000aac <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe f984 	bl	8000aac <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e020      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b2:	4b12      	ldr	r3, [pc, #72]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x498>
 80027be:	e018      	b.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e013      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d001      	beq.n	80027f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3718      	adds	r7, #24
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	40007000 	.word	0x40007000
 8002804:	42420060 	.word	0x42420060

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d0      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d910      	bls.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b67      	ldr	r3, [pc, #412]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4965      	ldr	r1, [pc, #404]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b63      	ldr	r3, [pc, #396]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0b8      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a58      	ldr	r2, [pc, #352]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0308 	and.w	r3, r3, #8
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4a52      	ldr	r2, [pc, #328]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	494d      	ldr	r1, [pc, #308]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d040      	beq.n	8002928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	4b47      	ldr	r3, [pc, #284]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d115      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e07f      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c6:	4b41      	ldr	r3, [pc, #260]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d109      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e073      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e6:	4b39      	ldr	r3, [pc, #228]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	4936      	ldr	r1, [pc, #216]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f8:	f7fe f8d8 	bl	8000aac <HAL_GetTick>
 80028fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002900:	f7fe f8d4 	bl	8000aac <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e053      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002916:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 020c 	and.w	r2, r3, #12
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	429a      	cmp	r2, r3
 8002926:	d1eb      	bne.n	8002900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002928:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	429a      	cmp	r2, r3
 8002934:	d210      	bcs.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002936:	4b24      	ldr	r3, [pc, #144]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f023 0207 	bic.w	r2, r3, #7
 800293e:	4922      	ldr	r1, [pc, #136]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	4313      	orrs	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0307 	and.w	r3, r3, #7
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d001      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e032      	b.n	80029be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002964:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4916      	ldr	r1, [pc, #88]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	490e      	ldr	r1, [pc, #56]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	4313      	orrs	r3, r2
 8002994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002996:	f000 f821 	bl	80029dc <HAL_RCC_GetSysClockFreq>
 800299a:	4601      	mov	r1, r0
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	fa21 f303 	lsr.w	r3, r1, r3
 80029ae:	4a09      	ldr	r2, [pc, #36]	; (80029d4 <HAL_RCC_ClockConfig+0x1cc>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <HAL_RCC_ClockConfig+0x1d0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe f836 	bl	8000a28 <HAL_InitTick>

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	080073f8 	.word	0x080073f8
 80029d4:	20000004 	.word	0x20000004
 80029d8:	20000008 	.word	0x20000008

080029dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029dc:	b490      	push	{r4, r7}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 80029e4:	1d3c      	adds	r4, r7, #4
 80029e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029ec:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d002      	beq.n	8002a1c <HAL_RCC_GetSysClockFreq+0x40>
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_GetSysClockFreq+0x46>
 8002a1a:	e02d      	b.n	8002a78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a1c:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a1e:	623b      	str	r3, [r7, #32]
      break;
 8002a20:	e02d      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	0c9b      	lsrs	r3, r3, #18
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a2e:	4413      	add	r3, r2
 8002a30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d013      	beq.n	8002a68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a40:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	0c5b      	lsrs	r3, r3, #17
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a4e:	4413      	add	r3, r2
 8002a50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a5a:	fb02 f203 	mul.w	r2, r2, r3
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	e004      	b.n	8002a72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	4a0c      	ldr	r2, [pc, #48]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a6c:	fb02 f303 	mul.w	r3, r2, r3
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	623b      	str	r3, [r7, #32]
      break;
 8002a76:	e002      	b.n	8002a7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a7a:	623b      	str	r3, [r7, #32]
      break;
 8002a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a7e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc90      	pop	{r4, r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	0800739c 	.word	0x0800739c
 8002a90:	080073ac 	.word	0x080073ac
 8002a94:	40021000 	.word	0x40021000
 8002a98:	007a1200 	.word	0x007a1200
 8002a9c:	003d0900 	.word	0x003d0900

08002aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b02      	ldr	r3, [pc, #8]	; (8002ab0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ab8:	f7ff fff2 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002abc:	4601      	mov	r1, r0
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	4a03      	ldr	r2, [pc, #12]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	08007408 	.word	0x08007408

08002adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <RCC_Delay+0x34>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <RCC_Delay+0x38>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a5b      	lsrs	r3, r3, #9
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002af8:	bf00      	nop
  }
  while (Delay --);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	60fa      	str	r2, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f9      	bne.n	8002af8 <RCC_Delay+0x1c>
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc80      	pop	{r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000004 	.word	0x20000004
 8002b14:	10624dd3 	.word	0x10624dd3

08002b18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d07d      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b34:	2300      	movs	r3, #0
 8002b36:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10d      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4e:	61d3      	str	r3, [r2, #28]
 8002b50:	4b49      	ldr	r3, [pc, #292]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d118      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a42      	ldr	r2, [pc, #264]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b78:	f7fd ff98 	bl	8000aac <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	e008      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b80:	f7fd ff94 	bl	8000aac <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b64      	cmp	r3, #100	; 0x64
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e06d      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0f0      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b9e:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02e      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d027      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bc6:	4b2e      	ldr	r3, [pc, #184]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bcc:	4b2c      	ldr	r3, [pc, #176]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d014      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fd ff63 	bl	8000aac <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fd ff5f 	bl	8000aac <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e036      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c02:	6a1b      	ldr	r3, [r3, #32]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ee      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4917      	ldr	r1, [pc, #92]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c1e:	7dfb      	ldrb	r3, [r7, #23]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a13      	ldr	r2, [pc, #76]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	490b      	ldr	r1, [pc, #44]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0310 	and.w	r3, r3, #16
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c5a:	4b07      	ldr	r3, [pc, #28]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	4904      	ldr	r1, [pc, #16]	; (8002c78 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420440 	.word	0x42420440

08002c84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01d      	b.n	8002cd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fd fd4e 	bl	800074c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3304      	adds	r3, #4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	f000 faf0 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b082      	sub	sp, #8
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e01d      	b.n	8002d28 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d106      	bne.n	8002d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 f815 	bl	8002d30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2202      	movs	r2, #2
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3304      	adds	r3, #4
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f000 fac5 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d122      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d11b      	bne.n	8002d9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f06f 0202 	mvn.w	r2, #2
 8002d6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa74 	bl	8003272 <HAL_TIM_IC_CaptureCallback>
 8002d8a:	e005      	b.n	8002d98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 fa67 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 fa76 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d122      	bne.n	8002df2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d11b      	bne.n	8002df2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f06f 0204 	mvn.w	r2, #4
 8002dc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 fa4a 	bl	8003272 <HAL_TIM_IC_CaptureCallback>
 8002dde:	e005      	b.n	8002dec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fa3d 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa4c 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f003 0308 	and.w	r3, r3, #8
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d122      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d11b      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f06f 0208 	mvn.w	r2, #8
 8002e16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa20 	bl	8003272 <HAL_TIM_IC_CaptureCallback>
 8002e32:	e005      	b.n	8002e40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 fa13 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa22 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	d122      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b10      	cmp	r3, #16
 8002e60:	d11b      	bne.n	8002e9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0210 	mvn.w	r2, #16
 8002e6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2208      	movs	r2, #8
 8002e70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f9f6 	bl	8003272 <HAL_TIM_IC_CaptureCallback>
 8002e86:	e005      	b.n	8002e94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f9e9 	bl	8003260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f9f8 	bl	8003284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f06f 0201 	mvn.w	r2, #1
 8002ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 f9c4 	bl	800324e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed0:	2b80      	cmp	r3, #128	; 0x80
 8002ed2:	d10e      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d107      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fca8 	bl	8003842 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b40      	cmp	r3, #64	; 0x40
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f9bc 	bl	8003296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0320 	and.w	r3, r3, #32
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0220 	mvn.w	r2, #32
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fc73 	bl	8003830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e0b4      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	f200 809f 	bhi.w	80030c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f86:	a201      	add	r2, pc, #4	; (adr r2, 8002f8c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	080030c5 	.word	0x080030c5
 8002f94:	080030c5 	.word	0x080030c5
 8002f98:	080030c5 	.word	0x080030c5
 8002f9c:	08003001 	.word	0x08003001
 8002fa0:	080030c5 	.word	0x080030c5
 8002fa4:	080030c5 	.word	0x080030c5
 8002fa8:	080030c5 	.word	0x080030c5
 8002fac:	08003043 	.word	0x08003043
 8002fb0:	080030c5 	.word	0x080030c5
 8002fb4:	080030c5 	.word	0x080030c5
 8002fb8:	080030c5 	.word	0x080030c5
 8002fbc:	08003083 	.word	0x08003083
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 f9d0 	bl	800336c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0208 	orr.w	r2, r2, #8
 8002fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6999      	ldr	r1, [r3, #24]
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	619a      	str	r2, [r3, #24]
      break;
 8002ffe:	e062      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fa16 	bl	8003438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	6999      	ldr	r1, [r3, #24]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	021a      	lsls	r2, r3, #8
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	619a      	str	r2, [r3, #24]
      break;
 8003040:	e041      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fa5f 	bl	800350c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0208 	orr.w	r2, r2, #8
 800305c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0204 	bic.w	r2, r2, #4
 800306c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69d9      	ldr	r1, [r3, #28]
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	61da      	str	r2, [r3, #28]
      break;
 8003080:	e021      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	4618      	mov	r0, r3
 800308a:	f000 faa9 	bl	80035e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69d9      	ldr	r1, [r3, #28]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	021a      	lsls	r2, r3, #8
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	61da      	str	r2, [r3, #28]
      break;
 80030c2:	e000      	b.n	80030c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80030c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_ConfigClockSource+0x18>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0a6      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x166>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003116:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d067      	beq.n	8003200 <HAL_TIM_ConfigClockSource+0x120>
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d80b      	bhi.n	800314c <HAL_TIM_ConfigClockSource+0x6c>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d073      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0x140>
 8003138:	2b10      	cmp	r3, #16
 800313a:	d802      	bhi.n	8003142 <HAL_TIM_ConfigClockSource+0x62>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d06f      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003140:	e078      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003142:	2b20      	cmp	r3, #32
 8003144:	d06c      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0x140>
 8003146:	2b30      	cmp	r3, #48	; 0x30
 8003148:	d06a      	beq.n	8003220 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800314a:	e073      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800314c:	2b70      	cmp	r3, #112	; 0x70
 800314e:	d00d      	beq.n	800316c <HAL_TIM_ConfigClockSource+0x8c>
 8003150:	2b70      	cmp	r3, #112	; 0x70
 8003152:	d804      	bhi.n	800315e <HAL_TIM_ConfigClockSource+0x7e>
 8003154:	2b50      	cmp	r3, #80	; 0x50
 8003156:	d033      	beq.n	80031c0 <HAL_TIM_ConfigClockSource+0xe0>
 8003158:	2b60      	cmp	r3, #96	; 0x60
 800315a:	d041      	beq.n	80031e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800315c:	e06a      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800315e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003162:	d066      	beq.n	8003232 <HAL_TIM_ConfigClockSource+0x152>
 8003164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003168:	d017      	beq.n	800319a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800316a:	e063      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	6899      	ldr	r1, [r3, #8]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f000 faf5 	bl	800376a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800318e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	609a      	str	r2, [r3, #8]
      break;
 8003198:	e04c      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6899      	ldr	r1, [r3, #8]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f000 fade 	bl	800376a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031bc:	609a      	str	r2, [r3, #8]
      break;
 80031be:	e039      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	461a      	mov	r2, r3
 80031ce:	f000 fa55 	bl	800367c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2150      	movs	r1, #80	; 0x50
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 faac 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 80031de:	e029      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	461a      	mov	r2, r3
 80031ee:	f000 fa73 	bl	80036d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2160      	movs	r1, #96	; 0x60
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa9c 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 80031fe:	e019      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	461a      	mov	r2, r3
 800320e:	f000 fa35 	bl	800367c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa8c 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 800321e:	e009      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f000 fa83 	bl	8003736 <TIM_ITRx_SetConfig>
      break;
 8003230:	e000      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003272:	b480      	push	{r7}
 8003274:	b083      	sub	sp, #12
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	bc80      	pop	{r7}
 8003282:	4770      	bx	lr

08003284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	4770      	bx	lr

08003296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <TIM_Base_SetConfig+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x30>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x30>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a26      	ldr	r2, [pc, #152]	; (8003364 <TIM_Base_SetConfig+0xbc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x30>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <TIM_Base_SetConfig+0xc0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <TIM_Base_SetConfig+0xb8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x62>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x62>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <TIM_Base_SetConfig+0xbc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <TIM_Base_SetConfig+0xc0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <TIM_Base_SetConfig+0xb8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d103      	bne.n	8003350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	615a      	str	r2, [r3, #20]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr
 8003360:	40012c00 	.word	0x40012c00
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800

0800336c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	f023 0201 	bic.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0303 	bic.w	r3, r3, #3
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0302 	bic.w	r3, r3, #2
 80033b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	; (8003434 <TIM_OC1_SetConfig+0xc8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d10c      	bne.n	80033e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0308 	bic.w	r3, r3, #8
 80033ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f023 0304 	bic.w	r3, r3, #4
 80033e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a13      	ldr	r2, [pc, #76]	; (8003434 <TIM_OC1_SetConfig+0xc8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d111      	bne.n	800340e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	621a      	str	r2, [r3, #32]
}
 8003428:	bf00      	nop
 800342a:	371c      	adds	r7, #28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40012c00 	.word	0x40012c00

08003438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a1b      	ldr	r3, [r3, #32]
 8003446:	f023 0210 	bic.w	r2, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800346e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f023 0320 	bic.w	r3, r3, #32
 8003482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <TIM_OC2_SetConfig+0xd0>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d10d      	bne.n	80034b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800349e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a14      	ldr	r2, [pc, #80]	; (8003508 <TIM_OC2_SetConfig+0xd0>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d113      	bne.n	80034e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	621a      	str	r2, [r3, #32]
}
 80034fe:	bf00      	nop
 8003500:	371c      	adds	r7, #28
 8003502:	46bd      	mov	sp, r7
 8003504:	bc80      	pop	{r7}
 8003506:	4770      	bx	lr
 8003508:	40012c00 	.word	0x40012c00

0800350c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d10d      	bne.n	8003586 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <TIM_OC3_SetConfig+0xd0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d113      	bne.n	80035b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	011b      	lsls	r3, r3, #4
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	621a      	str	r2, [r3, #32]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bc80      	pop	{r7}
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00

080035e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800362a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a0f      	ldr	r2, [pc, #60]	; (8003678 <TIM_OC4_SetConfig+0x98>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d109      	bne.n	8003654 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	019b      	lsls	r3, r3, #6
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4313      	orrs	r3, r2
 8003652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	40012c00 	.word	0x40012c00

0800367c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f023 0201 	bic.w	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	011b      	lsls	r3, r3, #4
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 030a 	bic.w	r3, r3, #10
 80036b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4313      	orrs	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	bf00      	nop
 80036d0:	371c      	adds	r7, #28
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f023 0210 	bic.w	r2, r3, #16
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	031b      	lsls	r3, r3, #12
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	697a      	ldr	r2, [r7, #20]
 8003724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	621a      	str	r2, [r3, #32]
}
 800372c:	bf00      	nop
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	bc80      	pop	{r7}
 8003734:	4770      	bx	lr

08003736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003736:	b480      	push	{r7}
 8003738:	b085      	sub	sp, #20
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4313      	orrs	r3, r2
 8003754:	f043 0307 	orr.w	r3, r3, #7
 8003758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	609a      	str	r2, [r3, #8]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800376a:	b480      	push	{r7}
 800376c:	b087      	sub	sp, #28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003784:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	021a      	lsls	r2, r3, #8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	431a      	orrs	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	4313      	orrs	r3, r2
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	609a      	str	r2, [r3, #8]
}
 800379e:	bf00      	nop
 80037a0:	371c      	adds	r7, #28
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bc80      	pop	{r7}
 80037a6:	4770      	bx	lr

080037a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037bc:	2302      	movs	r3, #2
 80037be:	e032      	b.n	8003826 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2202      	movs	r2, #2
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	4313      	orrs	r3, r2
 8003802:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	bc80      	pop	{r7}
 8003840:	4770      	bx	lr

08003842 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003854:	b084      	sub	sp, #16
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	f107 0014 	add.w	r0, r7, #20
 8003862:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	bc80      	pop	{r7}
 8003870:	b004      	add	sp, #16
 8003872:	4770      	bx	lr

08003874 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800387c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003880:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003888:	b29a      	uxth	r2, r3
 800388a:	89fb      	ldrh	r3, [r7, #14]
 800388c:	4313      	orrs	r3, r2
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b085      	sub	sp, #20
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80038aa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80038ae:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	b21a      	sxth	r2, r3
 80038ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038be:	43db      	mvns	r3, r3
 80038c0:	b21b      	sxth	r3, r3
 80038c2:	4013      	ands	r3, r2
 80038c4:	b21b      	sxth	r3, r3
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038f2:	b084      	sub	sp, #16
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	f107 0014 	add.w	r0, r7, #20
 8003900:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ffa5 	bl	8003874 <USB_EnableGlobalInt>

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003936:	b004      	add	sp, #16
 8003938:	4770      	bx	lr
	...

0800393c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800393c:	b490      	push	{r4, r7}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	881b      	ldrh	r3, [r3, #0]
 8003956:	b29b      	uxth	r3, r3
 8003958:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800395c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003960:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	78db      	ldrb	r3, [r3, #3]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d819      	bhi.n	800399e <USB_ActivateEndpoint+0x62>
 800396a:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <USB_ActivateEndpoint+0x34>)
 800396c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003970:	08003981 	.word	0x08003981
 8003974:	08003995 	.word	0x08003995
 8003978:	080039a5 	.word	0x080039a5
 800397c:	0800398b 	.word	0x0800398b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003980:	89bb      	ldrh	r3, [r7, #12]
 8003982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003986:	81bb      	strh	r3, [r7, #12]
      break;
 8003988:	e00d      	b.n	80039a6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800398a:	89bb      	ldrh	r3, [r7, #12]
 800398c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003990:	81bb      	strh	r3, [r7, #12]
      break;
 8003992:	e008      	b.n	80039a6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003994:	89bb      	ldrh	r3, [r7, #12]
 8003996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399a:	81bb      	strh	r3, [r7, #12]
      break;
 800399c:	e003      	b.n	80039a6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      break;
 80039a2:	e000      	b.n	80039a6 <USB_ActivateEndpoint+0x6a>
      break;
 80039a4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	89bb      	ldrh	r3, [r7, #12]
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039dc:	b29a      	uxth	r2, r3
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b29c      	uxth	r4, r3
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	4b8a      	ldr	r3, [pc, #552]	; (8003c1c <USB_ActivateEndpoint+0x2e0>)
 80039f4:	4323      	orrs	r3, r4
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	7b1b      	ldrb	r3, [r3, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f040 8112 	bne.w	8003c28 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	785b      	ldrb	r3, [r3, #1]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d067      	beq.n	8003adc <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a0c:	687c      	ldr	r4, [r7, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	441c      	add	r4, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	4423      	add	r3, r4
 8003a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a24:	461c      	mov	r4, r3
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	88db      	ldrh	r3, [r3, #6]
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29c      	uxth	r4, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d014      	beq.n	8003a76 <USB_ActivateEndpoint+0x13a>
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	b29c      	uxth	r4, r3
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	4b6c      	ldr	r3, [pc, #432]	; (8003c20 <USB_ActivateEndpoint+0x2e4>)
 8003a70:	4323      	orrs	r3, r4
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	78db      	ldrb	r3, [r3, #3]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d018      	beq.n	8003ab0 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a94:	b29c      	uxth	r4, r3
 8003a96:	f084 0320 	eor.w	r3, r4, #32
 8003a9a:	b29c      	uxth	r4, r3
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	441a      	add	r2, r3
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <USB_ActivateEndpoint+0x2e0>)
 8003aa8:	4323      	orrs	r3, r4
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	8013      	strh	r3, [r2, #0]
 8003aae:	e22b      	b.n	8003f08 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ac6:	b29c      	uxth	r4, r3
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	441a      	add	r2, r3
 8003ad2:	4b52      	ldr	r3, [pc, #328]	; (8003c1c <USB_ActivateEndpoint+0x2e0>)
 8003ad4:	4323      	orrs	r3, r4
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	8013      	strh	r3, [r2, #0]
 8003ada:	e215      	b.n	8003f08 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003adc:	687c      	ldr	r4, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	441c      	add	r4, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	011b      	lsls	r3, r3, #4
 8003aee:	4423      	add	r3, r4
 8003af0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003af4:	461c      	mov	r4, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	88db      	ldrh	r3, [r3, #6]
 8003afa:	085b      	lsrs	r3, r3, #1
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b04:	687c      	ldr	r4, [r7, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	441c      	add	r4, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	4423      	add	r3, r4
 8003b18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b1c:	461c      	mov	r4, r3
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10e      	bne.n	8003b44 <USB_ActivateEndpoint+0x208>
 8003b26:	8823      	ldrh	r3, [r4, #0]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	8023      	strh	r3, [r4, #0]
 8003b32:	8823      	ldrh	r3, [r4, #0]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	8023      	strh	r3, [r4, #0]
 8003b42:	e02d      	b.n	8003ba0 <USB_ActivateEndpoint+0x264>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	2b3e      	cmp	r3, #62	; 0x3e
 8003b4a:	d812      	bhi.n	8003b72 <USB_ActivateEndpoint+0x236>
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	691b      	ldr	r3, [r3, #16]
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <USB_ActivateEndpoint+0x22a>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	8023      	strh	r3, [r4, #0]
 8003b70:	e016      	b.n	8003ba0 <USB_ActivateEndpoint+0x264>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <USB_ActivateEndpoint+0x250>
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29c      	uxth	r4, r3
 8003bae:	4623      	mov	r3, r4
 8003bb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d014      	beq.n	8003be2 <USB_ActivateEndpoint+0x2a6>
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	881b      	ldrh	r3, [r3, #0]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bce:	b29c      	uxth	r4, r3
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	441a      	add	r2, r3
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <USB_ActivateEndpoint+0x2e8>)
 8003bdc:	4323      	orrs	r3, r4
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bf8:	b29c      	uxth	r4, r3
 8003bfa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bfe:	b29c      	uxth	r4, r3
 8003c00:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003c04:	b29c      	uxth	r4, r3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	441a      	add	r2, r3
 8003c10:	4b02      	ldr	r3, [pc, #8]	; (8003c1c <USB_ActivateEndpoint+0x2e0>)
 8003c12:	4323      	orrs	r3, r4
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	8013      	strh	r3, [r2, #0]
 8003c18:	e176      	b.n	8003f08 <USB_ActivateEndpoint+0x5cc>
 8003c1a:	bf00      	nop
 8003c1c:	ffff8080 	.word	0xffff8080
 8003c20:	ffff80c0 	.word	0xffff80c0
 8003c24:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3e:	b29c      	uxth	r4, r3
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	4b96      	ldr	r3, [pc, #600]	; (8003ea4 <USB_ActivateEndpoint+0x568>)
 8003c4c:	4323      	orrs	r3, r4
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c52:	687c      	ldr	r4, [r7, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	441c      	add	r4, r3
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4423      	add	r3, r4
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	891b      	ldrh	r3, [r3, #8]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	8023      	strh	r3, [r4, #0]
 8003c7a:	687c      	ldr	r4, [r7, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	441c      	add	r4, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4423      	add	r3, r4
 8003c8e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c92:	461c      	mov	r4, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	895b      	ldrh	r3, [r3, #10]
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	785b      	ldrb	r3, [r3, #1]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 8088 	bne.w	8003dbc <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29c      	uxth	r4, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d014      	beq.n	8003cee <USB_ActivateEndpoint+0x3b2>
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	881b      	ldrh	r3, [r3, #0]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	b29c      	uxth	r4, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	441a      	add	r2, r3
 8003ce6:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <USB_ActivateEndpoint+0x56c>)
 8003ce8:	4323      	orrs	r3, r4
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29c      	uxth	r4, r3
 8003cfc:	4623      	mov	r3, r4
 8003cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d014      	beq.n	8003d30 <USB_ActivateEndpoint+0x3f4>
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1c:	b29c      	uxth	r4, r3
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	441a      	add	r2, r3
 8003d28:	4b60      	ldr	r3, [pc, #384]	; (8003eac <USB_ActivateEndpoint+0x570>)
 8003d2a:	4323      	orrs	r3, r4
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	4413      	add	r3, r2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d46:	b29c      	uxth	r4, r3
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	441a      	add	r2, r3
 8003d52:	4b56      	ldr	r3, [pc, #344]	; (8003eac <USB_ActivateEndpoint+0x570>)
 8003d54:	4323      	orrs	r3, r4
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	b29c      	uxth	r4, r3
 8003d72:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d76:	b29c      	uxth	r4, r3
 8003d78:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d7c:	b29c      	uxth	r4, r3
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	4b49      	ldr	r3, [pc, #292]	; (8003eb0 <USB_ActivateEndpoint+0x574>)
 8003d8a:	4323      	orrs	r3, r4
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4413      	add	r3, r2
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da6:	b29c      	uxth	r4, r3
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	441a      	add	r2, r3
 8003db2:	4b3f      	ldr	r3, [pc, #252]	; (8003eb0 <USB_ActivateEndpoint+0x574>)
 8003db4:	4323      	orrs	r3, r4
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
 8003dba:	e0a5      	b.n	8003f08 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	b29c      	uxth	r4, r3
 8003dca:	4623      	mov	r3, r4
 8003dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d014      	beq.n	8003dfe <USB_ActivateEndpoint+0x4c2>
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dea:	b29c      	uxth	r4, r3
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	441a      	add	r2, r3
 8003df6:	4b2c      	ldr	r3, [pc, #176]	; (8003ea8 <USB_ActivateEndpoint+0x56c>)
 8003df8:	4323      	orrs	r3, r4
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29c      	uxth	r4, r3
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d014      	beq.n	8003e40 <USB_ActivateEndpoint+0x504>
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2c:	b29c      	uxth	r4, r3
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <USB_ActivateEndpoint+0x570>)
 8003e3a:	4323      	orrs	r3, r4
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e56:	b29c      	uxth	r4, r3
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	441a      	add	r2, r3
 8003e62:	4b11      	ldr	r3, [pc, #68]	; (8003ea8 <USB_ActivateEndpoint+0x56c>)
 8003e64:	4323      	orrs	r3, r4
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	78db      	ldrb	r3, [r3, #3]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d020      	beq.n	8003eb4 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e88:	b29c      	uxth	r4, r3
 8003e8a:	f084 0320 	eor.w	r3, r4, #32
 8003e8e:	b29c      	uxth	r4, r3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	441a      	add	r2, r3
 8003e9a:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <USB_ActivateEndpoint+0x574>)
 8003e9c:	4323      	orrs	r3, r4
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]
 8003ea2:	e01c      	b.n	8003ede <USB_ActivateEndpoint+0x5a2>
 8003ea4:	ffff8180 	.word	0xffff8180
 8003ea8:	ffffc080 	.word	0xffffc080
 8003eac:	ffff80c0 	.word	0xffff80c0
 8003eb0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	b29c      	uxth	r4, r3
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <USB_ActivateEndpoint+0x5d8>)
 8003ed8:	4323      	orrs	r3, r4
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	b29c      	uxth	r4, r3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	441a      	add	r2, r3
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <USB_ActivateEndpoint+0x5d8>)
 8003f02:	4323      	orrs	r3, r4
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bc90      	pop	{r4, r7}
 8003f12:	4770      	bx	lr
 8003f14:	ffff8080 	.word	0xffff8080

08003f18 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f18:	b490      	push	{r4, r7}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	7b1b      	ldrb	r3, [r3, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d171      	bne.n	800400e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	785b      	ldrb	r3, [r3, #1]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d036      	beq.n	8003fa0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	4413      	add	r3, r2
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	b29c      	uxth	r4, r3
 8003f40:	4623      	mov	r3, r4
 8003f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <USB_DeactivateEndpoint+0x5c>
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	b29c      	uxth	r4, r3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	441a      	add	r2, r3
 8003f6c:	4b6b      	ldr	r3, [pc, #428]	; (800411c <USB_DeactivateEndpoint+0x204>)
 8003f6e:	4323      	orrs	r3, r4
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f8a:	b29c      	uxth	r4, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	441a      	add	r2, r3
 8003f96:	4b62      	ldr	r3, [pc, #392]	; (8004120 <USB_DeactivateEndpoint+0x208>)
 8003f98:	4323      	orrs	r3, r4
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	8013      	strh	r3, [r2, #0]
 8003f9e:	e144      	b.n	800422a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29c      	uxth	r4, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d014      	beq.n	8003fe2 <USB_DeactivateEndpoint+0xca>
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	b29c      	uxth	r4, r3
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	441a      	add	r2, r3
 8003fda:	4b52      	ldr	r3, [pc, #328]	; (8004124 <USB_DeactivateEndpoint+0x20c>)
 8003fdc:	4323      	orrs	r3, r4
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff8:	b29c      	uxth	r4, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	441a      	add	r2, r3
 8004004:	4b46      	ldr	r3, [pc, #280]	; (8004120 <USB_DeactivateEndpoint+0x208>)
 8004006:	4323      	orrs	r3, r4
 8004008:	b29b      	uxth	r3, r3
 800400a:	8013      	strh	r3, [r2, #0]
 800400c:	e10d      	b.n	800422a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	785b      	ldrb	r3, [r3, #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 8088 	bne.w	8004128 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	4413      	add	r3, r2
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29c      	uxth	r4, r3
 8004026:	4623      	mov	r3, r4
 8004028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <USB_DeactivateEndpoint+0x142>
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	b29c      	uxth	r4, r3
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	4b34      	ldr	r3, [pc, #208]	; (8004124 <USB_DeactivateEndpoint+0x20c>)
 8004054:	4323      	orrs	r3, r4
 8004056:	b29b      	uxth	r3, r3
 8004058:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29c      	uxth	r4, r3
 8004068:	4623      	mov	r3, r4
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d014      	beq.n	800409c <USB_DeactivateEndpoint+0x184>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	b29c      	uxth	r4, r3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <USB_DeactivateEndpoint+0x204>)
 8004096:	4323      	orrs	r3, r4
 8004098:	b29b      	uxth	r3, r3
 800409a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	b29c      	uxth	r4, r3
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	441a      	add	r2, r3
 80040be:	4b17      	ldr	r3, [pc, #92]	; (800411c <USB_DeactivateEndpoint+0x204>)
 80040c0:	4323      	orrs	r3, r4
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	b29c      	uxth	r4, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <USB_DeactivateEndpoint+0x208>)
 80040ea:	4323      	orrs	r3, r4
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004102:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004106:	b29c      	uxth	r4, r3
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	441a      	add	r2, r3
 8004112:	4b03      	ldr	r3, [pc, #12]	; (8004120 <USB_DeactivateEndpoint+0x208>)
 8004114:	4323      	orrs	r3, r4
 8004116:	b29b      	uxth	r3, r3
 8004118:	8013      	strh	r3, [r2, #0]
 800411a:	e086      	b.n	800422a <USB_DeactivateEndpoint+0x312>
 800411c:	ffff80c0 	.word	0xffff80c0
 8004120:	ffff8080 	.word	0xffff8080
 8004124:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29c      	uxth	r4, r3
 8004136:	4623      	mov	r3, r4
 8004138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d014      	beq.n	800416a <USB_DeactivateEndpoint+0x252>
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	b29b      	uxth	r3, r3
 800414e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004156:	b29c      	uxth	r4, r3
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	4b35      	ldr	r3, [pc, #212]	; (8004238 <USB_DeactivateEndpoint+0x320>)
 8004164:	4323      	orrs	r3, r4
 8004166:	b29b      	uxth	r3, r3
 8004168:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29c      	uxth	r4, r3
 8004178:	4623      	mov	r3, r4
 800417a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <USB_DeactivateEndpoint+0x294>
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	b29c      	uxth	r4, r3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	441a      	add	r2, r3
 80041a4:	4b25      	ldr	r3, [pc, #148]	; (800423c <USB_DeactivateEndpoint+0x324>)
 80041a6:	4323      	orrs	r3, r4
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c2:	b29c      	uxth	r4, r3
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	4b1a      	ldr	r3, [pc, #104]	; (8004238 <USB_DeactivateEndpoint+0x320>)
 80041d0:	4323      	orrs	r3, r4
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ec:	b29c      	uxth	r4, r3
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	441a      	add	r2, r3
 80041f8:	4b11      	ldr	r3, [pc, #68]	; (8004240 <USB_DeactivateEndpoint+0x328>)
 80041fa:	4323      	orrs	r3, r4
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	b29b      	uxth	r3, r3
 800420e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004216:	b29c      	uxth	r4, r3
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	441a      	add	r2, r3
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <USB_DeactivateEndpoint+0x328>)
 8004224:	4323      	orrs	r3, r4
 8004226:	b29b      	uxth	r3, r3
 8004228:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bc90      	pop	{r4, r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	ffffc080 	.word	0xffffc080
 800423c:	ffff80c0 	.word	0xffff80c0
 8004240:	ffff8080 	.word	0xffff8080

08004244 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b08d      	sub	sp, #52	; 0x34
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 8160 	bne.w	8004518 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	d909      	bls.n	8004278 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699a      	ldr	r2, [r3, #24]
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	1ad2      	subs	r2, r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	619a      	str	r2, [r3, #24]
 8004276:	e005      	b.n	8004284 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	7b1b      	ldrb	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d119      	bne.n	80042c0 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6959      	ldr	r1, [r3, #20]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	88da      	ldrh	r2, [r3, #6]
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	b29b      	uxth	r3, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fba2 	bl	80049e2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800429e:	687c      	ldr	r4, [r7, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	441c      	add	r4, r3
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	4423      	add	r3, r4
 80042b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042b6:	461c      	mov	r4, r3
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	8023      	strh	r3, [r4, #0]
 80042be:	e10f      	b.n	80044e0 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d065      	beq.n	80043a2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042d6:	687c      	ldr	r4, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	785b      	ldrb	r3, [r3, #1]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d148      	bne.n	8004372 <USB_EPStartXfer+0x12e>
 80042e0:	687c      	ldr	r4, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	441c      	add	r4, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4423      	add	r3, r4
 80042f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042f8:	461c      	mov	r4, r3
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10e      	bne.n	800431e <USB_EPStartXfer+0xda>
 8004300:	8823      	ldrh	r3, [r4, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004308:	b29b      	uxth	r3, r3
 800430a:	8023      	strh	r3, [r4, #0]
 800430c:	8823      	ldrh	r3, [r4, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004318:	b29b      	uxth	r3, r3
 800431a:	8023      	strh	r3, [r4, #0]
 800431c:	e03d      	b.n	800439a <USB_EPStartXfer+0x156>
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	2b3e      	cmp	r3, #62	; 0x3e
 8004322:	d810      	bhi.n	8004346 <USB_EPStartXfer+0x102>
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <USB_EPStartXfer+0xf6>
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	3301      	adds	r3, #1
 8004338:	627b      	str	r3, [r7, #36]	; 0x24
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	b29b      	uxth	r3, r3
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	b29b      	uxth	r3, r3
 8004342:	8023      	strh	r3, [r4, #0]
 8004344:	e029      	b.n	800439a <USB_EPStartXfer+0x156>
 8004346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <USB_EPStartXfer+0x118>
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	3b01      	subs	r3, #1
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	b29b      	uxth	r3, r3
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	b29b      	uxth	r3, r3
 8004364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800436c:	b29b      	uxth	r3, r3
 800436e:	8023      	strh	r3, [r4, #0]
 8004370:	e013      	b.n	800439a <USB_EPStartXfer+0x156>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d10f      	bne.n	800439a <USB_EPStartXfer+0x156>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004380:	b29b      	uxth	r3, r3
 8004382:	441c      	add	r4, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	4423      	add	r3, r4
 800438c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	b29a      	uxth	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	895b      	ldrh	r3, [r3, #10]
 800439e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80043a0:	e063      	b.n	800446a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	785b      	ldrb	r3, [r3, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d148      	bne.n	800443c <USB_EPStartXfer+0x1f8>
 80043aa:	687c      	ldr	r4, [r7, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	441c      	add	r4, r3
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	4423      	add	r3, r4
 80043be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043c2:	461c      	mov	r4, r3
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10e      	bne.n	80043e8 <USB_EPStartXfer+0x1a4>
 80043ca:	8823      	ldrh	r3, [r4, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	8023      	strh	r3, [r4, #0]
 80043d6:	8823      	ldrh	r3, [r4, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	8023      	strh	r3, [r4, #0]
 80043e6:	e03d      	b.n	8004464 <USB_EPStartXfer+0x220>
 80043e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ea:	2b3e      	cmp	r3, #62	; 0x3e
 80043ec:	d810      	bhi.n	8004410 <USB_EPStartXfer+0x1cc>
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	623b      	str	r3, [r7, #32]
 80043f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <USB_EPStartXfer+0x1c0>
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	3301      	adds	r3, #1
 8004402:	623b      	str	r3, [r7, #32]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	b29b      	uxth	r3, r3
 8004408:	029b      	lsls	r3, r3, #10
 800440a:	b29b      	uxth	r3, r3
 800440c:	8023      	strh	r3, [r4, #0]
 800440e:	e029      	b.n	8004464 <USB_EPStartXfer+0x220>
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <USB_EPStartXfer+0x1e2>
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	3b01      	subs	r3, #1
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	b29b      	uxth	r3, r3
 800442a:	029b      	lsls	r3, r3, #10
 800442c:	b29b      	uxth	r3, r3
 800442e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004436:	b29b      	uxth	r3, r3
 8004438:	8023      	strh	r3, [r4, #0]
 800443a:	e013      	b.n	8004464 <USB_EPStartXfer+0x220>
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d10f      	bne.n	8004464 <USB_EPStartXfer+0x220>
 8004444:	687c      	ldr	r4, [r7, #4]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444c:	b29b      	uxth	r3, r3
 800444e:	441c      	add	r4, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	4423      	add	r3, r4
 8004458:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800445c:	461c      	mov	r4, r3
 800445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004460:	b29b      	uxth	r3, r3
 8004462:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	891b      	ldrh	r3, [r3, #8]
 8004468:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	6959      	ldr	r1, [r3, #20]
 800446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004470:	b29b      	uxth	r3, r3
 8004472:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fab4 	bl	80049e2 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	785b      	ldrb	r3, [r3, #1]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d115      	bne.n	80044ae <USB_EPStartXfer+0x26a>
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004498:	b29c      	uxth	r4, r3
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	4b9a      	ldr	r3, [pc, #616]	; (8004710 <USB_EPStartXfer+0x4cc>)
 80044a6:	4323      	orrs	r3, r4
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	8013      	strh	r3, [r2, #0]
 80044ac:	e018      	b.n	80044e0 <USB_EPStartXfer+0x29c>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d114      	bne.n	80044e0 <USB_EPStartXfer+0x29c>
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044cc:	b29c      	uxth	r4, r3
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	4b8e      	ldr	r3, [pc, #568]	; (8004714 <USB_EPStartXfer+0x4d0>)
 80044da:	4323      	orrs	r3, r4
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f6:	b29c      	uxth	r4, r3
 80044f8:	f084 0310 	eor.w	r3, r4, #16
 80044fc:	b29c      	uxth	r4, r3
 80044fe:	f084 0320 	eor.w	r3, r4, #32
 8004502:	b29c      	uxth	r4, r3
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	4b82      	ldr	r3, [pc, #520]	; (8004718 <USB_EPStartXfer+0x4d4>)
 8004510:	4323      	orrs	r3, r4
 8004512:	b29b      	uxth	r3, r3
 8004514:	8013      	strh	r3, [r2, #0]
 8004516:	e146      	b.n	80047a6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	699a      	ldr	r2, [r3, #24]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	429a      	cmp	r2, r3
 8004522:	d909      	bls.n	8004538 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	1ad2      	subs	r2, r2, r3
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	619a      	str	r2, [r3, #24]
 8004536:	e005      	b.n	8004544 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	2200      	movs	r2, #0
 8004542:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	7b1b      	ldrb	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d148      	bne.n	80045de <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800454c:	687c      	ldr	r4, [r7, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004554:	b29b      	uxth	r3, r3
 8004556:	441c      	add	r4, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4423      	add	r3, r4
 8004560:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004564:	461c      	mov	r4, r3
 8004566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10e      	bne.n	800458a <USB_EPStartXfer+0x346>
 800456c:	8823      	ldrh	r3, [r4, #0]
 800456e:	b29b      	uxth	r3, r3
 8004570:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004574:	b29b      	uxth	r3, r3
 8004576:	8023      	strh	r3, [r4, #0]
 8004578:	8823      	ldrh	r3, [r4, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29b      	uxth	r3, r3
 8004586:	8023      	strh	r3, [r4, #0]
 8004588:	e0f2      	b.n	8004770 <USB_EPStartXfer+0x52c>
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2b3e      	cmp	r3, #62	; 0x3e
 800458e:	d810      	bhi.n	80045b2 <USB_EPStartXfer+0x36e>
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	085b      	lsrs	r3, r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <USB_EPStartXfer+0x362>
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	3301      	adds	r3, #1
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	029b      	lsls	r3, r3, #10
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8023      	strh	r3, [r4, #0]
 80045b0:	e0de      	b.n	8004770 <USB_EPStartXfer+0x52c>
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <USB_EPStartXfer+0x384>
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	029b      	lsls	r3, r3, #10
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d8:	b29b      	uxth	r3, r3
 80045da:	8023      	strh	r3, [r4, #0]
 80045dc:	e0c8      	b.n	8004770 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	785b      	ldrb	r3, [r3, #1]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d148      	bne.n	8004678 <USB_EPStartXfer+0x434>
 80045e6:	687c      	ldr	r4, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	441c      	add	r4, r3
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	4423      	add	r3, r4
 80045fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045fe:	461c      	mov	r4, r3
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10e      	bne.n	8004624 <USB_EPStartXfer+0x3e0>
 8004606:	8823      	ldrh	r3, [r4, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800460e:	b29b      	uxth	r3, r3
 8004610:	8023      	strh	r3, [r4, #0]
 8004612:	8823      	ldrh	r3, [r4, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29b      	uxth	r3, r3
 8004620:	8023      	strh	r3, [r4, #0]
 8004622:	e03d      	b.n	80046a0 <USB_EPStartXfer+0x45c>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	2b3e      	cmp	r3, #62	; 0x3e
 8004628:	d810      	bhi.n	800464c <USB_EPStartXfer+0x408>
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d002      	beq.n	8004640 <USB_EPStartXfer+0x3fc>
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3301      	adds	r3, #1
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	b29b      	uxth	r3, r3
 8004644:	029b      	lsls	r3, r3, #10
 8004646:	b29b      	uxth	r3, r3
 8004648:	8023      	strh	r3, [r4, #0]
 800464a:	e029      	b.n	80046a0 <USB_EPStartXfer+0x45c>
 800464c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	61bb      	str	r3, [r7, #24]
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	f003 031f 	and.w	r3, r3, #31
 8004658:	2b00      	cmp	r3, #0
 800465a:	d102      	bne.n	8004662 <USB_EPStartXfer+0x41e>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	3b01      	subs	r3, #1
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	b29b      	uxth	r3, r3
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	b29b      	uxth	r3, r3
 800466a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004672:	b29b      	uxth	r3, r3
 8004674:	8023      	strh	r3, [r4, #0]
 8004676:	e013      	b.n	80046a0 <USB_EPStartXfer+0x45c>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	785b      	ldrb	r3, [r3, #1]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d10f      	bne.n	80046a0 <USB_EPStartXfer+0x45c>
 8004680:	687c      	ldr	r4, [r7, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004688:	b29b      	uxth	r3, r3
 800468a:	441c      	add	r4, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	4423      	add	r3, r4
 8004694:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004698:	461c      	mov	r4, r3
 800469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469c:	b29b      	uxth	r3, r3
 800469e:	8023      	strh	r3, [r4, #0]
 80046a0:	687c      	ldr	r4, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d14e      	bne.n	8004748 <USB_EPStartXfer+0x504>
 80046aa:	687c      	ldr	r4, [r7, #4]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	441c      	add	r4, r3
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4423      	add	r3, r4
 80046be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046c2:	461c      	mov	r4, r3
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10e      	bne.n	80046e8 <USB_EPStartXfer+0x4a4>
 80046ca:	8823      	ldrh	r3, [r4, #0]
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8023      	strh	r3, [r4, #0]
 80046d6:	8823      	ldrh	r3, [r4, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	8023      	strh	r3, [r4, #0]
 80046e6:	e043      	b.n	8004770 <USB_EPStartXfer+0x52c>
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	2b3e      	cmp	r3, #62	; 0x3e
 80046ec:	d816      	bhi.n	800471c <USB_EPStartXfer+0x4d8>
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	085b      	lsrs	r3, r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <USB_EPStartXfer+0x4c0>
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3301      	adds	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	b29b      	uxth	r3, r3
 8004708:	029b      	lsls	r3, r3, #10
 800470a:	b29b      	uxth	r3, r3
 800470c:	8023      	strh	r3, [r4, #0]
 800470e:	e02f      	b.n	8004770 <USB_EPStartXfer+0x52c>
 8004710:	ffff80c0 	.word	0xffff80c0
 8004714:	ffffc080 	.word	0xffffc080
 8004718:	ffff8080 	.word	0xffff8080
 800471c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	617b      	str	r3, [r7, #20]
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <USB_EPStartXfer+0x4ee>
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	3b01      	subs	r3, #1
 8004730:	617b      	str	r3, [r7, #20]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	b29b      	uxth	r3, r3
 8004736:	029b      	lsls	r3, r3, #10
 8004738:	b29b      	uxth	r3, r3
 800473a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004742:	b29b      	uxth	r3, r3
 8004744:	8023      	strh	r3, [r4, #0]
 8004746:	e013      	b.n	8004770 <USB_EPStartXfer+0x52c>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	785b      	ldrb	r3, [r3, #1]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d10f      	bne.n	8004770 <USB_EPStartXfer+0x52c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004756:	b29b      	uxth	r3, r3
 8004758:	441c      	add	r4, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	4423      	add	r3, r4
 8004762:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	b29a      	uxth	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	b29b      	uxth	r3, r3
 800477e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004786:	b29c      	uxth	r4, r3
 8004788:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800478c:	b29c      	uxth	r4, r3
 800478e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004792:	b29c      	uxth	r4, r3
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	441a      	add	r2, r3
 800479e:	4b04      	ldr	r3, [pc, #16]	; (80047b0 <USB_EPStartXfer+0x56c>)
 80047a0:	4323      	orrs	r3, r4
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3734      	adds	r7, #52	; 0x34
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd90      	pop	{r4, r7, pc}
 80047b0:	ffff8080 	.word	0xffff8080

080047b4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047b4:	b490      	push	{r4, r7}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d018      	beq.n	80047f8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4413      	add	r3, r2
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047dc:	b29c      	uxth	r4, r3
 80047de:	f084 0310 	eor.w	r3, r4, #16
 80047e2:	b29c      	uxth	r4, r3
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	441a      	add	r2, r3
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <USB_EPSetStall+0x80>)
 80047f0:	4323      	orrs	r3, r4
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	8013      	strh	r3, [r2, #0]
 80047f6:	e017      	b.n	8004828 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480e:	b29c      	uxth	r4, r3
 8004810:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004814:	b29c      	uxth	r4, r3
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	4b04      	ldr	r3, [pc, #16]	; (8004834 <USB_EPSetStall+0x80>)
 8004822:	4323      	orrs	r3, r4
 8004824:	b29b      	uxth	r3, r3
 8004826:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bc90      	pop	{r4, r7}
 8004832:	4770      	bx	lr
 8004834:	ffff8080 	.word	0xffff8080

08004838 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004838:	b490      	push	{r4, r7}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7b1b      	ldrb	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d17d      	bne.n	8004946 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	785b      	ldrb	r3, [r3, #1]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d03d      	beq.n	80048ce <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	881b      	ldrh	r3, [r3, #0]
 800485e:	b29c      	uxth	r4, r3
 8004860:	4623      	mov	r3, r4
 8004862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <USB_EPClearStall+0x5c>
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	881b      	ldrh	r3, [r3, #0]
 8004876:	b29b      	uxth	r3, r3
 8004878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004880:	b29c      	uxth	r4, r3
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	441a      	add	r2, r3
 800488c:	4b31      	ldr	r3, [pc, #196]	; (8004954 <USB_EPClearStall+0x11c>)
 800488e:	4323      	orrs	r3, r4
 8004890:	b29b      	uxth	r3, r3
 8004892:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	78db      	ldrb	r3, [r3, #3]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d054      	beq.n	8004946 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048b2:	b29c      	uxth	r4, r3
 80048b4:	f084 0320 	eor.w	r3, r4, #32
 80048b8:	b29c      	uxth	r4, r3
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	441a      	add	r2, r3
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <USB_EPClearStall+0x120>)
 80048c6:	4323      	orrs	r3, r4
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	8013      	strh	r3, [r2, #0]
 80048cc:	e03b      	b.n	8004946 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29c      	uxth	r4, r3
 80048dc:	4623      	mov	r3, r4
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d014      	beq.n	8004910 <USB_EPClearStall+0xd8>
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fc:	b29c      	uxth	r4, r3
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	441a      	add	r2, r3
 8004908:	4b14      	ldr	r3, [pc, #80]	; (800495c <USB_EPClearStall+0x124>)
 800490a:	4323      	orrs	r3, r4
 800490c:	b29b      	uxth	r3, r3
 800490e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004926:	b29c      	uxth	r4, r3
 8004928:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800492c:	b29c      	uxth	r4, r3
 800492e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004932:	b29c      	uxth	r4, r3
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <USB_EPClearStall+0x120>)
 8004940:	4323      	orrs	r3, r4
 8004942:	b29b      	uxth	r3, r3
 8004944:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bc90      	pop	{r4, r7}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	ffff80c0 	.word	0xffff80c0
 8004958:	ffff8080 	.word	0xffff8080
 800495c:	ffffc080 	.word	0xffffc080

08004960 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d103      	bne.n	800497a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2280      	movs	r2, #128	; 0x80
 8004976:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bc80      	pop	{r7}
 80049ac:	4770      	bx	lr

080049ae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049bc:	b29b      	uxth	r3, r3
 80049be:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80049c0:	68fb      	ldr	r3, [r7, #12]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bc80      	pop	{r7}
 80049ca:	4770      	bx	lr

080049cc <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b08d      	sub	sp, #52	; 0x34
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	4611      	mov	r1, r2
 80049ee:	461a      	mov	r2, r3
 80049f0:	460b      	mov	r3, r1
 80049f2:	80fb      	strh	r3, [r7, #6]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	3301      	adds	r3, #1
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	005a      	lsls	r2, r3, #1
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1a:	e01e      	b.n	8004a5a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	3301      	adds	r3, #1
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	3302      	adds	r3, #2
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	3302      	adds	r3, #2
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	3301      	adds	r3, #1
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a56:	3b01      	subs	r3, #1
 8004a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1dd      	bne.n	8004a1c <USB_WritePMA+0x3a>
  }
}
 8004a60:	bf00      	nop
 8004a62:	3734      	adds	r7, #52	; 0x34
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b08b      	sub	sp, #44	; 0x2c
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	4611      	mov	r1, r2
 8004a76:	461a      	mov	r2, r3
 8004a78:	460b      	mov	r3, r1
 8004a7a:	80fb      	strh	r3, [r7, #6]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004a80:	88bb      	ldrh	r3, [r7, #4]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a90:	88fb      	ldrh	r3, [r7, #6]
 8004a92:	005a      	lsls	r2, r3, #1
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa2:	e01b      	b.n	8004adc <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	3301      	adds	r3, #1
 8004abe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	0a1b      	lsrs	r3, r3, #8
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	3301      	adds	r3, #1
 8004ace:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	3302      	adds	r3, #2
 8004ad4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e0      	bne.n	8004aa4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ae2:	88bb      	ldrh	r3, [r7, #4]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d007      	beq.n	8004afe <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	701a      	strb	r2, [r3, #0]
  }
}
 8004afe:	bf00      	nop
 8004b00:	372c      	adds	r7, #44	; 0x2c
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b14:	2300      	movs	r3, #0
 8004b16:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	7c1b      	ldrb	r3, [r3, #16]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d115      	bne.n	8004b4c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b24:	2202      	movs	r2, #2
 8004b26:	2181      	movs	r1, #129	; 0x81
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f001 fe6a 	bl	8006802 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b38:	2202      	movs	r2, #2
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f001 fe60 	bl	8006802 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004b4a:	e012      	b.n	8004b72 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	2202      	movs	r2, #2
 8004b50:	2181      	movs	r1, #129	; 0x81
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f001 fe55 	bl	8006802 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b5e:	2340      	movs	r3, #64	; 0x40
 8004b60:	2202      	movs	r2, #2
 8004b62:	2101      	movs	r1, #1
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 fe4c 	bl	8006802 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b72:	2308      	movs	r3, #8
 8004b74:	2203      	movs	r2, #3
 8004b76:	2182      	movs	r1, #130	; 0x82
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f001 fe42 	bl	8006802 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b84:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b88:	f001 ff5c 	bl	8006a44 <USBD_static_malloc>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	73fb      	strb	r3, [r7, #15]
 8004ba2:	e026      	b.n	8004bf2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004baa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	7c1b      	ldrb	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd8:	2101      	movs	r1, #1
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f001 fefb 	bl	80069d6 <USBD_LL_PrepareReceive>
 8004be0:	e007      	b.n	8004bf2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004be8:	2340      	movs	r3, #64	; 0x40
 8004bea:	2101      	movs	r1, #1
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 fef2 	bl	80069d6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	460b      	mov	r3, r1
 8004c06:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c0c:	2181      	movs	r1, #129	; 0x81
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 fe1d 	bl	800684e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f001 fe16 	bl	800684e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c2a:	2182      	movs	r1, #130	; 0x82
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 fe0e 	bl	800684e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00e      	beq.n	8004c60 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 ff02 	bl	8006a5c <USBD_static_free>
    pdev->pClassData = NULL;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c7a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d039      	beq.n	8004d08 <USBD_CDC_Setup+0x9e>
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d17c      	bne.n	8004d92 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	88db      	ldrh	r3, [r3, #6]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d029      	beq.n	8004cf4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b25b      	sxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da11      	bge.n	8004cce <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004cb6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	88d2      	ldrh	r2, [r2, #6]
 8004cbc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004cbe:	6939      	ldr	r1, [r7, #16]
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	88db      	ldrh	r3, [r3, #6]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f001 f9f6 	bl	80060b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004ccc:	e068      	b.n	8004da0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	785a      	ldrb	r2, [r3, #1]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	88db      	ldrh	r3, [r3, #6]
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ce4:	6939      	ldr	r1, [r7, #16]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	88db      	ldrh	r3, [r3, #6]
 8004cea:	461a      	mov	r2, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 fa11 	bl	8006114 <USBD_CtlPrepareRx>
      break;
 8004cf2:	e055      	b.n	8004da0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	7850      	ldrb	r0, [r2, #1]
 8004d00:	2200      	movs	r2, #0
 8004d02:	6839      	ldr	r1, [r7, #0]
 8004d04:	4798      	blx	r3
      break;
 8004d06:	e04b      	b.n	8004da0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b0a      	cmp	r3, #10
 8004d0e:	d017      	beq.n	8004d40 <USBD_CDC_Setup+0xd6>
 8004d10:	2b0b      	cmp	r3, #11
 8004d12:	d029      	beq.n	8004d68 <USBD_CDC_Setup+0xfe>
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d133      	bne.n	8004d80 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d107      	bne.n	8004d32 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004d22:	f107 030c 	add.w	r3, r7, #12
 8004d26:	2202      	movs	r2, #2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f001 f9c4 	bl	80060b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d30:	e02e      	b.n	8004d90 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f955 	bl	8005fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d3e:	e027      	b.n	8004d90 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d4a:	f107 030f 	add.w	r3, r7, #15
 8004d4e:	2201      	movs	r2, #1
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f001 f9b0 	bl	80060b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d58:	e01a      	b.n	8004d90 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d5a:	6839      	ldr	r1, [r7, #0]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f001 f941 	bl	8005fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d62:	2302      	movs	r3, #2
 8004d64:	75fb      	strb	r3, [r7, #23]
          break;
 8004d66:	e013      	b.n	8004d90 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d00d      	beq.n	8004d8e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 f935 	bl	8005fe4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d7e:	e006      	b.n	8004d8e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f001 f92e 	bl	8005fe4 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	75fb      	strb	r3, [r7, #23]
          break;
 8004d8c:	e000      	b.n	8004d90 <USBD_CDC_Setup+0x126>
          break;
 8004d8e:	bf00      	nop
      }
      break;
 8004d90:	e006      	b.n	8004da0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004d92:	6839      	ldr	r1, [r7, #0]
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f001 f925 	bl	8005fe4 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9e:	bf00      	nop
  }

  return ret;
 8004da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	460b      	mov	r3, r1
 8004db4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dbc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dc4:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d037      	beq.n	8004e40 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	331c      	adds	r3, #28
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d026      	beq.n	8004e34 <USBD_CDC_DataIn+0x8a>
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	331c      	adds	r3, #28
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	78fa      	ldrb	r2, [r7, #3]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	0152      	lsls	r2, r2, #5
 8004dfe:	440a      	add	r2, r1
 8004e00:	3238      	adds	r2, #56	; 0x38
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e08:	fb02 f201 	mul.w	r2, r2, r1
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d110      	bne.n	8004e34 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004e12:	78fa      	ldrb	r2, [r7, #3]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	331c      	adds	r3, #28
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e26:	78f9      	ldrb	r1, [r7, #3]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 fdaf 	bl	8006990 <USBD_LL_Transmit>
 8004e32:	e003      	b.n	8004e3c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	e000      	b.n	8004e42 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004e40:	2302      	movs	r3, #2
  }
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b084      	sub	sp, #16
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	460b      	mov	r3, r1
 8004e54:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fdda 	bl	8006a1c <USBD_LL_GetRxDataSize>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4798      	blx	r3

    return USBD_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e000      	b.n	8004e98 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004e96:	2302      	movs	r3, #2
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eae:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d015      	beq.n	8004ee6 <USBD_CDC_EP0_RxReady+0x46>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ec0:	2bff      	cmp	r3, #255	; 0xff
 8004ec2:	d010      	beq.n	8004ee6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004ed2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004eda:	b292      	uxth	r2, r2
 8004edc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	22ff      	movs	r2, #255	; 0xff
 8004ee2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2243      	movs	r2, #67	; 0x43
 8004efc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004efe:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bc80      	pop	{r7}
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	20000098 	.word	0x20000098

08004f10 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2243      	movs	r2, #67	; 0x43
 8004f1c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004f1e:	4b03      	ldr	r3, [pc, #12]	; (8004f2c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	20000054 	.word	0x20000054

08004f30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2243      	movs	r2, #67	; 0x43
 8004f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004f3e:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	200000dc 	.word	0x200000dc

08004f50 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	220a      	movs	r2, #10
 8004f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	20000010 	.word	0x20000010

08004f70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d005      	beq.n	8004f90 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fde:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01c      	beq.n	8005048 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005014:	2b00      	cmp	r3, #0
 8005016:	d115      	bne.n	8005044 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2201      	movs	r2, #1
 800501c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005036:	b29b      	uxth	r3, r3
 8005038:	2181      	movs	r1, #129	; 0x81
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 fca8 	bl	8006990 <USBD_LL_Transmit>

      return USBD_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	e002      	b.n	800504a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005044:	2301      	movs	r3, #1
 8005046:	e000      	b.n	800504a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005060:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d017      	beq.n	800509c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	7c1b      	ldrb	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d109      	bne.n	8005088 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800507e:	2101      	movs	r1, #1
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f001 fca8 	bl	80069d6 <USBD_LL_PrepareReceive>
 8005086:	e007      	b.n	8005098 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800508e:	2340      	movs	r3, #64	; 0x40
 8005090:	2101      	movs	r1, #1
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f001 fc9f 	bl	80069d6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	e000      	b.n	800509e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800509c:	2302      	movs	r3, #2
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	4613      	mov	r3, r2
 80050b2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d101      	bne.n	80050be <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050ba:	2302      	movs	r3, #2
 80050bc:	e01a      	b.n	80050f4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	79fa      	ldrb	r2, [r7, #7]
 80050ea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f001 fb13 	bl	8006718 <USBD_LL_Init>

  return USBD_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3710      	adds	r7, #16
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b085      	sub	sp, #20
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005106:	2300      	movs	r3, #0
 8005108:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d006      	beq.n	800511e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	e001      	b.n	8005122 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800511e:	2302      	movs	r3, #2
 8005120:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005122:	7bfb      	ldrb	r3, [r7, #15]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f001 fb48 	bl	80067cc <USBD_LL_Start>

  return USBD_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005166:	2302      	movs	r3, #2
 8005168:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00c      	beq.n	800518e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	78fa      	ldrb	r2, [r7, #3]
 800517e:	4611      	mov	r1, r2
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800518e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4611      	mov	r1, r2
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3

  return USBD_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051ce:	6839      	ldr	r1, [r7, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fecb 	bl	8005f6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051f2:	f003 031f 	and.w	r3, r3, #31
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d00c      	beq.n	8005214 <USBD_LL_SetupStage+0x56>
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d302      	bcc.n	8005204 <USBD_LL_SetupStage+0x46>
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d010      	beq.n	8005224 <USBD_LL_SetupStage+0x66>
 8005202:	e017      	b.n	8005234 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f9cb 	bl	80055a8 <USBD_StdDevReq>
      break;
 8005212:	e01a      	b.n	800524a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 fa2d 	bl	800567c <USBD_StdItfReq>
      break;
 8005222:	e012      	b.n	800524a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa6b 	bl	8005708 <USBD_StdEPReq>
      break;
 8005232:	e00a      	b.n	800524a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800523a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800523e:	b2db      	uxtb	r3, r3
 8005240:	4619      	mov	r1, r3
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f001 fb22 	bl	800688c <USBD_LL_StallEP>
      break;
 8005248:	bf00      	nop
  }

  return USBD_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	460b      	mov	r3, r1
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005262:	7afb      	ldrb	r3, [r7, #11]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d14b      	bne.n	8005300 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800526e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005276:	2b03      	cmp	r3, #3
 8005278:	d134      	bne.n	80052e4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d919      	bls.n	80052ba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	1ad2      	subs	r2, r2, r3
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800529c:	429a      	cmp	r2, r3
 800529e:	d203      	bcs.n	80052a8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	e002      	b.n	80052ae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	6879      	ldr	r1, [r7, #4]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 ff4c 	bl	8006150 <USBD_CtlContinueRx>
 80052b8:	e038      	b.n	800532c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d105      	bne.n	80052dc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 ff49 	bl	8006174 <USBD_CtlSendStatus>
 80052e2:	e023      	b.n	800532c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d11e      	bne.n	800532c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80052f6:	2100      	movs	r1, #0
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 fac7 	bl	800688c <USBD_LL_StallEP>
 80052fe:	e015      	b.n	800532c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00d      	beq.n	8005328 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005312:	2b03      	cmp	r3, #3
 8005314:	d108      	bne.n	8005328 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	7afa      	ldrb	r2, [r7, #11]
 8005320:	4611      	mov	r1, r2
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	4798      	blx	r3
 8005326:	e001      	b.n	800532c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005328:	2302      	movs	r3, #2
 800532a:	e000      	b.n	800532e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b086      	sub	sp, #24
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	460b      	mov	r3, r1
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005344:	7afb      	ldrb	r3, [r7, #11]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d17f      	bne.n	800544a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	3314      	adds	r3, #20
 800534e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005356:	2b02      	cmp	r3, #2
 8005358:	d15c      	bne.n	8005414 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	429a      	cmp	r2, r3
 8005364:	d915      	bls.n	8005392 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	68da      	ldr	r2, [r3, #12]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	1ad2      	subs	r2, r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	b29b      	uxth	r3, r3
 800537a:	461a      	mov	r2, r3
 800537c:	6879      	ldr	r1, [r7, #4]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 feb6 	bl	80060f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005384:	2300      	movs	r3, #0
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f001 fb23 	bl	80069d6 <USBD_LL_PrepareReceive>
 8005390:	e04e      	b.n	8005430 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	6912      	ldr	r2, [r2, #16]
 800539a:	fbb3 f1f2 	udiv	r1, r3, r2
 800539e:	fb02 f201 	mul.w	r2, r2, r1
 80053a2:	1a9b      	subs	r3, r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11c      	bne.n	80053e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d316      	bcc.n	80053e2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053be:	429a      	cmp	r2, r3
 80053c0:	d20f      	bcs.n	80053e2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053c2:	2200      	movs	r2, #0
 80053c4:	2100      	movs	r1, #0
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fe92 	bl	80060f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053d4:	2300      	movs	r3, #0
 80053d6:	2200      	movs	r2, #0
 80053d8:	2100      	movs	r1, #0
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 fafb 	bl	80069d6 <USBD_LL_PrepareReceive>
 80053e0:	e026      	b.n	8005430 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d105      	bne.n	8005404 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005404:	2180      	movs	r1, #128	; 0x80
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f001 fa40 	bl	800688c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fec4 	bl	800619a <USBD_CtlReceiveStatus>
 8005412:	e00d      	b.n	8005430 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800541a:	2b04      	cmp	r3, #4
 800541c:	d004      	beq.n	8005428 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f001 fa2e 	bl	800688c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005436:	2b01      	cmp	r3, #1
 8005438:	d11d      	bne.n	8005476 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f7ff fe83 	bl	8005146 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005448:	e015      	b.n	8005476 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00d      	beq.n	8005472 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800545c:	2b03      	cmp	r3, #3
 800545e:	d108      	bne.n	8005472 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	7afa      	ldrb	r2, [r7, #11]
 800546a:	4611      	mov	r1, r2
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	4798      	blx	r3
 8005470:	e001      	b.n	8005476 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005472:	2302      	movs	r3, #2
 8005474:	e000      	b.n	8005478 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	2200      	movs	r2, #0
 800548c:	2100      	movs	r1, #0
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f001 f9b7 	bl	8006802 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2240      	movs	r2, #64	; 0x40
 80054a0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054a4:	2340      	movs	r3, #64	; 0x40
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 f9a9 	bl	8006802 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2240      	movs	r2, #64	; 0x40
 80054ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d009      	beq.n	80054f8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6852      	ldr	r2, [r2, #4]
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	4611      	mov	r1, r2
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	4798      	blx	r3
  }

  return USBD_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2204      	movs	r2, #4
 8005538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005556:	2b04      	cmp	r3, #4
 8005558:	d105      	bne.n	8005566 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005580:	2b03      	cmp	r3, #3
 8005582:	d10b      	bne.n	800559c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d005      	beq.n	800559c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d004      	beq.n	80055cc <USBD_StdDevReq+0x24>
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d002      	beq.n	80055cc <USBD_StdDevReq+0x24>
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <USBD_StdDevReq+0x34>
 80055ca:	e04c      	b.n	8005666 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	4798      	blx	r3
      break;
 80055da:	e049      	b.n	8005670 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b09      	cmp	r3, #9
 80055e2:	d83a      	bhi.n	800565a <USBD_StdDevReq+0xb2>
 80055e4:	a201      	add	r2, pc, #4	; (adr r2, 80055ec <USBD_StdDevReq+0x44>)
 80055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ea:	bf00      	nop
 80055ec:	0800563d 	.word	0x0800563d
 80055f0:	08005651 	.word	0x08005651
 80055f4:	0800565b 	.word	0x0800565b
 80055f8:	08005647 	.word	0x08005647
 80055fc:	0800565b 	.word	0x0800565b
 8005600:	0800561f 	.word	0x0800561f
 8005604:	08005615 	.word	0x08005615
 8005608:	0800565b 	.word	0x0800565b
 800560c:	08005633 	.word	0x08005633
 8005610:	08005629 	.word	0x08005629
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9d4 	bl	80059c4 <USBD_GetDescriptor>
          break;
 800561c:	e022      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fb37 	bl	8005c94 <USBD_SetAddress>
          break;
 8005626:	e01d      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fb74 	bl	8005d18 <USBD_SetConfig>
          break;
 8005630:	e018      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fbfd 	bl	8005e34 <USBD_GetConfig>
          break;
 800563a:	e013      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fc2c 	bl	8005e9c <USBD_GetStatus>
          break;
 8005644:	e00e      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fc5a 	bl	8005f02 <USBD_SetFeature>
          break;
 800564e:	e009      	b.n	8005664 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fc69 	bl	8005f2a <USBD_ClrFeature>
          break;
 8005658:	e004      	b.n	8005664 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fcc1 	bl	8005fe4 <USBD_CtlError>
          break;
 8005662:	bf00      	nop
      }
      break;
 8005664:	e004      	b.n	8005670 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fcbb 	bl	8005fe4 <USBD_CtlError>
      break;
 800566e:	bf00      	nop
  }

  return ret;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop

0800567c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005686:	2300      	movs	r3, #0
 8005688:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005692:	2b20      	cmp	r3, #32
 8005694:	d003      	beq.n	800569e <USBD_StdItfReq+0x22>
 8005696:	2b40      	cmp	r3, #64	; 0x40
 8005698:	d001      	beq.n	800569e <USBD_StdItfReq+0x22>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d12a      	bne.n	80056f4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a4:	3b01      	subs	r3, #1
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d81d      	bhi.n	80056e6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	889b      	ldrh	r3, [r3, #4]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d813      	bhi.n	80056dc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	6839      	ldr	r1, [r7, #0]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
 80056c2:	4603      	mov	r3, r0
 80056c4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d110      	bne.n	80056f0 <USBD_StdItfReq+0x74>
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fd4d 	bl	8006174 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056da:	e009      	b.n	80056f0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fc80 	bl	8005fe4 <USBD_CtlError>
          break;
 80056e4:	e004      	b.n	80056f0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80056e6:	6839      	ldr	r1, [r7, #0]
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f000 fc7b 	bl	8005fe4 <USBD_CtlError>
          break;
 80056ee:	e000      	b.n	80056f2 <USBD_StdItfReq+0x76>
          break;
 80056f0:	bf00      	nop
      }
      break;
 80056f2:	e004      	b.n	80056fe <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80056f4:	6839      	ldr	r1, [r7, #0]
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fc74 	bl	8005fe4 <USBD_CtlError>
      break;
 80056fc:	bf00      	nop
  }

  return USBD_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005712:	2300      	movs	r3, #0
 8005714:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	889b      	ldrh	r3, [r3, #4]
 800571a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005724:	2b20      	cmp	r3, #32
 8005726:	d004      	beq.n	8005732 <USBD_StdEPReq+0x2a>
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d002      	beq.n	8005732 <USBD_StdEPReq+0x2a>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <USBD_StdEPReq+0x3a>
 8005730:	e13d      	b.n	80059ae <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	6839      	ldr	r1, [r7, #0]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
      break;
 8005740:	e13a      	b.n	80059b8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800574a:	2b20      	cmp	r3, #32
 800574c:	d10a      	bne.n	8005764 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	6839      	ldr	r1, [r7, #0]
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	4798      	blx	r3
 800575c:	4603      	mov	r3, r0
 800575e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	e12a      	b.n	80059ba <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d03e      	beq.n	80057ea <USBD_StdEPReq+0xe2>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d002      	beq.n	8005776 <USBD_StdEPReq+0x6e>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d070      	beq.n	8005856 <USBD_StdEPReq+0x14e>
 8005774:	e115      	b.n	80059a2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577c:	2b02      	cmp	r3, #2
 800577e:	d002      	beq.n	8005786 <USBD_StdEPReq+0x7e>
 8005780:	2b03      	cmp	r3, #3
 8005782:	d015      	beq.n	80057b0 <USBD_StdEPReq+0xa8>
 8005784:	e02b      	b.n	80057de <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005786:	7bbb      	ldrb	r3, [r7, #14]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00c      	beq.n	80057a6 <USBD_StdEPReq+0x9e>
 800578c:	7bbb      	ldrb	r3, [r7, #14]
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d009      	beq.n	80057a6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005792:	7bbb      	ldrb	r3, [r7, #14]
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 f878 	bl	800688c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800579c:	2180      	movs	r1, #128	; 0x80
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f001 f874 	bl	800688c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80057a4:	e020      	b.n	80057e8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80057a6:	6839      	ldr	r1, [r7, #0]
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fc1b 	bl	8005fe4 <USBD_CtlError>
              break;
 80057ae:	e01b      	b.n	80057e8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	885b      	ldrh	r3, [r3, #2]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <USBD_StdEPReq+0xce>
 80057be:	7bbb      	ldrb	r3, [r7, #14]
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	d008      	beq.n	80057d6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	88db      	ldrh	r3, [r3, #6]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80057cc:	7bbb      	ldrb	r3, [r7, #14]
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f001 f85b 	bl	800688c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fccc 	bl	8006174 <USBD_CtlSendStatus>

              break;
 80057dc:	e004      	b.n	80057e8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fbff 	bl	8005fe4 <USBD_CtlError>
              break;
 80057e6:	bf00      	nop
          }
          break;
 80057e8:	e0e0      	b.n	80059ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d002      	beq.n	80057fa <USBD_StdEPReq+0xf2>
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d015      	beq.n	8005824 <USBD_StdEPReq+0x11c>
 80057f8:	e026      	b.n	8005848 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057fa:	7bbb      	ldrb	r3, [r7, #14]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00c      	beq.n	800581a <USBD_StdEPReq+0x112>
 8005800:	7bbb      	ldrb	r3, [r7, #14]
 8005802:	2b80      	cmp	r3, #128	; 0x80
 8005804:	d009      	beq.n	800581a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005806:	7bbb      	ldrb	r3, [r7, #14]
 8005808:	4619      	mov	r1, r3
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 f83e 	bl	800688c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005810:	2180      	movs	r1, #128	; 0x80
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f001 f83a 	bl	800688c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005818:	e01c      	b.n	8005854 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800581a:	6839      	ldr	r1, [r7, #0]
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fbe1 	bl	8005fe4 <USBD_CtlError>
              break;
 8005822:	e017      	b.n	8005854 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	885b      	ldrh	r3, [r3, #2]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d112      	bne.n	8005852 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005832:	2b00      	cmp	r3, #0
 8005834:	d004      	beq.n	8005840 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005836:	7bbb      	ldrb	r3, [r7, #14]
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f001 f845 	bl	80068ca <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fc97 	bl	8006174 <USBD_CtlSendStatus>
              }
              break;
 8005846:	e004      	b.n	8005852 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fbca 	bl	8005fe4 <USBD_CtlError>
              break;
 8005850:	e000      	b.n	8005854 <USBD_StdEPReq+0x14c>
              break;
 8005852:	bf00      	nop
          }
          break;
 8005854:	e0aa      	b.n	80059ac <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800585c:	2b02      	cmp	r3, #2
 800585e:	d002      	beq.n	8005866 <USBD_StdEPReq+0x15e>
 8005860:	2b03      	cmp	r3, #3
 8005862:	d032      	beq.n	80058ca <USBD_StdEPReq+0x1c2>
 8005864:	e097      	b.n	8005996 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005866:	7bbb      	ldrb	r3, [r7, #14]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <USBD_StdEPReq+0x174>
 800586c:	7bbb      	ldrb	r3, [r7, #14]
 800586e:	2b80      	cmp	r3, #128	; 0x80
 8005870:	d004      	beq.n	800587c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fbb5 	bl	8005fe4 <USBD_CtlError>
                break;
 800587a:	e091      	b.n	80059a0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800587c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005880:	2b00      	cmp	r3, #0
 8005882:	da0b      	bge.n	800589c <USBD_StdEPReq+0x194>
 8005884:	7bbb      	ldrb	r3, [r7, #14]
 8005886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	3310      	adds	r3, #16
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	3304      	adds	r3, #4
 800589a:	e00b      	b.n	80058b4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	3304      	adds	r3, #4
 80058b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2202      	movs	r2, #2
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fbf8 	bl	80060b8 <USBD_CtlSendData>
              break;
 80058c8:	e06a      	b.n	80059a0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da11      	bge.n	80058f6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058d2:	7bbb      	ldrb	r3, [r7, #14]
 80058d4:	f003 020f 	and.w	r2, r3, #15
 80058d8:	6879      	ldr	r1, [r7, #4]
 80058da:	4613      	mov	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	440b      	add	r3, r1
 80058e4:	3318      	adds	r3, #24
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d117      	bne.n	800591c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058ec:	6839      	ldr	r1, [r7, #0]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fb78 	bl	8005fe4 <USBD_CtlError>
                  break;
 80058f4:	e054      	b.n	80059a0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058f6:	7bbb      	ldrb	r3, [r7, #14]
 80058f8:	f003 020f 	and.w	r2, r3, #15
 80058fc:	6879      	ldr	r1, [r7, #4]
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	440b      	add	r3, r1
 8005908:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 fb65 	bl	8005fe4 <USBD_CtlError>
                  break;
 800591a:	e041      	b.n	80059a0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800591c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005920:	2b00      	cmp	r3, #0
 8005922:	da0b      	bge.n	800593c <USBD_StdEPReq+0x234>
 8005924:	7bbb      	ldrb	r3, [r7, #14]
 8005926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800592a:	4613      	mov	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	4413      	add	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	3310      	adds	r3, #16
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	4413      	add	r3, r2
 8005938:	3304      	adds	r3, #4
 800593a:	e00b      	b.n	8005954 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	3304      	adds	r3, #4
 8005954:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <USBD_StdEPReq+0x25a>
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2b80      	cmp	r3, #128	; 0x80
 8005960:	d103      	bne.n	800596a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	e00e      	b.n	8005988 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 ffca 	bl	8006908 <USBD_LL_IsStallEP>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2201      	movs	r2, #1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e002      	b.n	8005988 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2202      	movs	r2, #2
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fb92 	bl	80060b8 <USBD_CtlSendData>
              break;
 8005994:	e004      	b.n	80059a0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fb23 	bl	8005fe4 <USBD_CtlError>
              break;
 800599e:	bf00      	nop
          }
          break;
 80059a0:	e004      	b.n	80059ac <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80059a2:	6839      	ldr	r1, [r7, #0]
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fb1d 	bl	8005fe4 <USBD_CtlError>
          break;
 80059aa:	bf00      	nop
      }
      break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fb17 	bl	8005fe4 <USBD_CtlError>
      break;
 80059b6:	bf00      	nop
  }

  return ret;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	885b      	ldrh	r3, [r3, #2]
 80059de:	0a1b      	lsrs	r3, r3, #8
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	2b06      	cmp	r3, #6
 80059e6:	f200 8128 	bhi.w	8005c3a <USBD_GetDescriptor+0x276>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <USBD_GetDescriptor+0x2c>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a0d 	.word	0x08005a0d
 80059f4:	08005a25 	.word	0x08005a25
 80059f8:	08005a65 	.word	0x08005a65
 80059fc:	08005c3b 	.word	0x08005c3b
 8005a00:	08005c3b 	.word	0x08005c3b
 8005a04:	08005bdb 	.word	0x08005bdb
 8005a08:	08005c07 	.word	0x08005c07
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	7c12      	ldrb	r2, [r2, #16]
 8005a18:	f107 0108 	add.w	r1, r7, #8
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	4798      	blx	r3
 8005a20:	60f8      	str	r0, [r7, #12]
      break;
 8005a22:	e112      	b.n	8005c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	7c1b      	ldrb	r3, [r3, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10d      	bne.n	8005a48 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a34:	f107 0208 	add.w	r2, r7, #8
 8005a38:	4610      	mov	r0, r2
 8005a3a:	4798      	blx	r3
 8005a3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	2202      	movs	r2, #2
 8005a44:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a46:	e100      	b.n	8005c4a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f107 0208 	add.w	r2, r7, #8
 8005a54:	4610      	mov	r0, r2
 8005a56:	4798      	blx	r3
 8005a58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	2202      	movs	r2, #2
 8005a60:	701a      	strb	r2, [r3, #0]
      break;
 8005a62:	e0f2      	b.n	8005c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	885b      	ldrh	r3, [r3, #2]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b05      	cmp	r3, #5
 8005a6c:	f200 80ac 	bhi.w	8005bc8 <USBD_GetDescriptor+0x204>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <USBD_GetDescriptor+0xb4>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005a91 	.word	0x08005a91
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005af9 	.word	0x08005af9
 8005a84:	08005b2d 	.word	0x08005b2d
 8005a88:	08005b61 	.word	0x08005b61
 8005a8c:	08005b95 	.word	0x08005b95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00b      	beq.n	8005ab4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	7c12      	ldrb	r2, [r2, #16]
 8005aa8:	f107 0108 	add.w	r1, r7, #8
 8005aac:	4610      	mov	r0, r2
 8005aae:	4798      	blx	r3
 8005ab0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ab2:	e091      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa94 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005abc:	7afb      	ldrb	r3, [r7, #11]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ac2:	e089      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00b      	beq.n	8005ae8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	7c12      	ldrb	r2, [r2, #16]
 8005adc:	f107 0108 	add.w	r1, r7, #8
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4798      	blx	r3
 8005ae4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ae6:	e077      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa7a 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	3301      	adds	r3, #1
 8005af4:	72fb      	strb	r3, [r7, #11]
          break;
 8005af6:	e06f      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00b      	beq.n	8005b1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	7c12      	ldrb	r2, [r2, #16]
 8005b10:	f107 0108 	add.w	r1, r7, #8
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
 8005b18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b1a:	e05d      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b1c:	6839      	ldr	r1, [r7, #0]
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa60 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005b24:	7afb      	ldrb	r3, [r7, #11]
 8005b26:	3301      	adds	r3, #1
 8005b28:	72fb      	strb	r3, [r7, #11]
          break;
 8005b2a:	e055      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00b      	beq.n	8005b50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	7c12      	ldrb	r2, [r2, #16]
 8005b44:	f107 0108 	add.w	r1, r7, #8
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b4e:	e043      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 fa46 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b5e:	e03b      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00b      	beq.n	8005b84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	7c12      	ldrb	r2, [r2, #16]
 8005b78:	f107 0108 	add.w	r1, r7, #8
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4798      	blx	r3
 8005b80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b82:	e029      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b84:	6839      	ldr	r1, [r7, #0]
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fa2c 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005b8c:	7afb      	ldrb	r3, [r7, #11]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	72fb      	strb	r3, [r7, #11]
          break;
 8005b92:	e021      	b.n	8005bd8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	7c12      	ldrb	r2, [r2, #16]
 8005bac:	f107 0108 	add.w	r1, r7, #8
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
 8005bb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005bb6:	e00f      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa12 	bl	8005fe4 <USBD_CtlError>
            err++;
 8005bc0:	7afb      	ldrb	r3, [r7, #11]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	72fb      	strb	r3, [r7, #11]
          break;
 8005bc6:	e007      	b.n	8005bd8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005bc8:	6839      	ldr	r1, [r7, #0]
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa0a 	bl	8005fe4 <USBD_CtlError>
          err++;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005bd6:	e038      	b.n	8005c4a <USBD_GetDescriptor+0x286>
 8005bd8:	e037      	b.n	8005c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	7c1b      	ldrb	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d109      	bne.n	8005bf6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bea:	f107 0208 	add.w	r2, r7, #8
 8005bee:	4610      	mov	r0, r2
 8005bf0:	4798      	blx	r3
 8005bf2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005bf4:	e029      	b.n	8005c4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f9f3 	bl	8005fe4 <USBD_CtlError>
        err++;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	3301      	adds	r3, #1
 8005c02:	72fb      	strb	r3, [r7, #11]
      break;
 8005c04:	e021      	b.n	8005c4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	7c1b      	ldrb	r3, [r3, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10d      	bne.n	8005c2a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c16:	f107 0208 	add.w	r2, r7, #8
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4798      	blx	r3
 8005c1e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3301      	adds	r3, #1
 8005c24:	2207      	movs	r2, #7
 8005c26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c28:	e00f      	b.n	8005c4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c2a:	6839      	ldr	r1, [r7, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f9d9 	bl	8005fe4 <USBD_CtlError>
        err++;
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	3301      	adds	r3, #1
 8005c36:	72fb      	strb	r3, [r7, #11]
      break;
 8005c38:	e007      	b.n	8005c4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f9d1 	bl	8005fe4 <USBD_CtlError>
      err++;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	3301      	adds	r3, #1
 8005c46:	72fb      	strb	r3, [r7, #11]
      break;
 8005c48:	bf00      	nop
  }

  if (err != 0U)
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11c      	bne.n	8005c8a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d011      	beq.n	8005c7a <USBD_GetDescriptor+0x2b6>
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	88db      	ldrh	r3, [r3, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00d      	beq.n	8005c7a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	88da      	ldrh	r2, [r3, #6]
 8005c62:	893b      	ldrh	r3, [r7, #8]
 8005c64:	4293      	cmp	r3, r2
 8005c66:	bf28      	it	cs
 8005c68:	4613      	movcs	r3, r2
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c6e:	893b      	ldrh	r3, [r7, #8]
 8005c70:	461a      	mov	r2, r3
 8005c72:	68f9      	ldr	r1, [r7, #12]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa1f 	bl	80060b8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	88db      	ldrh	r3, [r3, #6]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fa76 	bl	8006174 <USBD_CtlSendStatus>
 8005c88:	e000      	b.n	8005c8c <USBD_GetDescriptor+0x2c8>
    return;
 8005c8a:	bf00      	nop
    }
  }
}
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop

08005c94 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	889b      	ldrh	r3, [r3, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d130      	bne.n	8005d08 <USBD_SetAddress+0x74>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	88db      	ldrh	r3, [r3, #6]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d12c      	bne.n	8005d08 <USBD_SetAddress+0x74>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	885b      	ldrh	r3, [r3, #2]
 8005cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8005cb4:	d828      	bhi.n	8005d08 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	885b      	ldrh	r3, [r3, #2]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d104      	bne.n	8005cd6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005ccc:	6839      	ldr	r1, [r7, #0]
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f988 	bl	8005fe4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cd4:	e01c      	b.n	8005d10 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	7bfa      	ldrb	r2, [r7, #15]
 8005cda:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fe35 	bl	8006952 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fa43 	bl	8006174 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cee:	7bfb      	ldrb	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d004      	beq.n	8005cfe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cfc:	e008      	b.n	8005d10 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d06:	e003      	b.n	8005d10 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f96a 	bl	8005fe4 <USBD_CtlError>
  }
}
 8005d10:	bf00      	nop
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	885b      	ldrh	r3, [r3, #2]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	4b41      	ldr	r3, [pc, #260]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d2c:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d904      	bls.n	8005d3e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f954 	bl	8005fe4 <USBD_CtlError>
 8005d3c:	e075      	b.n	8005e2a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d002      	beq.n	8005d4e <USBD_SetConfig+0x36>
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d023      	beq.n	8005d94 <USBD_SetConfig+0x7c>
 8005d4c:	e062      	b.n	8005e14 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d4e:	4b38      	ldr	r3, [pc, #224]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01a      	beq.n	8005d8c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2203      	movs	r2, #3
 8005d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d68:	4b31      	ldr	r3, [pc, #196]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff f9f3 	bl	800515a <USBD_SetClassConfig>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d104      	bne.n	8005d84 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005d7a:	6839      	ldr	r1, [r7, #0]
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f931 	bl	8005fe4 <USBD_CtlError>
            return;
 8005d82:	e052      	b.n	8005e2a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f9f5 	bl	8006174 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d8a:	e04e      	b.n	8005e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f9f1 	bl	8006174 <USBD_CtlSendStatus>
        break;
 8005d92:	e04a      	b.n	8005e2a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005d94:	4b26      	ldr	r3, [pc, #152]	; (8005e30 <USBD_SetConfig+0x118>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d112      	bne.n	8005dc2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005da4:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <USBD_SetConfig+0x118>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005dae:	4b20      	ldr	r3, [pc, #128]	; (8005e30 <USBD_SetConfig+0x118>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff f9ef 	bl	8005198 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 f9da 	bl	8006174 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dc0:	e033      	b.n	8005e2a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dc2:	4b1b      	ldr	r3, [pc, #108]	; (8005e30 <USBD_SetConfig+0x118>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d01d      	beq.n	8005e0c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7ff f9dd 	bl	8005198 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005dde:	4b14      	ldr	r3, [pc, #80]	; (8005e30 <USBD_SetConfig+0x118>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	461a      	mov	r2, r3
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005de8:	4b11      	ldr	r3, [pc, #68]	; (8005e30 <USBD_SetConfig+0x118>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff f9b3 	bl	800515a <USBD_SetClassConfig>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d104      	bne.n	8005e04 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 f8f1 	bl	8005fe4 <USBD_CtlError>
            return;
 8005e02:	e012      	b.n	8005e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f9b5 	bl	8006174 <USBD_CtlSendStatus>
        break;
 8005e0a:	e00e      	b.n	8005e2a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f9b1 	bl	8006174 <USBD_CtlSendStatus>
        break;
 8005e12:	e00a      	b.n	8005e2a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f8e4 	bl	8005fe4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <USBD_SetConfig+0x118>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff f9b8 	bl	8005198 <USBD_ClrClassConfig>
        break;
 8005e28:	bf00      	nop
    }
  }
}
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000204 	.word	0x20000204

08005e34 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	88db      	ldrh	r3, [r3, #6]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d004      	beq.n	8005e50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f8cb 	bl	8005fe4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e4e:	e021      	b.n	8005e94 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	db17      	blt.n	8005e8a <USBD_GetConfig+0x56>
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	dd02      	ble.n	8005e64 <USBD_GetConfig+0x30>
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d00b      	beq.n	8005e7a <USBD_GetConfig+0x46>
 8005e62:	e012      	b.n	8005e8a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4619      	mov	r1, r3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f920 	bl	80060b8 <USBD_CtlSendData>
        break;
 8005e78:	e00c      	b.n	8005e94 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4619      	mov	r1, r3
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f918 	bl	80060b8 <USBD_CtlSendData>
        break;
 8005e88:	e004      	b.n	8005e94 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f8a9 	bl	8005fe4 <USBD_CtlError>
        break;
 8005e92:	bf00      	nop
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eac:	3b01      	subs	r3, #1
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d81e      	bhi.n	8005ef0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	88db      	ldrh	r3, [r3, #6]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d004      	beq.n	8005ec4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f891 	bl	8005fe4 <USBD_CtlError>
        break;
 8005ec2:	e01a      	b.n	8005efa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d005      	beq.n	8005ee0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f043 0202 	orr.w	r2, r3, #2
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	330c      	adds	r3, #12
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f8e5 	bl	80060b8 <USBD_CtlSendData>
      break;
 8005eee:	e004      	b.n	8005efa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f876 	bl	8005fe4 <USBD_CtlError>
      break;
 8005ef8:	bf00      	nop
  }
}
 8005efa:	bf00      	nop
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	885b      	ldrh	r3, [r3, #2]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d106      	bne.n	8005f22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f929 	bl	8006174 <USBD_CtlSendStatus>
  }
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d80b      	bhi.n	8005f58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	885b      	ldrh	r3, [r3, #2]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d10c      	bne.n	8005f62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f90f 	bl	8006174 <USBD_CtlSendStatus>
      }
      break;
 8005f56:	e004      	b.n	8005f62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f842 	bl	8005fe4 <USBD_CtlError>
      break;
 8005f60:	e000      	b.n	8005f64 <USBD_ClrFeature+0x3a>
      break;
 8005f62:	bf00      	nop
  }
}
 8005f64:	bf00      	nop
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781a      	ldrb	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	785a      	ldrb	r2, [r3, #1]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	3303      	adds	r3, #3
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	021b      	lsls	r3, r3, #8
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	4413      	add	r3, r2
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3305      	adds	r3, #5
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3306      	adds	r3, #6
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	3307      	adds	r3, #7
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	80da      	strh	r2, [r3, #6]

}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bc80      	pop	{r7}
 8005fe2:	4770      	bx	lr

08005fe4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005fee:	2180      	movs	r1, #128	; 0x80
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fc4b 	bl	800688c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005ff6:	2100      	movs	r1, #0
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fc47 	bl	800688c <USBD_LL_StallEP>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d032      	beq.n	8006082 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 f834 	bl	800608a <USBD_GetLen>
 8006022:	4603      	mov	r3, r0
 8006024:	3301      	adds	r3, #1
 8006026:	b29b      	uxth	r3, r3
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	75fa      	strb	r2, [r7, #23]
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	4413      	add	r3, r2
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	75fa      	strb	r2, [r7, #23]
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	2203      	movs	r2, #3
 8006050:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006052:	e012      	b.n	800607a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	60fa      	str	r2, [r7, #12]
 800605a:	7dfa      	ldrb	r2, [r7, #23]
 800605c:	1c51      	adds	r1, r2, #1
 800605e:	75f9      	strb	r1, [r7, #23]
 8006060:	4611      	mov	r1, r2
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	440a      	add	r2, r1
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	75fa      	strb	r2, [r7, #23]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4413      	add	r3, r2
 8006076:	2200      	movs	r2, #0
 8006078:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e8      	bne.n	8006054 <USBD_GetString+0x4e>
    }
  }
}
 8006082:	bf00      	nop
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006096:	e005      	b.n	80060a4 <USBD_GetLen+0x1a>
  {
    len++;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	3301      	adds	r3, #1
 800609c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	3301      	adds	r3, #1
 80060a2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1f5      	bne.n	8006098 <USBD_GetLen+0xe>
  }

  return len;
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	2100      	movs	r1, #0
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 fc55 	bl	8006990 <USBD_LL_Transmit>

  return USBD_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060fe:	88fb      	ldrh	r3, [r7, #6]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	2100      	movs	r1, #0
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 fc43 	bl	8006990 <USBD_LL_Transmit>

  return USBD_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	4613      	mov	r3, r2
 8006120:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2203      	movs	r2, #3
 8006126:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800612a:	88fa      	ldrh	r2, [r7, #6]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	2100      	movs	r1, #0
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 fc48 	bl	80069d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	2100      	movs	r1, #0
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	f000 fc36 	bl	80069d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2204      	movs	r2, #4
 8006180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006184:	2300      	movs	r3, #0
 8006186:	2200      	movs	r2, #0
 8006188:	2100      	movs	r1, #0
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fc00 	bl	8006990 <USBD_LL_Transmit>

  return USBD_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2205      	movs	r2, #5
 80061a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc10 	bl	80069d6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3708      	adds	r7, #8
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061c4:	2200      	movs	r2, #0
 80061c6:	4912      	ldr	r1, [pc, #72]	; (8006210 <MX_USB_DEVICE_Init+0x50>)
 80061c8:	4812      	ldr	r0, [pc, #72]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061ca:	f7fe ff6c 	bl	80050a6 <USBD_Init>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061d4:	f7fa fa3a 	bl	800064c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061d8:	490f      	ldr	r1, [pc, #60]	; (8006218 <MX_USB_DEVICE_Init+0x58>)
 80061da:	480e      	ldr	r0, [pc, #56]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061dc:	f7fe ff8e 	bl	80050fc <USBD_RegisterClass>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061e6:	f7fa fa31 	bl	800064c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061ea:	490c      	ldr	r1, [pc, #48]	; (800621c <MX_USB_DEVICE_Init+0x5c>)
 80061ec:	4809      	ldr	r0, [pc, #36]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061ee:	f7fe febf 	bl	8004f70 <USBD_CDC_RegisterInterface>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061f8:	f7fa fa28 	bl	800064c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061fc:	4805      	ldr	r0, [pc, #20]	; (8006214 <MX_USB_DEVICE_Init+0x54>)
 80061fe:	f7fe ff96 	bl	800512e <USBD_Start>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006208:	f7fa fa20 	bl	800064c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800620c:	bf00      	nop
 800620e:	bd80      	pop	{r7, pc}
 8006210:	20000130 	.word	0x20000130
 8006214:	20000590 	.word	0x20000590
 8006218:	2000001c 	.word	0x2000001c
 800621c:	20000120 	.word	0x20000120

08006220 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006224:	2200      	movs	r2, #0
 8006226:	4905      	ldr	r1, [pc, #20]	; (800623c <CDC_Init_FS+0x1c>)
 8006228:	4805      	ldr	r0, [pc, #20]	; (8006240 <CDC_Init_FS+0x20>)
 800622a:	f7fe feb7 	bl	8004f9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800622e:	4905      	ldr	r1, [pc, #20]	; (8006244 <CDC_Init_FS+0x24>)
 8006230:	4803      	ldr	r0, [pc, #12]	; (8006240 <CDC_Init_FS+0x20>)
 8006232:	f7fe fecc 	bl	8004fce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006236:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006238:	4618      	mov	r0, r3
 800623a:	bd80      	pop	{r7, pc}
 800623c:	20000c3c 	.word	0x20000c3c
 8006240:	20000590 	.word	0x20000590
 8006244:	20000854 	.word	0x20000854

08006248 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800624c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800624e:	4618      	mov	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
	...

08006258 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	4603      	mov	r3, r0
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	71fb      	strb	r3, [r7, #7]
 8006264:	4613      	mov	r3, r2
 8006266:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006268:	79fb      	ldrb	r3, [r7, #7]
 800626a:	2b23      	cmp	r3, #35	; 0x23
 800626c:	d84a      	bhi.n	8006304 <CDC_Control_FS+0xac>
 800626e:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <CDC_Control_FS+0x1c>)
 8006270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006274:	08006305 	.word	0x08006305
 8006278:	08006305 	.word	0x08006305
 800627c:	08006305 	.word	0x08006305
 8006280:	08006305 	.word	0x08006305
 8006284:	08006305 	.word	0x08006305
 8006288:	08006305 	.word	0x08006305
 800628c:	08006305 	.word	0x08006305
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	08006305 	.word	0x08006305
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	08006305 	.word	0x08006305
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006305 	.word	0x08006305
 80062b8:	08006305 	.word	0x08006305
 80062bc:	08006305 	.word	0x08006305
 80062c0:	08006305 	.word	0x08006305
 80062c4:	08006305 	.word	0x08006305
 80062c8:	08006305 	.word	0x08006305
 80062cc:	08006305 	.word	0x08006305
 80062d0:	08006305 	.word	0x08006305
 80062d4:	08006305 	.word	0x08006305
 80062d8:	08006305 	.word	0x08006305
 80062dc:	08006305 	.word	0x08006305
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006305 	.word	0x08006305
 80062e8:	08006305 	.word	0x08006305
 80062ec:	08006305 	.word	0x08006305
 80062f0:	08006305 	.word	0x08006305
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006305 	.word	0x08006305
 80062fc:	08006305 	.word	0x08006305
 8006300:	08006305 	.word	0x08006305
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006304:	bf00      	nop
  }

  return (USBD_OK);
 8006306:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006308:	4618      	mov	r0, r3
 800630a:	370c      	adds	r7, #12
 800630c:	46bd      	mov	sp, r7
 800630e:	bc80      	pop	{r7}
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop

08006314 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_rx_flag = Buf[0];//Se guarda lo que llega en la variable externa CDC_rx_flag. declarada en el main
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	781a      	ldrb	r2, [r3, #0]
 8006322:	4b07      	ldr	r3, [pc, #28]	; (8006340 <CDC_Receive_FS+0x2c>)
 8006324:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4806      	ldr	r0, [pc, #24]	; (8006344 <CDC_Receive_FS+0x30>)
 800632a:	f7fe fe50 	bl	8004fce <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800632e:	4805      	ldr	r0, [pc, #20]	; (8006344 <CDC_Receive_FS+0x30>)
 8006330:	f7fe fe8f 	bl	8005052 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8006334:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006336:	4618      	mov	r0, r3
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000470 	.word	0x20000470
 8006344:	20000590 	.word	0x20000590

08006348 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	460b      	mov	r3, r1
 8006352:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006358:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <CDC_Transmit_FS+0x48>)
 800635a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800636a:	2301      	movs	r3, #1
 800636c:	e00b      	b.n	8006386 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	461a      	mov	r2, r3
 8006372:	6879      	ldr	r1, [r7, #4]
 8006374:	4806      	ldr	r0, [pc, #24]	; (8006390 <CDC_Transmit_FS+0x48>)
 8006376:	f7fe fe11 	bl	8004f9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800637a:	4805      	ldr	r0, [pc, #20]	; (8006390 <CDC_Transmit_FS+0x48>)
 800637c:	f7fe fe3a 	bl	8004ff4 <USBD_CDC_TransmitPacket>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000590 	.word	0x20000590

08006394 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	6039      	str	r1, [r7, #0]
 800639e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2212      	movs	r2, #18
 80063a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80063a6:	4b03      	ldr	r3, [pc, #12]	; (80063b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bc80      	pop	{r7}
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	2000014c 	.word	0x2000014c

080063b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	4603      	mov	r3, r0
 80063c0:	6039      	str	r1, [r7, #0]
 80063c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	2204      	movs	r2, #4
 80063c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063ca:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000160 	.word	0x20000160

080063dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	6039      	str	r1, [r7, #0]
 80063e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d105      	bne.n	80063fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063ee:	683a      	ldr	r2, [r7, #0]
 80063f0:	4907      	ldr	r1, [pc, #28]	; (8006410 <USBD_FS_ProductStrDescriptor+0x34>)
 80063f2:	4808      	ldr	r0, [pc, #32]	; (8006414 <USBD_FS_ProductStrDescriptor+0x38>)
 80063f4:	f7ff fe07 	bl	8006006 <USBD_GetString>
 80063f8:	e004      	b.n	8006404 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	4904      	ldr	r1, [pc, #16]	; (8006410 <USBD_FS_ProductStrDescriptor+0x34>)
 80063fe:	4805      	ldr	r0, [pc, #20]	; (8006414 <USBD_FS_ProductStrDescriptor+0x38>)
 8006400:	f7ff fe01 	bl	8006006 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006404:	4b02      	ldr	r3, [pc, #8]	; (8006410 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20001024 	.word	0x20001024
 8006414:	080073b0 	.word	0x080073b0

08006418 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	6039      	str	r1, [r7, #0]
 8006422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	4904      	ldr	r1, [pc, #16]	; (8006438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006428:	4804      	ldr	r0, [pc, #16]	; (800643c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800642a:	f7ff fdec 	bl	8006006 <USBD_GetString>
  return USBD_StrDesc;
 800642e:	4b02      	ldr	r3, [pc, #8]	; (8006438 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006430:	4618      	mov	r0, r3
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20001024 	.word	0x20001024
 800643c:	080073c8 	.word	0x080073c8

08006440 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	4603      	mov	r3, r0
 8006448:	6039      	str	r1, [r7, #0]
 800644a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	221a      	movs	r2, #26
 8006450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006452:	f000 f843 	bl	80064dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006456:	4b02      	ldr	r3, [pc, #8]	; (8006460 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20000164 	.word	0x20000164

08006464 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	4603      	mov	r3, r0
 800646c:	6039      	str	r1, [r7, #0]
 800646e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006470:	79fb      	ldrb	r3, [r7, #7]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d105      	bne.n	8006482 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	4907      	ldr	r1, [pc, #28]	; (8006498 <USBD_FS_ConfigStrDescriptor+0x34>)
 800647a:	4808      	ldr	r0, [pc, #32]	; (800649c <USBD_FS_ConfigStrDescriptor+0x38>)
 800647c:	f7ff fdc3 	bl	8006006 <USBD_GetString>
 8006480:	e004      	b.n	800648c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	4904      	ldr	r1, [pc, #16]	; (8006498 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006486:	4805      	ldr	r0, [pc, #20]	; (800649c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006488:	f7ff fdbd 	bl	8006006 <USBD_GetString>
  }
  return USBD_StrDesc;
 800648c:	4b02      	ldr	r3, [pc, #8]	; (8006498 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20001024 	.word	0x20001024
 800649c:	080073dc 	.word	0x080073dc

080064a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	4603      	mov	r3, r0
 80064a8:	6039      	str	r1, [r7, #0]
 80064aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	4907      	ldr	r1, [pc, #28]	; (80064d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064b6:	4808      	ldr	r0, [pc, #32]	; (80064d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064b8:	f7ff fda5 	bl	8006006 <USBD_GetString>
 80064bc:	e004      	b.n	80064c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	4904      	ldr	r1, [pc, #16]	; (80064d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064c2:	4805      	ldr	r0, [pc, #20]	; (80064d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064c4:	f7ff fd9f 	bl	8006006 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	20001024 	.word	0x20001024
 80064d8:	080073e8 	.word	0x080073e8

080064dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <Get_SerialNum+0x44>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80064e8:	4b0e      	ldr	r3, [pc, #56]	; (8006524 <Get_SerialNum+0x48>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <Get_SerialNum+0x4c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d009      	beq.n	8006516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006502:	2208      	movs	r2, #8
 8006504:	4909      	ldr	r1, [pc, #36]	; (800652c <Get_SerialNum+0x50>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f814 	bl	8006534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800650c:	2204      	movs	r2, #4
 800650e:	4908      	ldr	r1, [pc, #32]	; (8006530 <Get_SerialNum+0x54>)
 8006510:	68b8      	ldr	r0, [r7, #8]
 8006512:	f000 f80f 	bl	8006534 <IntToUnicode>
  }
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	1ffff7e8 	.word	0x1ffff7e8
 8006524:	1ffff7ec 	.word	0x1ffff7ec
 8006528:	1ffff7f0 	.word	0x1ffff7f0
 800652c:	20000166 	.word	0x20000166
 8006530:	20000176 	.word	0x20000176

08006534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006542:	2300      	movs	r3, #0
 8006544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]
 800654a:	e027      	b.n	800659c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	0f1b      	lsrs	r3, r3, #28
 8006550:	2b09      	cmp	r3, #9
 8006552:	d80b      	bhi.n	800656c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	b2da      	uxtb	r2, r3
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	005b      	lsls	r3, r3, #1
 800655e:	4619      	mov	r1, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	440b      	add	r3, r1
 8006564:	3230      	adds	r2, #48	; 0x30
 8006566:	b2d2      	uxtb	r2, r2
 8006568:	701a      	strb	r2, [r3, #0]
 800656a:	e00a      	b.n	8006582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	0f1b      	lsrs	r3, r3, #28
 8006570:	b2da      	uxtb	r2, r3
 8006572:	7dfb      	ldrb	r3, [r7, #23]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	4619      	mov	r1, r3
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	440b      	add	r3, r1
 800657c:	3237      	adds	r2, #55	; 0x37
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006588:	7dfb      	ldrb	r3, [r7, #23]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	3301      	adds	r3, #1
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006596:	7dfb      	ldrb	r3, [r7, #23]
 8006598:	3301      	adds	r3, #1
 800659a:	75fb      	strb	r3, [r7, #23]
 800659c:	7dfa      	ldrb	r2, [r7, #23]
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d3d3      	bcc.n	800654c <IntToUnicode+0x18>
  }
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a09      	ldr	r2, [pc, #36]	; (80065e4 <HAL_PCD_MspInit+0x34>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d10b      	bne.n	80065da <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <HAL_PCD_MspInit+0x38>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	4a08      	ldr	r2, [pc, #32]	; (80065e8 <HAL_PCD_MspInit+0x38>)
 80065c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065cc:	61d3      	str	r3, [r2, #28]
 80065ce:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <HAL_PCD_MspInit+0x38>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr
 80065e4:	40005c00 	.word	0x40005c00
 80065e8:	40021000 	.word	0x40021000

080065ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fe fddb 	bl	80051be <USBD_LL_SetupStage>
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	460b      	mov	r3, r1
 800661a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006622:	78fb      	ldrb	r3, [r7, #3]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	015b      	lsls	r3, r3, #5
 8006628:	4413      	add	r3, r2
 800662a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	4619      	mov	r1, r3
 8006634:	f7fe fe0e 	bl	8005254 <USBD_LL_DataOutStage>
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8006652:	78fb      	ldrb	r3, [r7, #3]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	015b      	lsls	r3, r3, #5
 8006658:	4413      	add	r3, r2
 800665a:	333c      	adds	r3, #60	; 0x3c
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	4619      	mov	r1, r3
 8006662:	f7fe fe68 	bl	8005336 <USBD_LL_DataInStage>
}
 8006666:	bf00      	nop
 8006668:	3708      	adds	r7, #8
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b082      	sub	sp, #8
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe ff78 	bl	8005572 <USBD_LL_SOF>
}
 8006682:	bf00      	nop
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006692:	2301      	movs	r3, #1
 8006694:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b02      	cmp	r3, #2
 800669c:	d001      	beq.n	80066a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800669e:	f7f9 ffd5 	bl	800064c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066a8:	7bfa      	ldrb	r2, [r7, #15]
 80066aa:	4611      	mov	r1, r2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe ff28 	bl	8005502 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fe fee1 	bl	8005480 <USBD_LL_Reset>
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
	...

080066c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe ff22 	bl	8005520 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066e4:	4b04      	ldr	r3, [pc, #16]	; (80066f8 <HAL_PCD_SuspendCallback+0x30>)
 80066e6:	691b      	ldr	r3, [r3, #16]
 80066e8:	4a03      	ldr	r2, [pc, #12]	; (80066f8 <HAL_PCD_SuspendCallback+0x30>)
 80066ea:	f043 0306 	orr.w	r3, r3, #6
 80066ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	e000ed00 	.word	0xe000ed00

080066fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800670a:	4618      	mov	r0, r3
 800670c:	f7fe ff1c 	bl	8005548 <USBD_LL_Resume>
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006720:	4a28      	ldr	r2, [pc, #160]	; (80067c4 <USBD_LL_Init+0xac>)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <USBD_LL_Init+0xac>)
 800672c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006730:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <USBD_LL_Init+0xac>)
 8006732:	4a25      	ldr	r2, [pc, #148]	; (80067c8 <USBD_LL_Init+0xb0>)
 8006734:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006736:	4b23      	ldr	r3, [pc, #140]	; (80067c4 <USBD_LL_Init+0xac>)
 8006738:	2208      	movs	r2, #8
 800673a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800673c:	4b21      	ldr	r3, [pc, #132]	; (80067c4 <USBD_LL_Init+0xac>)
 800673e:	2202      	movs	r2, #2
 8006740:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006742:	4b20      	ldr	r3, [pc, #128]	; (80067c4 <USBD_LL_Init+0xac>)
 8006744:	2200      	movs	r2, #0
 8006746:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006748:	4b1e      	ldr	r3, [pc, #120]	; (80067c4 <USBD_LL_Init+0xac>)
 800674a:	2200      	movs	r2, #0
 800674c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <USBD_LL_Init+0xac>)
 8006750:	2200      	movs	r2, #0
 8006752:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006754:	481b      	ldr	r0, [pc, #108]	; (80067c4 <USBD_LL_Init+0xac>)
 8006756:	f7fa fef6 	bl	8001546 <HAL_PCD_Init>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006760:	f7f9 ff74 	bl	800064c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800676a:	2318      	movs	r3, #24
 800676c:	2200      	movs	r2, #0
 800676e:	2100      	movs	r1, #0
 8006770:	f7fb fd8e 	bl	8002290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800677a:	2358      	movs	r3, #88	; 0x58
 800677c:	2200      	movs	r2, #0
 800677e:	2180      	movs	r1, #128	; 0x80
 8006780:	f7fb fd86 	bl	8002290 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800678a:	23c0      	movs	r3, #192	; 0xc0
 800678c:	2200      	movs	r2, #0
 800678e:	2181      	movs	r1, #129	; 0x81
 8006790:	f7fb fd7e 	bl	8002290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800679a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800679e:	2200      	movs	r2, #0
 80067a0:	2101      	movs	r1, #1
 80067a2:	f7fb fd75 	bl	8002290 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80067ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067b0:	2200      	movs	r2, #0
 80067b2:	2182      	movs	r1, #130	; 0x82
 80067b4:	f7fb fd6c 	bl	8002290 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20001224 	.word	0x20001224
 80067c8:	40005c00 	.word	0x40005c00

080067cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d8:	2300      	movs	r3, #0
 80067da:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fa ff90 	bl	8001708 <HAL_PCD_Start>
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f948 	bl	8006a84 <USBD_Get_USB_Status>
 80067f4:	4603      	mov	r3, r0
 80067f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	461a      	mov	r2, r3
 8006810:	4603      	mov	r3, r0
 8006812:	70fb      	strb	r3, [r7, #3]
 8006814:	460b      	mov	r3, r1
 8006816:	70bb      	strb	r3, [r7, #2]
 8006818:	4613      	mov	r3, r2
 800681a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800682a:	78bb      	ldrb	r3, [r7, #2]
 800682c:	883a      	ldrh	r2, [r7, #0]
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	f7fb f8c3 	bl	80019ba <HAL_PCD_EP_Open>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f922 	bl	8006a84 <USBD_Get_USB_Status>
 8006840:	4603      	mov	r3, r0
 8006842:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006844:	7bbb      	ldrb	r3, [r7, #14]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	460b      	mov	r3, r1
 8006858:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800685a:	2300      	movs	r3, #0
 800685c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	4611      	mov	r1, r2
 800686c:	4618      	mov	r0, r3
 800686e:	f7fb f904 	bl	8001a7a <HAL_PCD_EP_Close>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006876:	7bfb      	ldrb	r3, [r7, #15]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f903 	bl	8006a84 <USBD_Get_USB_Status>
 800687e:	4603      	mov	r3, r0
 8006880:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8006882:	7bbb      	ldrb	r3, [r7, #14]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	460b      	mov	r3, r1
 8006896:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7fb f9ae 	bl	8001c0c <HAL_PCD_EP_SetStall>
 80068b0:	4603      	mov	r3, r0
 80068b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068b4:	7bfb      	ldrb	r3, [r7, #15]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 f8e4 	bl	8006a84 <USBD_Get_USB_Status>
 80068bc:	4603      	mov	r3, r0
 80068be:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80068c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068d6:	2300      	movs	r3, #0
 80068d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068da:	2300      	movs	r3, #0
 80068dc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fb f9e9 	bl	8001cc0 <HAL_PCD_EP_ClrStall>
 80068ee:	4603      	mov	r3, r0
 80068f0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f8c5 	bl	8006a84 <USBD_Get_USB_Status>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800691a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800691c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006920:	2b00      	cmp	r3, #0
 8006922:	da08      	bge.n	8006936 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	015b      	lsls	r3, r3, #5
 800692e:	4413      	add	r3, r2
 8006930:	332a      	adds	r3, #42	; 0x2a
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	e008      	b.n	8006948 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006936:	78fb      	ldrb	r3, [r7, #3]
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	015b      	lsls	r3, r3, #5
 8006940:	4413      	add	r3, r2
 8006942:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006946:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006948:	4618      	mov	r0, r3
 800694a:	3714      	adds	r7, #20
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	460b      	mov	r3, r1
 800695c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f7fa fffd 	bl	8001970 <HAL_PCD_SetAddress>
 8006976:	4603      	mov	r3, r0
 8006978:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f881 	bl	8006a84 <USBD_Get_USB_Status>
 8006982:	4603      	mov	r3, r0
 8006984:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006986:	7bbb      	ldrb	r3, [r7, #14]
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	461a      	mov	r2, r3
 800699c:	460b      	mov	r3, r1
 800699e:	72fb      	strb	r3, [r7, #11]
 80069a0:	4613      	mov	r3, r2
 80069a2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069a4:	2300      	movs	r3, #0
 80069a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	7af9      	ldrb	r1, [r7, #11]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	f7fb f8ef 	bl	8001b9a <HAL_PCD_EP_Transmit>
 80069bc:	4603      	mov	r3, r0
 80069be:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f85e 	bl	8006a84 <USBD_Get_USB_Status>
 80069c8:	4603      	mov	r3, r0
 80069ca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80069cc:	7dbb      	ldrb	r3, [r7, #22]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b086      	sub	sp, #24
 80069da:	af00      	add	r7, sp, #0
 80069dc:	60f8      	str	r0, [r7, #12]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	461a      	mov	r2, r3
 80069e2:	460b      	mov	r3, r1
 80069e4:	72fb      	strb	r3, [r7, #11]
 80069e6:	4613      	mov	r3, r2
 80069e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069f8:	893b      	ldrh	r3, [r7, #8]
 80069fa:	7af9      	ldrb	r1, [r7, #11]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	f7fb f87e 	bl	8001afe <HAL_PCD_EP_Receive>
 8006a02:	4603      	mov	r3, r0
 8006a04:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 f83b 	bl	8006a84 <USBD_Get_USB_Status>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8006a12:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a2e:	78fa      	ldrb	r2, [r7, #3]
 8006a30:	4611      	mov	r1, r2
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fb f89d 	bl	8001b72 <HAL_PCD_EP_GetRxCount>
 8006a38:	4603      	mov	r3, r0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3708      	adds	r7, #8
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
	...

08006a44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a4c:	4b02      	ldr	r3, [pc, #8]	; (8006a58 <USBD_static_malloc+0x14>)
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	370c      	adds	r7, #12
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bc80      	pop	{r7}
 8006a56:	4770      	bx	lr
 8006a58:	20000208 	.word	0x20000208

08006a5c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]

}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bc80      	pop	{r7}
 8006a6c:	4770      	bx	lr

08006a6e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a6e:	b480      	push	{r7}
 8006a70:	b083      	sub	sp, #12
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	460b      	mov	r3, r1
 8006a78:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr

08006a84 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	2b03      	cmp	r3, #3
 8006a96:	d817      	bhi.n	8006ac8 <USBD_Get_USB_Status+0x44>
 8006a98:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <USBD_Get_USB_Status+0x1c>)
 8006a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a9e:	bf00      	nop
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006ab7 	.word	0x08006ab7
 8006aa8:	08006abd 	.word	0x08006abd
 8006aac:	08006ac3 	.word	0x08006ac3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab4:	e00b      	b.n	8006ace <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	73fb      	strb	r3, [r7, #15]
    break;
 8006aba:	e008      	b.n	8006ace <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006abc:	2301      	movs	r3, #1
 8006abe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac0:	e005      	b.n	8006ace <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ac6:	e002      	b.n	8006ace <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73fb      	strb	r3, [r7, #15]
    break;
 8006acc:	bf00      	nop
  }
  return usb_status;
 8006ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop

08006adc <__errno>:
 8006adc:	4b01      	ldr	r3, [pc, #4]	; (8006ae4 <__errno+0x8>)
 8006ade:	6818      	ldr	r0, [r3, #0]
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	20000180 	.word	0x20000180

08006ae8 <__libc_init_array>:
 8006ae8:	b570      	push	{r4, r5, r6, lr}
 8006aea:	2500      	movs	r5, #0
 8006aec:	4e0c      	ldr	r6, [pc, #48]	; (8006b20 <__libc_init_array+0x38>)
 8006aee:	4c0d      	ldr	r4, [pc, #52]	; (8006b24 <__libc_init_array+0x3c>)
 8006af0:	1ba4      	subs	r4, r4, r6
 8006af2:	10a4      	asrs	r4, r4, #2
 8006af4:	42a5      	cmp	r5, r4
 8006af6:	d109      	bne.n	8006b0c <__libc_init_array+0x24>
 8006af8:	f000 fc34 	bl	8007364 <_init>
 8006afc:	2500      	movs	r5, #0
 8006afe:	4e0a      	ldr	r6, [pc, #40]	; (8006b28 <__libc_init_array+0x40>)
 8006b00:	4c0a      	ldr	r4, [pc, #40]	; (8006b2c <__libc_init_array+0x44>)
 8006b02:	1ba4      	subs	r4, r4, r6
 8006b04:	10a4      	asrs	r4, r4, #2
 8006b06:	42a5      	cmp	r5, r4
 8006b08:	d105      	bne.n	8006b16 <__libc_init_array+0x2e>
 8006b0a:	bd70      	pop	{r4, r5, r6, pc}
 8006b0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b10:	4798      	blx	r3
 8006b12:	3501      	adds	r5, #1
 8006b14:	e7ee      	b.n	8006af4 <__libc_init_array+0xc>
 8006b16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b1a:	4798      	blx	r3
 8006b1c:	3501      	adds	r5, #1
 8006b1e:	e7f2      	b.n	8006b06 <__libc_init_array+0x1e>
 8006b20:	08007444 	.word	0x08007444
 8006b24:	08007444 	.word	0x08007444
 8006b28:	08007444 	.word	0x08007444
 8006b2c:	08007448 	.word	0x08007448

08006b30 <memset>:
 8006b30:	4603      	mov	r3, r0
 8006b32:	4402      	add	r2, r0
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d100      	bne.n	8006b3a <memset+0xa>
 8006b38:	4770      	bx	lr
 8006b3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b3e:	e7f9      	b.n	8006b34 <memset+0x4>

08006b40 <siprintf>:
 8006b40:	b40e      	push	{r1, r2, r3}
 8006b42:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b46:	b500      	push	{lr}
 8006b48:	b09c      	sub	sp, #112	; 0x70
 8006b4a:	ab1d      	add	r3, sp, #116	; 0x74
 8006b4c:	9002      	str	r0, [sp, #8]
 8006b4e:	9006      	str	r0, [sp, #24]
 8006b50:	9107      	str	r1, [sp, #28]
 8006b52:	9104      	str	r1, [sp, #16]
 8006b54:	4808      	ldr	r0, [pc, #32]	; (8006b78 <siprintf+0x38>)
 8006b56:	4909      	ldr	r1, [pc, #36]	; (8006b7c <siprintf+0x3c>)
 8006b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b5c:	9105      	str	r1, [sp, #20]
 8006b5e:	6800      	ldr	r0, [r0, #0]
 8006b60:	a902      	add	r1, sp, #8
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	f000 f866 	bl	8006c34 <_svfiprintf_r>
 8006b68:	2200      	movs	r2, #0
 8006b6a:	9b02      	ldr	r3, [sp, #8]
 8006b6c:	701a      	strb	r2, [r3, #0]
 8006b6e:	b01c      	add	sp, #112	; 0x70
 8006b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b74:	b003      	add	sp, #12
 8006b76:	4770      	bx	lr
 8006b78:	20000180 	.word	0x20000180
 8006b7c:	ffff0208 	.word	0xffff0208

08006b80 <__ssputs_r>:
 8006b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b84:	688e      	ldr	r6, [r1, #8]
 8006b86:	4682      	mov	sl, r0
 8006b88:	429e      	cmp	r6, r3
 8006b8a:	460c      	mov	r4, r1
 8006b8c:	4690      	mov	r8, r2
 8006b8e:	4699      	mov	r9, r3
 8006b90:	d837      	bhi.n	8006c02 <__ssputs_r+0x82>
 8006b92:	898a      	ldrh	r2, [r1, #12]
 8006b94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b98:	d031      	beq.n	8006bfe <__ssputs_r+0x7e>
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	6825      	ldr	r5, [r4, #0]
 8006b9e:	6909      	ldr	r1, [r1, #16]
 8006ba0:	1a6f      	subs	r7, r5, r1
 8006ba2:	6965      	ldr	r5, [r4, #20]
 8006ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ba8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bac:	f109 0301 	add.w	r3, r9, #1
 8006bb0:	443b      	add	r3, r7
 8006bb2:	429d      	cmp	r5, r3
 8006bb4:	bf38      	it	cc
 8006bb6:	461d      	movcc	r5, r3
 8006bb8:	0553      	lsls	r3, r2, #21
 8006bba:	d530      	bpl.n	8006c1e <__ssputs_r+0x9e>
 8006bbc:	4629      	mov	r1, r5
 8006bbe:	f000 fb37 	bl	8007230 <_malloc_r>
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	b950      	cbnz	r0, 8006bdc <__ssputs_r+0x5c>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bcc:	f8ca 3000 	str.w	r3, [sl]
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd6:	81a3      	strh	r3, [r4, #12]
 8006bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bdc:	463a      	mov	r2, r7
 8006bde:	6921      	ldr	r1, [r4, #16]
 8006be0:	f000 fab6 	bl	8007150 <memcpy>
 8006be4:	89a3      	ldrh	r3, [r4, #12]
 8006be6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bee:	81a3      	strh	r3, [r4, #12]
 8006bf0:	6126      	str	r6, [r4, #16]
 8006bf2:	443e      	add	r6, r7
 8006bf4:	6026      	str	r6, [r4, #0]
 8006bf6:	464e      	mov	r6, r9
 8006bf8:	6165      	str	r5, [r4, #20]
 8006bfa:	1bed      	subs	r5, r5, r7
 8006bfc:	60a5      	str	r5, [r4, #8]
 8006bfe:	454e      	cmp	r6, r9
 8006c00:	d900      	bls.n	8006c04 <__ssputs_r+0x84>
 8006c02:	464e      	mov	r6, r9
 8006c04:	4632      	mov	r2, r6
 8006c06:	4641      	mov	r1, r8
 8006c08:	6820      	ldr	r0, [r4, #0]
 8006c0a:	f000 faac 	bl	8007166 <memmove>
 8006c0e:	68a3      	ldr	r3, [r4, #8]
 8006c10:	2000      	movs	r0, #0
 8006c12:	1b9b      	subs	r3, r3, r6
 8006c14:	60a3      	str	r3, [r4, #8]
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	441e      	add	r6, r3
 8006c1a:	6026      	str	r6, [r4, #0]
 8006c1c:	e7dc      	b.n	8006bd8 <__ssputs_r+0x58>
 8006c1e:	462a      	mov	r2, r5
 8006c20:	f000 fb60 	bl	80072e4 <_realloc_r>
 8006c24:	4606      	mov	r6, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1e2      	bne.n	8006bf0 <__ssputs_r+0x70>
 8006c2a:	6921      	ldr	r1, [r4, #16]
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f000 fab3 	bl	8007198 <_free_r>
 8006c32:	e7c8      	b.n	8006bc6 <__ssputs_r+0x46>

08006c34 <_svfiprintf_r>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	461d      	mov	r5, r3
 8006c3a:	898b      	ldrh	r3, [r1, #12]
 8006c3c:	b09d      	sub	sp, #116	; 0x74
 8006c3e:	061f      	lsls	r7, r3, #24
 8006c40:	4680      	mov	r8, r0
 8006c42:	460c      	mov	r4, r1
 8006c44:	4616      	mov	r6, r2
 8006c46:	d50f      	bpl.n	8006c68 <_svfiprintf_r+0x34>
 8006c48:	690b      	ldr	r3, [r1, #16]
 8006c4a:	b96b      	cbnz	r3, 8006c68 <_svfiprintf_r+0x34>
 8006c4c:	2140      	movs	r1, #64	; 0x40
 8006c4e:	f000 faef 	bl	8007230 <_malloc_r>
 8006c52:	6020      	str	r0, [r4, #0]
 8006c54:	6120      	str	r0, [r4, #16]
 8006c56:	b928      	cbnz	r0, 8006c64 <_svfiprintf_r+0x30>
 8006c58:	230c      	movs	r3, #12
 8006c5a:	f8c8 3000 	str.w	r3, [r8]
 8006c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c62:	e0c8      	b.n	8006df6 <_svfiprintf_r+0x1c2>
 8006c64:	2340      	movs	r3, #64	; 0x40
 8006c66:	6163      	str	r3, [r4, #20]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c72:	2330      	movs	r3, #48	; 0x30
 8006c74:	f04f 0b01 	mov.w	fp, #1
 8006c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c7c:	9503      	str	r5, [sp, #12]
 8006c7e:	4637      	mov	r7, r6
 8006c80:	463d      	mov	r5, r7
 8006c82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c86:	b10b      	cbz	r3, 8006c8c <_svfiprintf_r+0x58>
 8006c88:	2b25      	cmp	r3, #37	; 0x25
 8006c8a:	d13e      	bne.n	8006d0a <_svfiprintf_r+0xd6>
 8006c8c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c90:	d00b      	beq.n	8006caa <_svfiprintf_r+0x76>
 8006c92:	4653      	mov	r3, sl
 8006c94:	4632      	mov	r2, r6
 8006c96:	4621      	mov	r1, r4
 8006c98:	4640      	mov	r0, r8
 8006c9a:	f7ff ff71 	bl	8006b80 <__ssputs_r>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f000 80a4 	beq.w	8006dec <_svfiprintf_r+0x1b8>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	4453      	add	r3, sl
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	783b      	ldrb	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 809d 	beq.w	8006dec <_svfiprintf_r+0x1b8>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc6:	462f      	mov	r7, r5
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cce:	4850      	ldr	r0, [pc, #320]	; (8006e10 <_svfiprintf_r+0x1dc>)
 8006cd0:	f000 fa30 	bl	8007134 <memchr>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	b9d0      	cbnz	r0, 8006d0e <_svfiprintf_r+0xda>
 8006cd8:	06d9      	lsls	r1, r3, #27
 8006cda:	bf44      	itt	mi
 8006cdc:	2220      	movmi	r2, #32
 8006cde:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ce2:	071a      	lsls	r2, r3, #28
 8006ce4:	bf44      	itt	mi
 8006ce6:	222b      	movmi	r2, #43	; 0x2b
 8006ce8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cec:	782a      	ldrb	r2, [r5, #0]
 8006cee:	2a2a      	cmp	r2, #42	; 0x2a
 8006cf0:	d015      	beq.n	8006d1e <_svfiprintf_r+0xea>
 8006cf2:	462f      	mov	r7, r5
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	250a      	movs	r5, #10
 8006cf8:	9a07      	ldr	r2, [sp, #28]
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d00:	3b30      	subs	r3, #48	; 0x30
 8006d02:	2b09      	cmp	r3, #9
 8006d04:	d94d      	bls.n	8006da2 <_svfiprintf_r+0x16e>
 8006d06:	b1b8      	cbz	r0, 8006d38 <_svfiprintf_r+0x104>
 8006d08:	e00f      	b.n	8006d2a <_svfiprintf_r+0xf6>
 8006d0a:	462f      	mov	r7, r5
 8006d0c:	e7b8      	b.n	8006c80 <_svfiprintf_r+0x4c>
 8006d0e:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <_svfiprintf_r+0x1dc>)
 8006d10:	463d      	mov	r5, r7
 8006d12:	1a80      	subs	r0, r0, r2
 8006d14:	fa0b f000 	lsl.w	r0, fp, r0
 8006d18:	4318      	orrs	r0, r3
 8006d1a:	9004      	str	r0, [sp, #16]
 8006d1c:	e7d3      	b.n	8006cc6 <_svfiprintf_r+0x92>
 8006d1e:	9a03      	ldr	r2, [sp, #12]
 8006d20:	1d11      	adds	r1, r2, #4
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	9103      	str	r1, [sp, #12]
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	db01      	blt.n	8006d2e <_svfiprintf_r+0xfa>
 8006d2a:	9207      	str	r2, [sp, #28]
 8006d2c:	e004      	b.n	8006d38 <_svfiprintf_r+0x104>
 8006d2e:	4252      	negs	r2, r2
 8006d30:	f043 0302 	orr.w	r3, r3, #2
 8006d34:	9207      	str	r2, [sp, #28]
 8006d36:	9304      	str	r3, [sp, #16]
 8006d38:	783b      	ldrb	r3, [r7, #0]
 8006d3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3c:	d10c      	bne.n	8006d58 <_svfiprintf_r+0x124>
 8006d3e:	787b      	ldrb	r3, [r7, #1]
 8006d40:	2b2a      	cmp	r3, #42	; 0x2a
 8006d42:	d133      	bne.n	8006dac <_svfiprintf_r+0x178>
 8006d44:	9b03      	ldr	r3, [sp, #12]
 8006d46:	3702      	adds	r7, #2
 8006d48:	1d1a      	adds	r2, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9203      	str	r2, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d56:	9305      	str	r3, [sp, #20]
 8006d58:	4d2e      	ldr	r5, [pc, #184]	; (8006e14 <_svfiprintf_r+0x1e0>)
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	7839      	ldrb	r1, [r7, #0]
 8006d5e:	4628      	mov	r0, r5
 8006d60:	f000 f9e8 	bl	8007134 <memchr>
 8006d64:	b138      	cbz	r0, 8006d76 <_svfiprintf_r+0x142>
 8006d66:	2340      	movs	r3, #64	; 0x40
 8006d68:	1b40      	subs	r0, r0, r5
 8006d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d6e:	9b04      	ldr	r3, [sp, #16]
 8006d70:	3701      	adds	r7, #1
 8006d72:	4303      	orrs	r3, r0
 8006d74:	9304      	str	r3, [sp, #16]
 8006d76:	7839      	ldrb	r1, [r7, #0]
 8006d78:	2206      	movs	r2, #6
 8006d7a:	4827      	ldr	r0, [pc, #156]	; (8006e18 <_svfiprintf_r+0x1e4>)
 8006d7c:	1c7e      	adds	r6, r7, #1
 8006d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d82:	f000 f9d7 	bl	8007134 <memchr>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	d038      	beq.n	8006dfc <_svfiprintf_r+0x1c8>
 8006d8a:	4b24      	ldr	r3, [pc, #144]	; (8006e1c <_svfiprintf_r+0x1e8>)
 8006d8c:	bb13      	cbnz	r3, 8006dd4 <_svfiprintf_r+0x1a0>
 8006d8e:	9b03      	ldr	r3, [sp, #12]
 8006d90:	3307      	adds	r3, #7
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	3308      	adds	r3, #8
 8006d98:	9303      	str	r3, [sp, #12]
 8006d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d9c:	444b      	add	r3, r9
 8006d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006da0:	e76d      	b.n	8006c7e <_svfiprintf_r+0x4a>
 8006da2:	fb05 3202 	mla	r2, r5, r2, r3
 8006da6:	2001      	movs	r0, #1
 8006da8:	460f      	mov	r7, r1
 8006daa:	e7a6      	b.n	8006cfa <_svfiprintf_r+0xc6>
 8006dac:	2300      	movs	r3, #0
 8006dae:	250a      	movs	r5, #10
 8006db0:	4619      	mov	r1, r3
 8006db2:	3701      	adds	r7, #1
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	4638      	mov	r0, r7
 8006db8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dbc:	3a30      	subs	r2, #48	; 0x30
 8006dbe:	2a09      	cmp	r2, #9
 8006dc0:	d903      	bls.n	8006dca <_svfiprintf_r+0x196>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0c8      	beq.n	8006d58 <_svfiprintf_r+0x124>
 8006dc6:	9105      	str	r1, [sp, #20]
 8006dc8:	e7c6      	b.n	8006d58 <_svfiprintf_r+0x124>
 8006dca:	fb05 2101 	mla	r1, r5, r1, r2
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	e7f0      	b.n	8006db6 <_svfiprintf_r+0x182>
 8006dd4:	ab03      	add	r3, sp, #12
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	4622      	mov	r2, r4
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <_svfiprintf_r+0x1ec>)
 8006ddc:	a904      	add	r1, sp, #16
 8006dde:	4640      	mov	r0, r8
 8006de0:	f3af 8000 	nop.w
 8006de4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006de8:	4681      	mov	r9, r0
 8006dea:	d1d6      	bne.n	8006d9a <_svfiprintf_r+0x166>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	065b      	lsls	r3, r3, #25
 8006df0:	f53f af35 	bmi.w	8006c5e <_svfiprintf_r+0x2a>
 8006df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df6:	b01d      	add	sp, #116	; 0x74
 8006df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfc:	ab03      	add	r3, sp, #12
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4622      	mov	r2, r4
 8006e02:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <_svfiprintf_r+0x1ec>)
 8006e04:	a904      	add	r1, sp, #16
 8006e06:	4640      	mov	r0, r8
 8006e08:	f000 f882 	bl	8006f10 <_printf_i>
 8006e0c:	e7ea      	b.n	8006de4 <_svfiprintf_r+0x1b0>
 8006e0e:	bf00      	nop
 8006e10:	08007410 	.word	0x08007410
 8006e14:	08007416 	.word	0x08007416
 8006e18:	0800741a 	.word	0x0800741a
 8006e1c:	00000000 	.word	0x00000000
 8006e20:	08006b81 	.word	0x08006b81

08006e24 <_printf_common>:
 8006e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e28:	4691      	mov	r9, r2
 8006e2a:	461f      	mov	r7, r3
 8006e2c:	688a      	ldr	r2, [r1, #8]
 8006e2e:	690b      	ldr	r3, [r1, #16]
 8006e30:	4606      	mov	r6, r0
 8006e32:	4293      	cmp	r3, r2
 8006e34:	bfb8      	it	lt
 8006e36:	4613      	movlt	r3, r2
 8006e38:	f8c9 3000 	str.w	r3, [r9]
 8006e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e40:	460c      	mov	r4, r1
 8006e42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e46:	b112      	cbz	r2, 8006e4e <_printf_common+0x2a>
 8006e48:	3301      	adds	r3, #1
 8006e4a:	f8c9 3000 	str.w	r3, [r9]
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	0699      	lsls	r1, r3, #26
 8006e52:	bf42      	ittt	mi
 8006e54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e58:	3302      	addmi	r3, #2
 8006e5a:	f8c9 3000 	strmi.w	r3, [r9]
 8006e5e:	6825      	ldr	r5, [r4, #0]
 8006e60:	f015 0506 	ands.w	r5, r5, #6
 8006e64:	d107      	bne.n	8006e76 <_printf_common+0x52>
 8006e66:	f104 0a19 	add.w	sl, r4, #25
 8006e6a:	68e3      	ldr	r3, [r4, #12]
 8006e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e70:	1a9b      	subs	r3, r3, r2
 8006e72:	42ab      	cmp	r3, r5
 8006e74:	dc29      	bgt.n	8006eca <_printf_common+0xa6>
 8006e76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e7a:	6822      	ldr	r2, [r4, #0]
 8006e7c:	3300      	adds	r3, #0
 8006e7e:	bf18      	it	ne
 8006e80:	2301      	movne	r3, #1
 8006e82:	0692      	lsls	r2, r2, #26
 8006e84:	d42e      	bmi.n	8006ee4 <_printf_common+0xc0>
 8006e86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	47c0      	blx	r8
 8006e90:	3001      	adds	r0, #1
 8006e92:	d021      	beq.n	8006ed8 <_printf_common+0xb4>
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	68e5      	ldr	r5, [r4, #12]
 8006e98:	f003 0306 	and.w	r3, r3, #6
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	bf18      	it	ne
 8006ea0:	2500      	movne	r5, #0
 8006ea2:	f8d9 2000 	ldr.w	r2, [r9]
 8006ea6:	f04f 0900 	mov.w	r9, #0
 8006eaa:	bf08      	it	eq
 8006eac:	1aad      	subeq	r5, r5, r2
 8006eae:	68a3      	ldr	r3, [r4, #8]
 8006eb0:	6922      	ldr	r2, [r4, #16]
 8006eb2:	bf08      	it	eq
 8006eb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	bfc4      	itt	gt
 8006ebc:	1a9b      	subgt	r3, r3, r2
 8006ebe:	18ed      	addgt	r5, r5, r3
 8006ec0:	341a      	adds	r4, #26
 8006ec2:	454d      	cmp	r5, r9
 8006ec4:	d11a      	bne.n	8006efc <_printf_common+0xd8>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e008      	b.n	8006edc <_printf_common+0xb8>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4639      	mov	r1, r7
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	47c0      	blx	r8
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d103      	bne.n	8006ee0 <_printf_common+0xbc>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7c2      	b.n	8006e6a <_printf_common+0x46>
 8006ee4:	2030      	movs	r0, #48	; 0x30
 8006ee6:	18e1      	adds	r1, r4, r3
 8006ee8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef2:	4422      	add	r2, r4
 8006ef4:	3302      	adds	r3, #2
 8006ef6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006efa:	e7c4      	b.n	8006e86 <_printf_common+0x62>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4622      	mov	r2, r4
 8006f00:	4639      	mov	r1, r7
 8006f02:	4630      	mov	r0, r6
 8006f04:	47c0      	blx	r8
 8006f06:	3001      	adds	r0, #1
 8006f08:	d0e6      	beq.n	8006ed8 <_printf_common+0xb4>
 8006f0a:	f109 0901 	add.w	r9, r9, #1
 8006f0e:	e7d8      	b.n	8006ec2 <_printf_common+0x9e>

08006f10 <_printf_i>:
 8006f10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f18:	460c      	mov	r4, r1
 8006f1a:	7e09      	ldrb	r1, [r1, #24]
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	296e      	cmp	r1, #110	; 0x6e
 8006f20:	4617      	mov	r7, r2
 8006f22:	4606      	mov	r6, r0
 8006f24:	4698      	mov	r8, r3
 8006f26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f28:	f000 80b3 	beq.w	8007092 <_printf_i+0x182>
 8006f2c:	d822      	bhi.n	8006f74 <_printf_i+0x64>
 8006f2e:	2963      	cmp	r1, #99	; 0x63
 8006f30:	d036      	beq.n	8006fa0 <_printf_i+0x90>
 8006f32:	d80a      	bhi.n	8006f4a <_printf_i+0x3a>
 8006f34:	2900      	cmp	r1, #0
 8006f36:	f000 80b9 	beq.w	80070ac <_printf_i+0x19c>
 8006f3a:	2958      	cmp	r1, #88	; 0x58
 8006f3c:	f000 8083 	beq.w	8007046 <_printf_i+0x136>
 8006f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f48:	e032      	b.n	8006fb0 <_printf_i+0xa0>
 8006f4a:	2964      	cmp	r1, #100	; 0x64
 8006f4c:	d001      	beq.n	8006f52 <_printf_i+0x42>
 8006f4e:	2969      	cmp	r1, #105	; 0x69
 8006f50:	d1f6      	bne.n	8006f40 <_printf_i+0x30>
 8006f52:	6820      	ldr	r0, [r4, #0]
 8006f54:	6813      	ldr	r3, [r2, #0]
 8006f56:	0605      	lsls	r5, r0, #24
 8006f58:	f103 0104 	add.w	r1, r3, #4
 8006f5c:	d52a      	bpl.n	8006fb4 <_printf_i+0xa4>
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6011      	str	r1, [r2, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	da03      	bge.n	8006f6e <_printf_i+0x5e>
 8006f66:	222d      	movs	r2, #45	; 0x2d
 8006f68:	425b      	negs	r3, r3
 8006f6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f6e:	486f      	ldr	r0, [pc, #444]	; (800712c <_printf_i+0x21c>)
 8006f70:	220a      	movs	r2, #10
 8006f72:	e039      	b.n	8006fe8 <_printf_i+0xd8>
 8006f74:	2973      	cmp	r1, #115	; 0x73
 8006f76:	f000 809d 	beq.w	80070b4 <_printf_i+0x1a4>
 8006f7a:	d808      	bhi.n	8006f8e <_printf_i+0x7e>
 8006f7c:	296f      	cmp	r1, #111	; 0x6f
 8006f7e:	d020      	beq.n	8006fc2 <_printf_i+0xb2>
 8006f80:	2970      	cmp	r1, #112	; 0x70
 8006f82:	d1dd      	bne.n	8006f40 <_printf_i+0x30>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	f043 0320 	orr.w	r3, r3, #32
 8006f8a:	6023      	str	r3, [r4, #0]
 8006f8c:	e003      	b.n	8006f96 <_printf_i+0x86>
 8006f8e:	2975      	cmp	r1, #117	; 0x75
 8006f90:	d017      	beq.n	8006fc2 <_printf_i+0xb2>
 8006f92:	2978      	cmp	r1, #120	; 0x78
 8006f94:	d1d4      	bne.n	8006f40 <_printf_i+0x30>
 8006f96:	2378      	movs	r3, #120	; 0x78
 8006f98:	4865      	ldr	r0, [pc, #404]	; (8007130 <_printf_i+0x220>)
 8006f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f9e:	e055      	b.n	800704c <_printf_i+0x13c>
 8006fa0:	6813      	ldr	r3, [r2, #0]
 8006fa2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fa6:	1d19      	adds	r1, r3, #4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	6011      	str	r1, [r2, #0]
 8006fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e08c      	b.n	80070ce <_printf_i+0x1be>
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fba:	6011      	str	r1, [r2, #0]
 8006fbc:	bf18      	it	ne
 8006fbe:	b21b      	sxthne	r3, r3
 8006fc0:	e7cf      	b.n	8006f62 <_printf_i+0x52>
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	6825      	ldr	r5, [r4, #0]
 8006fc6:	1d18      	adds	r0, r3, #4
 8006fc8:	6010      	str	r0, [r2, #0]
 8006fca:	0628      	lsls	r0, r5, #24
 8006fcc:	d501      	bpl.n	8006fd2 <_printf_i+0xc2>
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	e002      	b.n	8006fd8 <_printf_i+0xc8>
 8006fd2:	0668      	lsls	r0, r5, #25
 8006fd4:	d5fb      	bpl.n	8006fce <_printf_i+0xbe>
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	296f      	cmp	r1, #111	; 0x6f
 8006fda:	bf14      	ite	ne
 8006fdc:	220a      	movne	r2, #10
 8006fde:	2208      	moveq	r2, #8
 8006fe0:	4852      	ldr	r0, [pc, #328]	; (800712c <_printf_i+0x21c>)
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fe8:	6865      	ldr	r5, [r4, #4]
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	60a5      	str	r5, [r4, #8]
 8006fee:	f2c0 8095 	blt.w	800711c <_printf_i+0x20c>
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	f021 0104 	bic.w	r1, r1, #4
 8006ff8:	6021      	str	r1, [r4, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d13d      	bne.n	800707a <_printf_i+0x16a>
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	f040 808e 	bne.w	8007120 <_printf_i+0x210>
 8007004:	4665      	mov	r5, ip
 8007006:	2a08      	cmp	r2, #8
 8007008:	d10b      	bne.n	8007022 <_printf_i+0x112>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	07db      	lsls	r3, r3, #31
 800700e:	d508      	bpl.n	8007022 <_printf_i+0x112>
 8007010:	6923      	ldr	r3, [r4, #16]
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	429a      	cmp	r2, r3
 8007016:	bfde      	ittt	le
 8007018:	2330      	movle	r3, #48	; 0x30
 800701a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800701e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007022:	ebac 0305 	sub.w	r3, ip, r5
 8007026:	6123      	str	r3, [r4, #16]
 8007028:	f8cd 8000 	str.w	r8, [sp]
 800702c:	463b      	mov	r3, r7
 800702e:	aa03      	add	r2, sp, #12
 8007030:	4621      	mov	r1, r4
 8007032:	4630      	mov	r0, r6
 8007034:	f7ff fef6 	bl	8006e24 <_printf_common>
 8007038:	3001      	adds	r0, #1
 800703a:	d14d      	bne.n	80070d8 <_printf_i+0x1c8>
 800703c:	f04f 30ff 	mov.w	r0, #4294967295
 8007040:	b005      	add	sp, #20
 8007042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007046:	4839      	ldr	r0, [pc, #228]	; (800712c <_printf_i+0x21c>)
 8007048:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800704c:	6813      	ldr	r3, [r2, #0]
 800704e:	6821      	ldr	r1, [r4, #0]
 8007050:	1d1d      	adds	r5, r3, #4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6015      	str	r5, [r2, #0]
 8007056:	060a      	lsls	r2, r1, #24
 8007058:	d50b      	bpl.n	8007072 <_printf_i+0x162>
 800705a:	07ca      	lsls	r2, r1, #31
 800705c:	bf44      	itt	mi
 800705e:	f041 0120 	orrmi.w	r1, r1, #32
 8007062:	6021      	strmi	r1, [r4, #0]
 8007064:	b91b      	cbnz	r3, 800706e <_printf_i+0x15e>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	f022 0220 	bic.w	r2, r2, #32
 800706c:	6022      	str	r2, [r4, #0]
 800706e:	2210      	movs	r2, #16
 8007070:	e7b7      	b.n	8006fe2 <_printf_i+0xd2>
 8007072:	064d      	lsls	r5, r1, #25
 8007074:	bf48      	it	mi
 8007076:	b29b      	uxthmi	r3, r3
 8007078:	e7ef      	b.n	800705a <_printf_i+0x14a>
 800707a:	4665      	mov	r5, ip
 800707c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007080:	fb02 3311 	mls	r3, r2, r1, r3
 8007084:	5cc3      	ldrb	r3, [r0, r3]
 8007086:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800708a:	460b      	mov	r3, r1
 800708c:	2900      	cmp	r1, #0
 800708e:	d1f5      	bne.n	800707c <_printf_i+0x16c>
 8007090:	e7b9      	b.n	8007006 <_printf_i+0xf6>
 8007092:	6813      	ldr	r3, [r2, #0]
 8007094:	6825      	ldr	r5, [r4, #0]
 8007096:	1d18      	adds	r0, r3, #4
 8007098:	6961      	ldr	r1, [r4, #20]
 800709a:	6010      	str	r0, [r2, #0]
 800709c:	0628      	lsls	r0, r5, #24
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	d501      	bpl.n	80070a6 <_printf_i+0x196>
 80070a2:	6019      	str	r1, [r3, #0]
 80070a4:	e002      	b.n	80070ac <_printf_i+0x19c>
 80070a6:	066a      	lsls	r2, r5, #25
 80070a8:	d5fb      	bpl.n	80070a2 <_printf_i+0x192>
 80070aa:	8019      	strh	r1, [r3, #0]
 80070ac:	2300      	movs	r3, #0
 80070ae:	4665      	mov	r5, ip
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	e7b9      	b.n	8007028 <_printf_i+0x118>
 80070b4:	6813      	ldr	r3, [r2, #0]
 80070b6:	1d19      	adds	r1, r3, #4
 80070b8:	6011      	str	r1, [r2, #0]
 80070ba:	681d      	ldr	r5, [r3, #0]
 80070bc:	6862      	ldr	r2, [r4, #4]
 80070be:	2100      	movs	r1, #0
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 f837 	bl	8007134 <memchr>
 80070c6:	b108      	cbz	r0, 80070cc <_printf_i+0x1bc>
 80070c8:	1b40      	subs	r0, r0, r5
 80070ca:	6060      	str	r0, [r4, #4]
 80070cc:	6863      	ldr	r3, [r4, #4]
 80070ce:	6123      	str	r3, [r4, #16]
 80070d0:	2300      	movs	r3, #0
 80070d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d6:	e7a7      	b.n	8007028 <_printf_i+0x118>
 80070d8:	6923      	ldr	r3, [r4, #16]
 80070da:	462a      	mov	r2, r5
 80070dc:	4639      	mov	r1, r7
 80070de:	4630      	mov	r0, r6
 80070e0:	47c0      	blx	r8
 80070e2:	3001      	adds	r0, #1
 80070e4:	d0aa      	beq.n	800703c <_printf_i+0x12c>
 80070e6:	6823      	ldr	r3, [r4, #0]
 80070e8:	079b      	lsls	r3, r3, #30
 80070ea:	d413      	bmi.n	8007114 <_printf_i+0x204>
 80070ec:	68e0      	ldr	r0, [r4, #12]
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	4298      	cmp	r0, r3
 80070f2:	bfb8      	it	lt
 80070f4:	4618      	movlt	r0, r3
 80070f6:	e7a3      	b.n	8007040 <_printf_i+0x130>
 80070f8:	2301      	movs	r3, #1
 80070fa:	464a      	mov	r2, r9
 80070fc:	4639      	mov	r1, r7
 80070fe:	4630      	mov	r0, r6
 8007100:	47c0      	blx	r8
 8007102:	3001      	adds	r0, #1
 8007104:	d09a      	beq.n	800703c <_printf_i+0x12c>
 8007106:	3501      	adds	r5, #1
 8007108:	68e3      	ldr	r3, [r4, #12]
 800710a:	9a03      	ldr	r2, [sp, #12]
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	42ab      	cmp	r3, r5
 8007110:	dcf2      	bgt.n	80070f8 <_printf_i+0x1e8>
 8007112:	e7eb      	b.n	80070ec <_printf_i+0x1dc>
 8007114:	2500      	movs	r5, #0
 8007116:	f104 0919 	add.w	r9, r4, #25
 800711a:	e7f5      	b.n	8007108 <_printf_i+0x1f8>
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1ac      	bne.n	800707a <_printf_i+0x16a>
 8007120:	7803      	ldrb	r3, [r0, #0]
 8007122:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800712a:	e76c      	b.n	8007006 <_printf_i+0xf6>
 800712c:	08007421 	.word	0x08007421
 8007130:	08007432 	.word	0x08007432

08007134 <memchr>:
 8007134:	b510      	push	{r4, lr}
 8007136:	b2c9      	uxtb	r1, r1
 8007138:	4402      	add	r2, r0
 800713a:	4290      	cmp	r0, r2
 800713c:	4603      	mov	r3, r0
 800713e:	d101      	bne.n	8007144 <memchr+0x10>
 8007140:	2300      	movs	r3, #0
 8007142:	e003      	b.n	800714c <memchr+0x18>
 8007144:	781c      	ldrb	r4, [r3, #0]
 8007146:	3001      	adds	r0, #1
 8007148:	428c      	cmp	r4, r1
 800714a:	d1f6      	bne.n	800713a <memchr+0x6>
 800714c:	4618      	mov	r0, r3
 800714e:	bd10      	pop	{r4, pc}

08007150 <memcpy>:
 8007150:	b510      	push	{r4, lr}
 8007152:	1e43      	subs	r3, r0, #1
 8007154:	440a      	add	r2, r1
 8007156:	4291      	cmp	r1, r2
 8007158:	d100      	bne.n	800715c <memcpy+0xc>
 800715a:	bd10      	pop	{r4, pc}
 800715c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007160:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007164:	e7f7      	b.n	8007156 <memcpy+0x6>

08007166 <memmove>:
 8007166:	4288      	cmp	r0, r1
 8007168:	b510      	push	{r4, lr}
 800716a:	eb01 0302 	add.w	r3, r1, r2
 800716e:	d807      	bhi.n	8007180 <memmove+0x1a>
 8007170:	1e42      	subs	r2, r0, #1
 8007172:	4299      	cmp	r1, r3
 8007174:	d00a      	beq.n	800718c <memmove+0x26>
 8007176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800717a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800717e:	e7f8      	b.n	8007172 <memmove+0xc>
 8007180:	4283      	cmp	r3, r0
 8007182:	d9f5      	bls.n	8007170 <memmove+0xa>
 8007184:	1881      	adds	r1, r0, r2
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	42d3      	cmn	r3, r2
 800718a:	d100      	bne.n	800718e <memmove+0x28>
 800718c:	bd10      	pop	{r4, pc}
 800718e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007192:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007196:	e7f7      	b.n	8007188 <memmove+0x22>

08007198 <_free_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	2900      	cmp	r1, #0
 800719e:	d043      	beq.n	8007228 <_free_r+0x90>
 80071a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071a4:	1f0c      	subs	r4, r1, #4
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	bfb8      	it	lt
 80071aa:	18e4      	addlt	r4, r4, r3
 80071ac:	f000 f8d0 	bl	8007350 <__malloc_lock>
 80071b0:	4a1e      	ldr	r2, [pc, #120]	; (800722c <_free_r+0x94>)
 80071b2:	6813      	ldr	r3, [r2, #0]
 80071b4:	4610      	mov	r0, r2
 80071b6:	b933      	cbnz	r3, 80071c6 <_free_r+0x2e>
 80071b8:	6063      	str	r3, [r4, #4]
 80071ba:	6014      	str	r4, [r2, #0]
 80071bc:	4628      	mov	r0, r5
 80071be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071c2:	f000 b8c6 	b.w	8007352 <__malloc_unlock>
 80071c6:	42a3      	cmp	r3, r4
 80071c8:	d90b      	bls.n	80071e2 <_free_r+0x4a>
 80071ca:	6821      	ldr	r1, [r4, #0]
 80071cc:	1862      	adds	r2, r4, r1
 80071ce:	4293      	cmp	r3, r2
 80071d0:	bf01      	itttt	eq
 80071d2:	681a      	ldreq	r2, [r3, #0]
 80071d4:	685b      	ldreq	r3, [r3, #4]
 80071d6:	1852      	addeq	r2, r2, r1
 80071d8:	6022      	streq	r2, [r4, #0]
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	6004      	str	r4, [r0, #0]
 80071de:	e7ed      	b.n	80071bc <_free_r+0x24>
 80071e0:	4613      	mov	r3, r2
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	b10a      	cbz	r2, 80071ea <_free_r+0x52>
 80071e6:	42a2      	cmp	r2, r4
 80071e8:	d9fa      	bls.n	80071e0 <_free_r+0x48>
 80071ea:	6819      	ldr	r1, [r3, #0]
 80071ec:	1858      	adds	r0, r3, r1
 80071ee:	42a0      	cmp	r0, r4
 80071f0:	d10b      	bne.n	800720a <_free_r+0x72>
 80071f2:	6820      	ldr	r0, [r4, #0]
 80071f4:	4401      	add	r1, r0
 80071f6:	1858      	adds	r0, r3, r1
 80071f8:	4282      	cmp	r2, r0
 80071fa:	6019      	str	r1, [r3, #0]
 80071fc:	d1de      	bne.n	80071bc <_free_r+0x24>
 80071fe:	6810      	ldr	r0, [r2, #0]
 8007200:	6852      	ldr	r2, [r2, #4]
 8007202:	4401      	add	r1, r0
 8007204:	6019      	str	r1, [r3, #0]
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	e7d8      	b.n	80071bc <_free_r+0x24>
 800720a:	d902      	bls.n	8007212 <_free_r+0x7a>
 800720c:	230c      	movs	r3, #12
 800720e:	602b      	str	r3, [r5, #0]
 8007210:	e7d4      	b.n	80071bc <_free_r+0x24>
 8007212:	6820      	ldr	r0, [r4, #0]
 8007214:	1821      	adds	r1, r4, r0
 8007216:	428a      	cmp	r2, r1
 8007218:	bf01      	itttt	eq
 800721a:	6811      	ldreq	r1, [r2, #0]
 800721c:	6852      	ldreq	r2, [r2, #4]
 800721e:	1809      	addeq	r1, r1, r0
 8007220:	6021      	streq	r1, [r4, #0]
 8007222:	6062      	str	r2, [r4, #4]
 8007224:	605c      	str	r4, [r3, #4]
 8007226:	e7c9      	b.n	80071bc <_free_r+0x24>
 8007228:	bd38      	pop	{r3, r4, r5, pc}
 800722a:	bf00      	nop
 800722c:	20000428 	.word	0x20000428

08007230 <_malloc_r>:
 8007230:	b570      	push	{r4, r5, r6, lr}
 8007232:	1ccd      	adds	r5, r1, #3
 8007234:	f025 0503 	bic.w	r5, r5, #3
 8007238:	3508      	adds	r5, #8
 800723a:	2d0c      	cmp	r5, #12
 800723c:	bf38      	it	cc
 800723e:	250c      	movcc	r5, #12
 8007240:	2d00      	cmp	r5, #0
 8007242:	4606      	mov	r6, r0
 8007244:	db01      	blt.n	800724a <_malloc_r+0x1a>
 8007246:	42a9      	cmp	r1, r5
 8007248:	d903      	bls.n	8007252 <_malloc_r+0x22>
 800724a:	230c      	movs	r3, #12
 800724c:	6033      	str	r3, [r6, #0]
 800724e:	2000      	movs	r0, #0
 8007250:	bd70      	pop	{r4, r5, r6, pc}
 8007252:	f000 f87d 	bl	8007350 <__malloc_lock>
 8007256:	4a21      	ldr	r2, [pc, #132]	; (80072dc <_malloc_r+0xac>)
 8007258:	6814      	ldr	r4, [r2, #0]
 800725a:	4621      	mov	r1, r4
 800725c:	b991      	cbnz	r1, 8007284 <_malloc_r+0x54>
 800725e:	4c20      	ldr	r4, [pc, #128]	; (80072e0 <_malloc_r+0xb0>)
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	b91b      	cbnz	r3, 800726c <_malloc_r+0x3c>
 8007264:	4630      	mov	r0, r6
 8007266:	f000 f863 	bl	8007330 <_sbrk_r>
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	4629      	mov	r1, r5
 800726e:	4630      	mov	r0, r6
 8007270:	f000 f85e 	bl	8007330 <_sbrk_r>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d124      	bne.n	80072c2 <_malloc_r+0x92>
 8007278:	230c      	movs	r3, #12
 800727a:	4630      	mov	r0, r6
 800727c:	6033      	str	r3, [r6, #0]
 800727e:	f000 f868 	bl	8007352 <__malloc_unlock>
 8007282:	e7e4      	b.n	800724e <_malloc_r+0x1e>
 8007284:	680b      	ldr	r3, [r1, #0]
 8007286:	1b5b      	subs	r3, r3, r5
 8007288:	d418      	bmi.n	80072bc <_malloc_r+0x8c>
 800728a:	2b0b      	cmp	r3, #11
 800728c:	d90f      	bls.n	80072ae <_malloc_r+0x7e>
 800728e:	600b      	str	r3, [r1, #0]
 8007290:	18cc      	adds	r4, r1, r3
 8007292:	50cd      	str	r5, [r1, r3]
 8007294:	4630      	mov	r0, r6
 8007296:	f000 f85c 	bl	8007352 <__malloc_unlock>
 800729a:	f104 000b 	add.w	r0, r4, #11
 800729e:	1d23      	adds	r3, r4, #4
 80072a0:	f020 0007 	bic.w	r0, r0, #7
 80072a4:	1ac3      	subs	r3, r0, r3
 80072a6:	d0d3      	beq.n	8007250 <_malloc_r+0x20>
 80072a8:	425a      	negs	r2, r3
 80072aa:	50e2      	str	r2, [r4, r3]
 80072ac:	e7d0      	b.n	8007250 <_malloc_r+0x20>
 80072ae:	684b      	ldr	r3, [r1, #4]
 80072b0:	428c      	cmp	r4, r1
 80072b2:	bf16      	itet	ne
 80072b4:	6063      	strne	r3, [r4, #4]
 80072b6:	6013      	streq	r3, [r2, #0]
 80072b8:	460c      	movne	r4, r1
 80072ba:	e7eb      	b.n	8007294 <_malloc_r+0x64>
 80072bc:	460c      	mov	r4, r1
 80072be:	6849      	ldr	r1, [r1, #4]
 80072c0:	e7cc      	b.n	800725c <_malloc_r+0x2c>
 80072c2:	1cc4      	adds	r4, r0, #3
 80072c4:	f024 0403 	bic.w	r4, r4, #3
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d005      	beq.n	80072d8 <_malloc_r+0xa8>
 80072cc:	1a21      	subs	r1, r4, r0
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f82e 	bl	8007330 <_sbrk_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d0cf      	beq.n	8007278 <_malloc_r+0x48>
 80072d8:	6025      	str	r5, [r4, #0]
 80072da:	e7db      	b.n	8007294 <_malloc_r+0x64>
 80072dc:	20000428 	.word	0x20000428
 80072e0:	2000042c 	.word	0x2000042c

080072e4 <_realloc_r>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	4607      	mov	r7, r0
 80072e8:	4614      	mov	r4, r2
 80072ea:	460e      	mov	r6, r1
 80072ec:	b921      	cbnz	r1, 80072f8 <_realloc_r+0x14>
 80072ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072f2:	4611      	mov	r1, r2
 80072f4:	f7ff bf9c 	b.w	8007230 <_malloc_r>
 80072f8:	b922      	cbnz	r2, 8007304 <_realloc_r+0x20>
 80072fa:	f7ff ff4d 	bl	8007198 <_free_r>
 80072fe:	4625      	mov	r5, r4
 8007300:	4628      	mov	r0, r5
 8007302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007304:	f000 f826 	bl	8007354 <_malloc_usable_size_r>
 8007308:	42a0      	cmp	r0, r4
 800730a:	d20f      	bcs.n	800732c <_realloc_r+0x48>
 800730c:	4621      	mov	r1, r4
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ff8e 	bl	8007230 <_malloc_r>
 8007314:	4605      	mov	r5, r0
 8007316:	2800      	cmp	r0, #0
 8007318:	d0f2      	beq.n	8007300 <_realloc_r+0x1c>
 800731a:	4631      	mov	r1, r6
 800731c:	4622      	mov	r2, r4
 800731e:	f7ff ff17 	bl	8007150 <memcpy>
 8007322:	4631      	mov	r1, r6
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ff37 	bl	8007198 <_free_r>
 800732a:	e7e9      	b.n	8007300 <_realloc_r+0x1c>
 800732c:	4635      	mov	r5, r6
 800732e:	e7e7      	b.n	8007300 <_realloc_r+0x1c>

08007330 <_sbrk_r>:
 8007330:	b538      	push	{r3, r4, r5, lr}
 8007332:	2300      	movs	r3, #0
 8007334:	4c05      	ldr	r4, [pc, #20]	; (800734c <_sbrk_r+0x1c>)
 8007336:	4605      	mov	r5, r0
 8007338:	4608      	mov	r0, r1
 800733a:	6023      	str	r3, [r4, #0]
 800733c:	f7f9 fad8 	bl	80008f0 <_sbrk>
 8007340:	1c43      	adds	r3, r0, #1
 8007342:	d102      	bne.n	800734a <_sbrk_r+0x1a>
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	b103      	cbz	r3, 800734a <_sbrk_r+0x1a>
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	bd38      	pop	{r3, r4, r5, pc}
 800734c:	20001490 	.word	0x20001490

08007350 <__malloc_lock>:
 8007350:	4770      	bx	lr

08007352 <__malloc_unlock>:
 8007352:	4770      	bx	lr

08007354 <_malloc_usable_size_r>:
 8007354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007358:	1f18      	subs	r0, r3, #4
 800735a:	2b00      	cmp	r3, #0
 800735c:	bfbc      	itt	lt
 800735e:	580b      	ldrlt	r3, [r1, r0]
 8007360:	18c0      	addlt	r0, r0, r3
 8007362:	4770      	bx	lr

08007364 <_init>:
 8007364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007366:	bf00      	nop
 8007368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800736a:	bc08      	pop	{r3}
 800736c:	469e      	mov	lr, r3
 800736e:	4770      	bx	lr

08007370 <_fini>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	bf00      	nop
 8007374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007376:	bc08      	pop	{r3}
 8007378:	469e      	mov	lr, r3
 800737a:	4770      	bx	lr
