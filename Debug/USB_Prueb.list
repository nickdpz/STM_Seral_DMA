
USB_Prueb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007368  08007368  00017368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007430  08007430  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007430  08007430  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007430  08007430  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007434  08007434  00017434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ac  200001e0  08007618  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  08007618  0002148c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a68  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000326b  00000000  00000000  00037c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001270  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001108  00000000  00000000  0003c150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017777  00000000  00000000  0003d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010180  00000000  00000000  000549cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000773d9  00000000  00000000  00064b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbf28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fc8  00000000  00000000  000dbfa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08007350 	.word	0x08007350

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	08007350 	.word	0x08007350

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc49 	bl	80009e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f871 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 fa15 	bl	8000588 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015e:	f006 f825 	bl	80061ac <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000162:	f000 f901 	bl	8000368 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000166:	f000 f975 	bl	8000454 <MX_TIM3_Init>
  MX_TIM4_Init();
 800016a:	f000 f9bf 	bl	80004ec <MX_TIM4_Init>
  MX_I2C2_Init();
 800016e:	f000 f8cd 	bl	800030c <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000172:	f000 f8be 	bl	80002f2 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	HAL_Delay(100);
 8000176:	2064      	movs	r0, #100	; 0x64
 8000178:	f000 fc98 	bl	8000aac <HAL_Delay>
	  	CDC_tx_size=sprintf(CDC_tx_buff,"Scanning I2C bus:\r\n");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 800017c:	4a29      	ldr	r2, [pc, #164]	; (8000224 <main+0xd8>)
 800017e:	4b2a      	ldr	r3, [pc, #168]	; (8000228 <main+0xdc>)
 8000180:	4615      	mov	r5, r2
 8000182:	461c      	mov	r4, r3
 8000184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000186:	6028      	str	r0, [r5, #0]
 8000188:	6069      	str	r1, [r5, #4]
 800018a:	60aa      	str	r2, [r5, #8]
 800018c:	60eb      	str	r3, [r5, #12]
 800018e:	6820      	ldr	r0, [r4, #0]
 8000190:	6128      	str	r0, [r5, #16]
 8000192:	2313      	movs	r3, #19
 8000194:	b2da      	uxtb	r2, r3
 8000196:	4b25      	ldr	r3, [pc, #148]	; (800022c <main+0xe0>)
 8000198:	701a      	strb	r2, [r3, #0]
	  	CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 800019a:	4b24      	ldr	r3, [pc, #144]	; (800022c <main+0xe0>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	b29b      	uxth	r3, r3
 80001a0:	4619      	mov	r1, r3
 80001a2:	4820      	ldr	r0, [pc, #128]	; (8000224 <main+0xd8>)
 80001a4:	f006 f8c6 	bl	8006334 <CDC_Transmit_FS>
	  	uint8_t i=1;
 80001a8:	2301      	movs	r3, #1
 80001aa:	71fb      	strb	r3, [r7, #7]
	  	for (i=1; i<128; i++)
 80001ac:	2301      	movs	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	e032      	b.n	8000218 <main+0xcc>
	  	{
	  		int result = HAL_I2C_IsDeviceReady(&hi2c2,i<<1,1,1);
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	b29b      	uxth	r3, r3
 80001b6:	005b      	lsls	r3, r3, #1
 80001b8:	b299      	uxth	r1, r3
 80001ba:	2301      	movs	r3, #1
 80001bc:	2201      	movs	r2, #1
 80001be:	481c      	ldr	r0, [pc, #112]	; (8000230 <main+0xe4>)
 80001c0:	f001 f83e 	bl	8001240 <HAL_I2C_IsDeviceReady>
 80001c4:	4603      	mov	r3, r0
 80001c6:	603b      	str	r3, [r7, #0]
	  		if (result != HAL_OK) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d121      	bne.n	8000212 <main+0xc6>
	  		{
	  			//CDC_tx_size=sprintf(CDC_tx_buff,".");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
	  			//CDC_Transmit_FS(CDC_tx_buff,CDC_tx_size);//Transmite por USB
	  		}else{
	  			CDC_tx_size=sprintf(CDC_tx_buff,"\r\n");//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 80001ce:	4b15      	ldr	r3, [pc, #84]	; (8000224 <main+0xd8>)
 80001d0:	4a18      	ldr	r2, [pc, #96]	; (8000234 <main+0xe8>)
 80001d2:	8811      	ldrh	r1, [r2, #0]
 80001d4:	7892      	ldrb	r2, [r2, #2]
 80001d6:	8019      	strh	r1, [r3, #0]
 80001d8:	709a      	strb	r2, [r3, #2]
 80001da:	2302      	movs	r3, #2
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <main+0xe0>)
 80001e0:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS((uint8_t *)&CDC_tx_buff,CDC_tx_size);//Transmite por USB
 80001e2:	4b12      	ldr	r3, [pc, #72]	; (800022c <main+0xe0>)
 80001e4:	781b      	ldrb	r3, [r3, #0]
 80001e6:	b29b      	uxth	r3, r3
 80001e8:	4619      	mov	r1, r3
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <main+0xd8>)
 80001ec:	f006 f8a2 	bl	8006334 <CDC_Transmit_FS>
	  			CDC_tx_size=sprintf(CDC_tx_buff,"0x%X", i);//Guarda en la variable CDC_tx_buff el string y el tama単o del string queda en CDC_size_buff
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	461a      	mov	r2, r3
 80001f4:	4910      	ldr	r1, [pc, #64]	; (8000238 <main+0xec>)
 80001f6:	480b      	ldr	r0, [pc, #44]	; (8000224 <main+0xd8>)
 80001f8:	f006 fc98 	bl	8006b2c <siprintf>
 80001fc:	4603      	mov	r3, r0
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	4b0a      	ldr	r3, [pc, #40]	; (800022c <main+0xe0>)
 8000202:	701a      	strb	r2, [r3, #0]
	  			CDC_Transmit_FS((uint8_t *)CDC_tx_buff,CDC_tx_size);//Transmite por USB
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0xe0>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	b29b      	uxth	r3, r3
 800020a:	4619      	mov	r1, r3
 800020c:	4805      	ldr	r0, [pc, #20]	; (8000224 <main+0xd8>)
 800020e:	f006 f891 	bl	8006334 <CDC_Transmit_FS>
	  	for (i=1; i<128; i++)
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	3301      	adds	r3, #1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021c:	2b00      	cmp	r3, #0
 800021e:	dac8      	bge.n	80001b2 <main+0x66>
  {
 8000220:	e7a9      	b.n	8000176 <main+0x2a>
 8000222:	bf00      	nop
 8000224:	200004c4 	.word	0x200004c4
 8000228:	08007368 	.word	0x08007368
 800022c:	20000540 	.word	0x20000540
 8000230:	20000470 	.word	0x20000470
 8000234:	0800737c 	.word	0x0800737c
 8000238:	08007380 	.word	0x08007380

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	; 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000246:	2228      	movs	r2, #40	; 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f006 fc66 	bl	8006b1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026c:	2301      	movs	r3, #1
 800026e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027a:	2301      	movs	r3, #1
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000292:	4618      	mov	r0, r3
 8000294:	f002 f82e 	bl	80022f4 <HAL_RCC_OscConfig>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800029e:	f000 f9cb 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a2:	230f      	movs	r3, #15
 80002a4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a6:	2302      	movs	r3, #2
 80002a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	2101      	movs	r1, #1
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 fa98 	bl	80027f4 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002ca:	f000 f9b5 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80002ce:	2310      	movs	r3, #16
 80002d0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80002d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80002d6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4618      	mov	r0, r3
 80002dc:	f002 fc12 	bl	8002b04 <HAL_RCCEx_PeriphCLKConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002e6:	f000 f9a7 	bl	8000638 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3750      	adds	r7, #80	; 0x50
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80002f2:	b580      	push	{r7, lr}
 80002f4:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2100      	movs	r1, #0
 80002fa:	2014      	movs	r0, #20
 80002fc:	f000 fccf 	bl	8000c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000300:	2014      	movs	r0, #20
 8000302:	f000 fce8 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <MX_I2C2_Init+0x50>)
 8000312:	4a13      	ldr	r2, [pc, #76]	; (8000360 <MX_I2C2_Init+0x54>)
 8000314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000316:	4b11      	ldr	r3, [pc, #68]	; (800035c <MX_I2C2_Init+0x50>)
 8000318:	4a12      	ldr	r2, [pc, #72]	; (8000364 <MX_I2C2_Init+0x58>)
 800031a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <MX_I2C2_Init+0x50>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <MX_I2C2_Init+0x50>)
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000328:	4b0c      	ldr	r3, [pc, #48]	; (800035c <MX_I2C2_Init+0x50>)
 800032a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800032e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <MX_I2C2_Init+0x50>)
 8000332:	2200      	movs	r2, #0
 8000334:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <MX_I2C2_Init+0x50>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <MX_I2C2_Init+0x50>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <MX_I2C2_Init+0x50>)
 8000344:	2200      	movs	r2, #0
 8000346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_I2C2_Init+0x50>)
 800034a:	f000 fe51 	bl	8000ff0 <HAL_I2C_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000354:	f000 f970 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000470 	.word	0x20000470
 8000360:	40005800 	.word	0x40005800
 8000364:	000186a0 	.word	0x000186a0

08000368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08e      	sub	sp, #56	; 0x38
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800036e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037c:	f107 0320 	add.w	r3, r7, #32
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000398:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <MX_TIM2_Init+0xe8>)
 800039a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800039e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003a2:	2230      	movs	r2, #48	; 0x30
 80003a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a6:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 80003ac:	4b28      	ldr	r3, [pc, #160]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003ae:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b4:	4b26      	ldr	r3, [pc, #152]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003c0:	4823      	ldr	r0, [pc, #140]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003c2:	f002 fc55 	bl	8002c70 <HAL_TIM_Base_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80003cc:	f000 f934 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003da:	4619      	mov	r1, r3
 80003dc:	481c      	ldr	r0, [pc, #112]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003de:	f002 fe75 	bl	80030cc <HAL_TIM_ConfigClockSource>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80003e8:	f000 f926 	bl	8000638 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003ec:	4818      	ldr	r0, [pc, #96]	; (8000450 <MX_TIM2_Init+0xe8>)
 80003ee:	f002 fc6a 	bl	8002cc6 <HAL_TIM_PWM_Init>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80003f8:	f000 f91e 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000404:	f107 0320 	add.w	r3, r7, #32
 8000408:	4619      	mov	r1, r3
 800040a:	4811      	ldr	r0, [pc, #68]	; (8000450 <MX_TIM2_Init+0xe8>)
 800040c:	f003 f9c2 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 8000410:	4603      	mov	r3, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d001      	beq.n	800041a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000416:	f000 f90f 	bl	8000638 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800041a:	2360      	movs	r3, #96	; 0x60
 800041c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 900;
 800041e:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000424:	2300      	movs	r3, #0
 8000426:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000428:	2300      	movs	r3, #0
 800042a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	4807      	ldr	r0, [pc, #28]	; (8000450 <MX_TIM2_Init+0xe8>)
 8000434:	f002 fd84 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800043e:	f000 f8fb 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000442:	4803      	ldr	r0, [pc, #12]	; (8000450 <MX_TIM2_Init+0xe8>)
 8000444:	f000 f9cc 	bl	80007e0 <HAL_TIM_MspPostInit>

}
 8000448:	bf00      	nop
 800044a:	3738      	adds	r7, #56	; 0x38
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000544 	.word	0x20000544

08000454 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000468:	463b      	mov	r3, r7
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000470:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <MX_TIM3_Init+0x90>)
 8000472:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <MX_TIM3_Init+0x94>)
 8000474:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000476:	4b1b      	ldr	r3, [pc, #108]	; (80004e4 <MX_TIM3_Init+0x90>)
 8000478:	2200      	movs	r2, #0
 800047a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800047c:	4b19      	ldr	r3, [pc, #100]	; (80004e4 <MX_TIM3_Init+0x90>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000482:	4b18      	ldr	r3, [pc, #96]	; (80004e4 <MX_TIM3_Init+0x90>)
 8000484:	2200      	movs	r2, #0
 8000486:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000488:	4b16      	ldr	r3, [pc, #88]	; (80004e4 <MX_TIM3_Init+0x90>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <MX_TIM3_Init+0x90>)
 8000490:	2200      	movs	r2, #0
 8000492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000494:	4813      	ldr	r0, [pc, #76]	; (80004e4 <MX_TIM3_Init+0x90>)
 8000496:	f002 fbeb 	bl	8002c70 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80004a0:	f000 f8ca 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80004aa:	f107 0308 	add.w	r3, r7, #8
 80004ae:	4619      	mov	r1, r3
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <MX_TIM3_Init+0x90>)
 80004b2:	f002 fe0b 	bl	80030cc <HAL_TIM_ConfigClockSource>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80004bc:	f000 f8bc 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004c0:	2300      	movs	r3, #0
 80004c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004c8:	463b      	mov	r3, r7
 80004ca:	4619      	mov	r1, r3
 80004cc:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_TIM3_Init+0x90>)
 80004ce:	f003 f961 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80004d8:	f000 f8ae 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004dc:	bf00      	nop
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000500 	.word	0x20000500
 80004e8:	40000400 	.word	0x40000400

080004ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_TIM4_Init+0x94>)
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <MX_TIM4_Init+0x98>)
 800050c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MX_TIM4_Init+0x94>)
 8000510:	2230      	movs	r2, #48	; 0x30
 8000512:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <MX_TIM4_Init+0x94>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30000;
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_TIM4_Init+0x94>)
 800051c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000520:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <MX_TIM4_Init+0x94>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MX_TIM4_Init+0x94>)
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800052e:	4814      	ldr	r0, [pc, #80]	; (8000580 <MX_TIM4_Init+0x94>)
 8000530:	f002 fb9e 	bl	8002c70 <HAL_TIM_Base_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800053a:	f000 f87d 	bl	8000638 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000542:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000544:	f107 0308 	add.w	r3, r7, #8
 8000548:	4619      	mov	r1, r3
 800054a:	480d      	ldr	r0, [pc, #52]	; (8000580 <MX_TIM4_Init+0x94>)
 800054c:	f002 fdbe 	bl	80030cc <HAL_TIM_ConfigClockSource>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000556:	f000 f86f 	bl	8000638 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_TIM4_Init+0x94>)
 8000568:	f003 f914 	bl	8003794 <HAL_TIMEx_MasterConfigSynchronization>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000572:	f000 f861 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	2000042c 	.word	0x2000042c
 8000584:	40000800 	.word	0x40000800

08000588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 0310 	add.w	r3, r7, #16
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <MX_GPIO_Init+0xa8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0310 	and.w	r3, r3, #16
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a1d      	ldr	r2, [pc, #116]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005ba:	f043 0320 	orr.w	r3, r3, #32
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0320 	and.w	r3, r3, #32
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a17      	ldr	r2, [pc, #92]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005d2:	f043 0304 	orr.w	r3, r3, #4
 80005d6:	6193      	str	r3, [r2, #24]
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005da:	699b      	ldr	r3, [r3, #24]
 80005dc:	f003 0304 	and.w	r3, r3, #4
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005ea:	f043 0308 	orr.w	r3, r3, #8
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0f      	ldr	r3, [pc, #60]	; (8000630 <MX_GPIO_Init+0xa8>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0308 	and.w	r3, r3, #8
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000602:	480c      	ldr	r0, [pc, #48]	; (8000634 <MX_GPIO_Init+0xac>)
 8000604:	f000 fcdc 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	2301      	movs	r3, #1
 8000610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2302      	movs	r3, #2
 8000618:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <MX_GPIO_Init+0xac>)
 8000622:	f000 fb73 	bl	8000d0c <HAL_GPIO_Init>

}
 8000626:	bf00      	nop
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40021000 	.word	0x40021000
 8000634:	40011000 	.word	0x40011000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800064a:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_MspInit+0x6c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	4a18      	ldr	r2, [pc, #96]	; (80006b0 <HAL_MspInit+0x6c>)
 8000650:	f043 0301 	orr.w	r3, r3, #1
 8000654:	6193      	str	r3, [r2, #24]
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_MspInit+0x6c>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_MspInit+0x6c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <HAL_MspInit+0x6c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	61d3      	str	r3, [r2, #28]
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <HAL_MspInit+0x6c>)
 8000670:	69db      	ldr	r3, [r3, #28]
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2005      	movs	r0, #5
 8000680:	f000 fb0d 	bl	8000c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000684:	2005      	movs	r0, #5
 8000686:	f000 fb26 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_MspInit+0x70>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <HAL_MspInit+0x70>)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006a6:	bf00      	nop
 80006a8:	3710      	adds	r7, #16
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010000 	.word	0x40010000

080006b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <HAL_I2C_MspInit+0x74>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	d124      	bne.n	8000722 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <HAL_I2C_MspInit+0x78>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <HAL_I2C_MspInit+0x78>)
 80006de:	f043 0308 	orr.w	r3, r3, #8
 80006e2:	6193      	str	r3, [r2, #24]
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <HAL_I2C_MspInit+0x78>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	f003 0308 	and.w	r3, r3, #8
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006f6:	2312      	movs	r3, #18
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fe:	f107 0310 	add.w	r3, r7, #16
 8000702:	4619      	mov	r1, r3
 8000704:	480b      	ldr	r0, [pc, #44]	; (8000734 <HAL_I2C_MspInit+0x7c>)
 8000706:	f000 fb01 	bl	8000d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_I2C_MspInit+0x78>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_I2C_MspInit+0x78>)
 8000710:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_I2C_MspInit+0x78>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40005800 	.word	0x40005800
 8000730:	40021000 	.word	0x40021000
 8000734:	40010c00 	.word	0x40010c00

08000738 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000748:	d114      	bne.n	8000774 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 800074c:	69db      	ldr	r3, [r3, #28]
 800074e:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	61d3      	str	r3, [r2, #28]
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	201c      	movs	r0, #28
 8000768:	f000 fa99 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800076c:	201c      	movs	r0, #28
 800076e:	f000 fab2 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000772:	e02a      	b.n	80007ca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_TIM_Base_MspInit+0xa0>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d10c      	bne.n	8000798 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
}
 8000796:	e018      	b.n	80007ca <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <HAL_TIM_Base_MspInit+0xa4>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d113      	bne.n	80007ca <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 80007a8:	f043 0304 	orr.w	r3, r3, #4
 80007ac:	61d3      	str	r3, [r2, #28]
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <HAL_TIM_Base_MspInit+0x9c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0304 	and.w	r3, r3, #4
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	201e      	movs	r0, #30
 80007c0:	f000 fa6d 	bl	8000c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007c4:	201e      	movs	r0, #30
 80007c6:	f000 fa86 	bl	8000cd6 <HAL_NVIC_EnableIRQ>
}
 80007ca:	bf00      	nop
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	40000400 	.word	0x40000400
 80007dc:	40000800 	.word	0x40000800

080007e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007fe:	d117      	bne.n	8000830 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_TIM_MspPostInit+0x58>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a0c      	ldr	r2, [pc, #48]	; (8000838 <HAL_TIM_MspPostInit+0x58>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_TIM_MspPostInit+0x58>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60fb      	str	r3, [r7, #12]
 8000816:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = PWM_Motor_1_Pin;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Motor_1_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <HAL_TIM_MspPostInit+0x5c>)
 800082c:	f000 fa6e 	bl	8000d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	40010800 	.word	0x40010800

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <HardFault_Handler+0x4>

08000852 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <MemManage_Handler+0x4>

08000858 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <BusFault_Handler+0x4>

0800085e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <UsageFault_Handler+0x4>

08000864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800088c:	f000 f8f2 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}

08000894 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008a6:	f000 ff4b 	bl	8001740 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000121c 	.word	0x2000121c

080008b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008b8:	4802      	ldr	r0, [pc, #8]	; (80008c4 <TIM2_IRQHandler+0x10>)
 80008ba:	f002 fa38 	bl	8002d2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000544 	.word	0x20000544

080008c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM4_IRQHandler+0x10>)
 80008ce:	f002 fa2e 	bl	8002d2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000042c 	.word	0x2000042c

080008dc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80008e4:	4b11      	ldr	r3, [pc, #68]	; (800092c <_sbrk+0x50>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x16>
		heap_end = &end;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <_sbrk+0x50>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <_sbrk+0x54>)
 80008f0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <_sbrk+0x50>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <_sbrk+0x50>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	466a      	mov	r2, sp
 8000902:	4293      	cmp	r3, r2
 8000904:	d907      	bls.n	8000916 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000906:	f006 f8df 	bl	8006ac8 <__errno>
 800090a:	4602      	mov	r2, r0
 800090c:	230c      	movs	r3, #12
 800090e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	e006      	b.n	8000924 <_sbrk+0x48>
	}

	heap_end += incr;
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <_sbrk+0x50>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a03      	ldr	r2, [pc, #12]	; (800092c <_sbrk+0x50>)
 8000920:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001fc 	.word	0x200001fc
 8000930:	20001490 	.word	0x20001490

08000934 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <SystemInit+0x5c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <SystemInit+0x5c>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <SystemInit+0x5c>)
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	4911      	ldr	r1, [pc, #68]	; (8000990 <SystemInit+0x5c>)
 800094a:	4b12      	ldr	r3, [pc, #72]	; (8000994 <SystemInit+0x60>)
 800094c:	4013      	ands	r3, r2
 800094e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <SystemInit+0x5c>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <SystemInit+0x5c>)
 8000956:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800095a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <SystemInit+0x5c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <SystemInit+0x5c>)
 8000966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800096a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800096c:	4b08      	ldr	r3, [pc, #32]	; (8000990 <SystemInit+0x5c>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <SystemInit+0x5c>)
 8000972:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000976:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SystemInit+0x5c>)
 800097a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800097e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SystemInit+0x64>)
 8000982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000986:	609a      	str	r2, [r3, #8]
#endif 
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr
 8000990:	40021000 	.word	0x40021000
 8000994:	f8ff0000 	.word	0xf8ff0000
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800099c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800099e:	e003      	b.n	80009a8 <LoopCopyDataInit>

080009a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009a6:	3104      	adds	r1, #4

080009a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a8:	480a      	ldr	r0, [pc, #40]	; (80009d4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009b0:	d3f6      	bcc.n	80009a0 <CopyDataInit>
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009b4:	e002      	b.n	80009bc <LoopFillZerobss>

080009b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009b8:	f842 3b04 	str.w	r3, [r2], #4

080009bc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009c0:	d3f9      	bcc.n	80009b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009c2:	f7ff ffb7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c6:	f006 f885 	bl	8006ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ca:	f7ff fbbf 	bl	800014c <main>
  bx lr
 80009ce:	4770      	bx	lr
  ldr r3, =_sidata
 80009d0:	08007438 	.word	0x08007438
  ldr r0, =_sdata
 80009d4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80009dc:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80009e0:	2000148c 	.word	0x2000148c

080009e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <ADC1_2_IRQHandler>
	...

080009e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x28>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x28>)
 80009f2:	f043 0310 	orr.w	r3, r3, #16
 80009f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f945 	bl	8000c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe1e 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f95d 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f925 	bl	8000c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <HAL_IncTick+0x1c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_IncTick+0x20>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <HAL_IncTick+0x20>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	20000008 	.word	0x20000008
 8000a94:	20000584 	.word	0x20000584

08000a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b02      	ldr	r3, [pc, #8]	; (8000aa8 <HAL_GetTick+0x10>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	20000584 	.word	0x20000584

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff fff0 	bl	8000a98 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_Delay+0x40>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffe0 	bl	8000a98 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000008 	.word	0x20000008

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4906      	ldr	r1, [pc, #24]	; (8000b88 <__NVIC_EnableIRQ+0x34>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	db0a      	blt.n	8000bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <__NVIC_SetPriority+0x4c>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	0112      	lsls	r2, r2, #4
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	440b      	add	r3, r1
 8000bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb4:	e00a      	b.n	8000bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4908      	ldr	r1, [pc, #32]	; (8000bdc <__NVIC_SetPriority+0x50>)
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	f003 030f 	and.w	r3, r3, #15
 8000bc2:	3b04      	subs	r3, #4
 8000bc4:	0112      	lsls	r2, r2, #4
 8000bc6:	b2d2      	uxtb	r2, r2
 8000bc8:	440b      	add	r3, r1
 8000bca:	761a      	strb	r2, [r3, #24]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	; 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	f003 0307 	and.w	r3, r3, #7
 8000bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	f1c3 0307 	rsb	r3, r3, #7
 8000bfa:	2b04      	cmp	r3, #4
 8000bfc:	bf28      	it	cs
 8000bfe:	2304      	movcs	r3, #4
 8000c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	3304      	adds	r3, #4
 8000c06:	2b06      	cmp	r3, #6
 8000c08:	d902      	bls.n	8000c10 <NVIC_EncodePriority+0x30>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3b03      	subs	r3, #3
 8000c0e:	e000      	b.n	8000c12 <NVIC_EncodePriority+0x32>
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43da      	mvns	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	401a      	ands	r2, r3
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c32:	43d9      	mvns	r1, r3
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	4313      	orrs	r3, r2
         );
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3724      	adds	r7, #36	; 0x24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3b01      	subs	r3, #1
 8000c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c54:	d301      	bcc.n	8000c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c56:	2301      	movs	r3, #1
 8000c58:	e00f      	b.n	8000c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <SysTick_Config+0x40>)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c62:	210f      	movs	r1, #15
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	f7ff ff90 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SysTick_Config+0x40>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SysTick_Config+0x40>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	e000e010 	.word	0xe000e010

08000c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	f7ff ff2d 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b086      	sub	sp, #24
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	60b9      	str	r1, [r7, #8]
 8000ca8:	607a      	str	r2, [r7, #4]
 8000caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb0:	f7ff ff42 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	6978      	ldr	r0, [r7, #20]
 8000cbc:	f7ff ff90 	bl	8000be0 <NVIC_EncodePriority>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff5f 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cce:	bf00      	nop
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff35 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffa2 	bl	8000c44 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b08b      	sub	sp, #44	; 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e127      	b.n	8000f70 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d20:	2201      	movs	r2, #1
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69fa      	ldr	r2, [r7, #28]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 8116 	bne.w	8000f6a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b12      	cmp	r3, #18
 8000d44:	d034      	beq.n	8000db0 <HAL_GPIO_Init+0xa4>
 8000d46:	2b12      	cmp	r3, #18
 8000d48:	d80d      	bhi.n	8000d66 <HAL_GPIO_Init+0x5a>
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d02b      	beq.n	8000da6 <HAL_GPIO_Init+0x9a>
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d804      	bhi.n	8000d5c <HAL_GPIO_Init+0x50>
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d031      	beq.n	8000dba <HAL_GPIO_Init+0xae>
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d01c      	beq.n	8000d94 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e048      	b.n	8000dee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	d043      	beq.n	8000de8 <HAL_GPIO_Init+0xdc>
 8000d60:	2b11      	cmp	r3, #17
 8000d62:	d01b      	beq.n	8000d9c <HAL_GPIO_Init+0x90>
          break;
 8000d64:	e043      	b.n	8000dee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d66:	4a89      	ldr	r2, [pc, #548]	; (8000f8c <HAL_GPIO_Init+0x280>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d026      	beq.n	8000dba <HAL_GPIO_Init+0xae>
 8000d6c:	4a87      	ldr	r2, [pc, #540]	; (8000f8c <HAL_GPIO_Init+0x280>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d806      	bhi.n	8000d80 <HAL_GPIO_Init+0x74>
 8000d72:	4a87      	ldr	r2, [pc, #540]	; (8000f90 <HAL_GPIO_Init+0x284>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d020      	beq.n	8000dba <HAL_GPIO_Init+0xae>
 8000d78:	4a86      	ldr	r2, [pc, #536]	; (8000f94 <HAL_GPIO_Init+0x288>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d01d      	beq.n	8000dba <HAL_GPIO_Init+0xae>
          break;
 8000d7e:	e036      	b.n	8000dee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d80:	4a85      	ldr	r2, [pc, #532]	; (8000f98 <HAL_GPIO_Init+0x28c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d019      	beq.n	8000dba <HAL_GPIO_Init+0xae>
 8000d86:	4a85      	ldr	r2, [pc, #532]	; (8000f9c <HAL_GPIO_Init+0x290>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d016      	beq.n	8000dba <HAL_GPIO_Init+0xae>
 8000d8c:	4a84      	ldr	r2, [pc, #528]	; (8000fa0 <HAL_GPIO_Init+0x294>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0xae>
          break;
 8000d92:	e02c      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	623b      	str	r3, [r7, #32]
          break;
 8000d9a:	e028      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	3304      	adds	r3, #4
 8000da2:	623b      	str	r3, [r7, #32]
          break;
 8000da4:	e023      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	3308      	adds	r3, #8
 8000dac:	623b      	str	r3, [r7, #32]
          break;
 8000dae:	e01e      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	330c      	adds	r3, #12
 8000db6:	623b      	str	r3, [r7, #32]
          break;
 8000db8:	e019      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d102      	bne.n	8000dc8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e012      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d105      	bne.n	8000ddc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69fa      	ldr	r2, [r7, #28]
 8000dd8:	611a      	str	r2, [r3, #16]
          break;
 8000dda:	e008      	b.n	8000dee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69fa      	ldr	r2, [r7, #28]
 8000de4:	615a      	str	r2, [r3, #20]
          break;
 8000de6:	e002      	b.n	8000dee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
          break;
 8000dec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d801      	bhi.n	8000df8 <HAL_GPIO_Init+0xec>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	e001      	b.n	8000dfc <HAL_GPIO_Init+0xf0>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	2bff      	cmp	r3, #255	; 0xff
 8000e02:	d802      	bhi.n	8000e0a <HAL_GPIO_Init+0xfe>
 8000e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	e002      	b.n	8000e10 <HAL_GPIO_Init+0x104>
 8000e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0c:	3b08      	subs	r3, #8
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	210f      	movs	r1, #15
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	401a      	ands	r2, r3
 8000e22:	6a39      	ldr	r1, [r7, #32]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 8096 	beq.w	8000f6a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b59      	ldr	r3, [pc, #356]	; (8000fa4 <HAL_GPIO_Init+0x298>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a58      	ldr	r2, [pc, #352]	; (8000fa4 <HAL_GPIO_Init+0x298>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b56      	ldr	r3, [pc, #344]	; (8000fa4 <HAL_GPIO_Init+0x298>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e56:	4a54      	ldr	r2, [pc, #336]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e62:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	f003 0303 	and.w	r3, r3, #3
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	220f      	movs	r2, #15
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	4013      	ands	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_GPIO_Init+0x2a0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x19e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <HAL_GPIO_Init+0x2a4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x19a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x2a8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x196>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x2ac>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x192>
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x1a0>
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x1a0>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x1a0>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x1a0>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ebc:	493a      	ldr	r1, [pc, #232]	; (8000fa8 <HAL_GPIO_Init+0x29c>)
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d006      	beq.n	8000ee4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4938      	ldr	r1, [pc, #224]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	43db      	mvns	r3, r3
 8000eec:	4933      	ldr	r1, [pc, #204]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000eee:	4013      	ands	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d006      	beq.n	8000f0c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000efe:	4b2f      	ldr	r3, [pc, #188]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	492e      	ldr	r1, [pc, #184]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	604b      	str	r3, [r1, #4]
 8000f0a:	e006      	b.n	8000f1a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	4929      	ldr	r1, [pc, #164]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f16:	4013      	ands	r3, r2
 8000f18:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f26:	4b25      	ldr	r3, [pc, #148]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	4924      	ldr	r1, [pc, #144]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	608b      	str	r3, [r1, #8]
 8000f32:	e006      	b.n	8000f42 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f34:	4b21      	ldr	r3, [pc, #132]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f36:	689a      	ldr	r2, [r3, #8]
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	491f      	ldr	r1, [pc, #124]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f3e:	4013      	ands	r3, r2
 8000f40:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d006      	beq.n	8000f5c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f50:	68da      	ldr	r2, [r3, #12]
 8000f52:	491a      	ldr	r1, [pc, #104]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60cb      	str	r3, [r1, #12]
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4915      	ldr	r1, [pc, #84]	; (8000fbc <HAL_GPIO_Init+0x2b0>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f aed0 	bne.w	8000d20 <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	372c      	adds	r7, #44	; 0x2c
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	10210000 	.word	0x10210000
 8000f90:	10110000 	.word	0x10110000
 8000f94:	10120000 	.word	0x10120000
 8000f98:	10310000 	.word	0x10310000
 8000f9c:	10320000 	.word	0x10320000
 8000fa0:	10220000 	.word	0x10220000
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000
 8000fac:	40010800 	.word	0x40010800
 8000fb0:	40010c00 	.word	0x40010c00
 8000fb4:	40011000 	.word	0x40011000
 8000fb8:	40011400 	.word	0x40011400
 8000fbc:	40010400 	.word	0x40010400

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	611a      	str	r2, [r3, #16]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e10f      	b.n	8001222 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d106      	bne.n	800101c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fb4e 	bl	80006b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f022 0201 	bic.w	r2, r2, #1
 8001032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001034:	f001 fd34 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 8001038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a7b      	ldr	r2, [pc, #492]	; (800122c <HAL_I2C_Init+0x23c>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d807      	bhi.n	8001054 <HAL_I2C_Init+0x64>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4a7a      	ldr	r2, [pc, #488]	; (8001230 <HAL_I2C_Init+0x240>)
 8001048:	4293      	cmp	r3, r2
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e006      	b.n	8001062 <HAL_I2C_Init+0x72>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a77      	ldr	r2, [pc, #476]	; (8001234 <HAL_I2C_Init+0x244>)
 8001058:	4293      	cmp	r3, r2
 800105a:	bf94      	ite	ls
 800105c:	2301      	movls	r3, #1
 800105e:	2300      	movhi	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0db      	b.n	8001222 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4a72      	ldr	r2, [pc, #456]	; (8001238 <HAL_I2C_Init+0x248>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a64      	ldr	r2, [pc, #400]	; (800122c <HAL_I2C_Init+0x23c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d802      	bhi.n	80010a4 <HAL_I2C_Init+0xb4>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	e009      	b.n	80010b8 <HAL_I2C_Init+0xc8>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a63      	ldr	r2, [pc, #396]	; (800123c <HAL_I2C_Init+0x24c>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	3301      	adds	r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4956      	ldr	r1, [pc, #344]	; (800122c <HAL_I2C_Init+0x23c>)
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d80d      	bhi.n	80010f4 <HAL_I2C_Init+0x104>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1e59      	subs	r1, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e6:	3301      	adds	r3, #1
 80010e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010ec:	2b04      	cmp	r3, #4
 80010ee:	bf38      	it	cc
 80010f0:	2304      	movcc	r3, #4
 80010f2:	e04f      	b.n	8001194 <HAL_I2C_Init+0x1a4>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d111      	bne.n	8001120 <HAL_I2C_Init+0x130>
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	1e58      	subs	r0, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6859      	ldr	r1, [r3, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	440b      	add	r3, r1
 800110a:	fbb0 f3f3 	udiv	r3, r0, r3
 800110e:	3301      	adds	r3, #1
 8001110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001114:	2b00      	cmp	r3, #0
 8001116:	bf0c      	ite	eq
 8001118:	2301      	moveq	r3, #1
 800111a:	2300      	movne	r3, #0
 800111c:	b2db      	uxtb	r3, r3
 800111e:	e012      	b.n	8001146 <HAL_I2C_Init+0x156>
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1e58      	subs	r0, r3, #1
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6859      	ldr	r1, [r3, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	440b      	add	r3, r1
 800112e:	0099      	lsls	r1, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	fbb0 f3f3 	udiv	r3, r0, r3
 8001136:	3301      	adds	r3, #1
 8001138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf0c      	ite	eq
 8001140:	2301      	moveq	r3, #1
 8001142:	2300      	movne	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_I2C_Init+0x15e>
 800114a:	2301      	movs	r3, #1
 800114c:	e022      	b.n	8001194 <HAL_I2C_Init+0x1a4>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10e      	bne.n	8001174 <HAL_I2C_Init+0x184>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	1e58      	subs	r0, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6859      	ldr	r1, [r3, #4]
 800115e:	460b      	mov	r3, r1
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	440b      	add	r3, r1
 8001164:	fbb0 f3f3 	udiv	r3, r0, r3
 8001168:	3301      	adds	r3, #1
 800116a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800116e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001172:	e00f      	b.n	8001194 <HAL_I2C_Init+0x1a4>
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	1e58      	subs	r0, r3, #1
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6859      	ldr	r1, [r3, #4]
 800117c:	460b      	mov	r3, r1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	0099      	lsls	r1, r3, #2
 8001184:	440b      	add	r3, r1
 8001186:	fbb0 f3f3 	udiv	r3, r0, r3
 800118a:	3301      	adds	r3, #1
 800118c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001190:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	6809      	ldr	r1, [r1, #0]
 8001198:	4313      	orrs	r3, r2
 800119a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69da      	ldr	r2, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	430a      	orrs	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6911      	ldr	r1, [r2, #16]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68d2      	ldr	r2, [r2, #12]
 80011ce:	4311      	orrs	r1, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	430b      	orrs	r3, r1
 80011d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	695a      	ldr	r2, [r3, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2220      	movs	r2, #32
 800120e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	000186a0 	.word	0x000186a0
 8001230:	001e847f 	.word	0x001e847f
 8001234:	003d08ff 	.word	0x003d08ff
 8001238:	431bde83 	.word	0x431bde83
 800123c:	10624dd3 	.word	0x10624dd3

08001240 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af02      	add	r7, sp, #8
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	460b      	mov	r3, r1
 800124e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff fc22 	bl	8000a98 <HAL_GetTick>
 8001254:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001256:	2301      	movs	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b20      	cmp	r3, #32
 8001264:	f040 8105 	bne.w	8001472 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2319      	movs	r3, #25
 800126e:	2201      	movs	r2, #1
 8001270:	4982      	ldr	r1, [pc, #520]	; (800147c <HAL_I2C_IsDeviceReady+0x23c>)
 8001272:	68f8      	ldr	r0, [r7, #12]
 8001274:	f000 f906 	bl	8001484 <I2C_WaitOnFlagUntilTimeout>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800127e:	2302      	movs	r3, #2
 8001280:	e0f8      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_I2C_IsDeviceReady+0x50>
 800128c:	2302      	movs	r3, #2
 800128e:	e0f1      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d007      	beq.n	80012b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0201 	orr.w	r2, r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2224      	movs	r2, #36	; 0x24
 80012ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2200      	movs	r2, #0
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a6a      	ldr	r2, [pc, #424]	; (8001480 <HAL_I2C_IsDeviceReady+0x240>)
 80012d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f000 f8c4 	bl	8001484 <I2C_WaitOnFlagUntilTimeout>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0b6      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001306:	897b      	ldrh	r3, [r7, #10]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001314:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbbf 	bl	8000a98 <HAL_GetTick>
 800131a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	bf0c      	ite	eq
 800132a:	2301      	moveq	r3, #1
 800132c:	2300      	movne	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800134a:	e025      	b.n	8001398 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800134c:	f7ff fba4 	bl	8000a98 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d302      	bcc.n	8001362 <HAL_I2C_IsDeviceReady+0x122>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d103      	bne.n	800136a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	22a0      	movs	r2, #160	; 0xa0
 8001366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b02      	cmp	r3, #2
 8001376:	bf0c      	ite	eq
 8001378:	2301      	moveq	r3, #1
 800137a:	2300      	movne	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2ba0      	cmp	r3, #160	; 0xa0
 80013a2:	d005      	beq.n	80013b0 <HAL_I2C_IsDeviceReady+0x170>
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <HAL_I2C_IsDeviceReady+0x170>
 80013aa:	7dbb      	ldrb	r3, [r7, #22]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0cd      	beq.n	800134c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2220      	movs	r2, #32
 80013b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d129      	bne.n	800141a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	695b      	ldr	r3, [r3, #20]
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2319      	movs	r3, #25
 80013f2:	2201      	movs	r2, #1
 80013f4:	4921      	ldr	r1, [pc, #132]	; (800147c <HAL_I2C_IsDeviceReady+0x23c>)
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f000 f844 	bl	8001484 <I2C_WaitOnFlagUntilTimeout>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e036      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2220      	movs	r2, #32
 800140a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e02c      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001428:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001432:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2319      	movs	r3, #25
 800143a:	2201      	movs	r2, #1
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <HAL_I2C_IsDeviceReady+0x23c>)
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f820 	bl	8001484 <I2C_WaitOnFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e012      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	3301      	adds	r3, #1
 8001452:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	f4ff af3e 	bcc.w	80012da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2220      	movs	r2, #32
 8001462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8001472:	2302      	movs	r3, #2
  }
}
 8001474:	4618      	mov	r0, r3
 8001476:	3720      	adds	r7, #32
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	00100002 	.word	0x00100002
 8001480:	ffff0000 	.word	0xffff0000

08001484 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	4613      	mov	r3, r2
 8001492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001494:	e025      	b.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d021      	beq.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800149e:	f7ff fafb 	bl	8000a98 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d302      	bcc.n	80014b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d116      	bne.n	80014e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f043 0220 	orr.w	r2, r3, #32
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e023      	b.n	800152a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	0c1b      	lsrs	r3, r3, #16
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d10d      	bne.n	8001508 <I2C_WaitOnFlagUntilTimeout+0x84>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	43da      	mvns	r2, r3
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4013      	ands	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	bf0c      	ite	eq
 80014fe:	2301      	moveq	r3, #1
 8001500:	2300      	movne	r3, #0
 8001502:	b2db      	uxtb	r3, r3
 8001504:	461a      	mov	r2, r3
 8001506:	e00c      	b.n	8001522 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	4013      	ands	r3, r2
 8001514:	b29b      	uxth	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	bf0c      	ite	eq
 800151a:	2301      	moveq	r3, #1
 800151c:	2300      	movne	r3, #0
 800151e:	b2db      	uxtb	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	429a      	cmp	r2, r3
 8001526:	d0b6      	beq.n	8001496 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001532:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001534:	b08b      	sub	sp, #44	; 0x2c
 8001536:	af06      	add	r7, sp, #24
 8001538:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0d3      	b.n	80016ec <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d106      	bne.n	800155e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f005 f81f 	bl	800659c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2203      	movs	r2, #3
 8001562:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f002 f98f 	bl	800388e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	687e      	ldr	r6, [r7, #4]
 8001578:	466d      	mov	r5, sp
 800157a:	f106 0410 	add.w	r4, r6, #16
 800157e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	602b      	str	r3, [r5, #0]
 8001586:	1d33      	adds	r3, r6, #4
 8001588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f002 f958 	bl	8003840 <USB_CoreInit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2202      	movs	r2, #2
 800159a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0a4      	b.n	80016ec <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 f98c 	bl	80038c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e035      	b.n	8001620 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	4413      	add	r3, r2
 80015bc:	3329      	adds	r3, #41	; 0x29
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	015b      	lsls	r3, r3, #5
 80015c8:	4413      	add	r3, r2
 80015ca:	3328      	adds	r3, #40	; 0x28
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	b291      	uxth	r1, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	015b      	lsls	r3, r3, #5
 80015da:	4413      	add	r3, r2
 80015dc:	3336      	adds	r3, #54	; 0x36
 80015de:	460a      	mov	r2, r1
 80015e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015e2:	7bfb      	ldrb	r3, [r7, #15]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	015b      	lsls	r3, r3, #5
 80015e8:	4413      	add	r3, r2
 80015ea:	332b      	adds	r3, #43	; 0x2b
 80015ec:	2200      	movs	r2, #0
 80015ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	4413      	add	r3, r2
 80015f8:	3338      	adds	r3, #56	; 0x38
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	4413      	add	r3, r2
 8001606:	333c      	adds	r3, #60	; 0x3c
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	3302      	adds	r3, #2
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	4413      	add	r3, r2
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	3301      	adds	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	429a      	cmp	r2, r3
 8001628:	d3c4      	bcc.n	80015b4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
 800162e:	e031      	b.n	8001694 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	015b      	lsls	r3, r3, #5
 8001636:	4413      	add	r3, r2
 8001638:	f203 1329 	addw	r3, r3, #297	; 0x129
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	4413      	add	r3, r2
 8001648:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	015b      	lsls	r3, r3, #5
 8001656:	4413      	add	r3, r2
 8001658:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	015b      	lsls	r3, r3, #5
 8001666:	4413      	add	r3, r2
 8001668:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	015b      	lsls	r3, r3, #5
 8001676:	4413      	add	r3, r2
 8001678:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	330a      	adds	r3, #10
 8001686:	015b      	lsls	r3, r3, #5
 8001688:	4413      	add	r3, r2
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	3301      	adds	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	7bfa      	ldrb	r2, [r7, #15]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3c8      	bcc.n	8001630 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	687e      	ldr	r6, [r7, #4]
 80016a6:	466d      	mov	r5, sp
 80016a8:	f106 0410 	add.w	r4, r6, #16
 80016ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	602b      	str	r3, [r5, #0]
 80016b4:	1d33      	adds	r3, r6, #4
 80016b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b8:	6838      	ldr	r0, [r7, #0]
 80016ba:	f002 f910 	bl	80038de <USB_DevInit>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2202      	movs	r2, #2
 80016c8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e00d      	b.n	80016ec <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f003 f94e 	bl	8004986 <USB_DevDisconnect>

  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_PCD_Start+0x16>
 8001706:	2302      	movs	r3, #2
 8001708:	e016      	b.n	8001738 <HAL_PCD_Start+0x44>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001712:	2101      	movs	r1, #1
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f005 f9a0 	bl	8006a5a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f927 	bl	8004972 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 f899 	bl	8003860 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f924 	bl	800499a <USB_ReadInterrupts>
 8001752:	4603      	mov	r3, r0
 8001754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800175c:	d102      	bne.n	8001764 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 faf2 	bl	8001d48 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4618      	mov	r0, r3
 800176a:	f003 f916 	bl	800499a <USB_ReadInterrupts>
 800176e:	4603      	mov	r3, r0
 8001770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001778:	d112      	bne.n	80017a0 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800178c:	b292      	uxth	r2, r2
 800178e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f004 ff6f 	bl	8006676 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001798:	2100      	movs	r1, #0
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f8de 	bl	800195c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 f8f8 	bl	800499a <USB_ReadInterrupts>
 80017aa:	4603      	mov	r3, r0
 80017ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017b4:	d10b      	bne.n	80017ce <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017be:	b29a      	uxth	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017c8:	b292      	uxth	r2, r2
 80017ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f8e1 	bl	800499a <USB_ReadInterrupts>
 80017d8:	4603      	mov	r3, r0
 80017da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017e2:	d10b      	bne.n	80017fc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017f6:	b292      	uxth	r2, r2
 80017f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f8ca 	bl	800499a <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001810:	d126      	bne.n	8001860 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 0204 	bic.w	r2, r2, #4
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001832:	b29a      	uxth	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0208 	bic.w	r2, r2, #8
 800183c:	b292      	uxth	r2, r2
 800183e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f004 ff50 	bl	80066e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800185a:	b292      	uxth	r2, r2
 800185c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f003 f898 	bl	800499a <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001874:	d13d      	bne.n	80018f2 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800187e:	b29a      	uxth	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0208 	orr.w	r2, r2, #8
 8001888:	b292      	uxth	r2, r2
 800188a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001896:	b29a      	uxth	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a0:	b292      	uxth	r2, r2
 80018a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f042 0204 	orr.w	r2, r2, #4
 80018b8:	b292      	uxth	r2, r2
 80018ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f869 	bl	800499a <USB_ReadInterrupts>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018d2:	d10b      	bne.n	80018ec <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018dc:	b29a      	uxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018e6:	b292      	uxth	r2, r2
 80018e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f004 fee1 	bl	80066b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 f84f 	bl	800499a <USB_ReadInterrupts>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001906:	d10e      	bne.n	8001926 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001910:	b29a      	uxth	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800191a:	b292      	uxth	r2, r2
 800191c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f004 fe9a 	bl	800665a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f835 	bl	800499a <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800193a:	d10b      	bne.n	8001954 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001944:	b29a      	uxth	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800194e:	b292      	uxth	r2, r2
 8001950:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_PCD_SetAddress+0x1a>
 8001972:	2302      	movs	r3, #2
 8001974:	e013      	b.n	800199e <HAL_PCD_SetAddress+0x42>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f002 ffdc 	bl	800494c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	4608      	mov	r0, r1
 80019b0:	4611      	mov	r1, r2
 80019b2:	461a      	mov	r2, r3
 80019b4:	4603      	mov	r3, r0
 80019b6:	70fb      	strb	r3, [r7, #3]
 80019b8:	460b      	mov	r3, r1
 80019ba:	803b      	strh	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da0b      	bge.n	80019e4 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	015b      	lsls	r3, r3, #5
 80019d4:	3328      	adds	r3, #40	; 0x28
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	705a      	strb	r2, [r3, #1]
 80019e2:	e00b      	b.n	80019fc <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e4:	78fb      	ldrb	r3, [r7, #3]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80019fc:	78fb      	ldrb	r3, [r7, #3]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a08:	883a      	ldrh	r2, [r7, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	78ba      	ldrb	r2, [r7, #2]
 8001a12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	785b      	ldrb	r3, [r3, #1]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a26:	78bb      	ldrb	r3, [r7, #2]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d102      	bne.n	8001a32 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_PCD_EP_Open+0x9a>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e00e      	b.n	8001a5e <HAL_PCD_EP_Open+0xb8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 ff6a 	bl	8003928 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da0b      	bge.n	8001a92 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	3328      	adds	r3, #40	; 0x28
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	705a      	strb	r2, [r3, #1]
 8001a90:	e00b      	b.n	8001aaa <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_PCD_EP_Close+0x5e>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e00e      	b.n	8001ae2 <HAL_PCD_EP_Close+0x7c>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68f9      	ldr	r1, [r7, #12]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f002 fa16 	bl	8003f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	460b      	mov	r3, r1
 8001af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afa:	7afb      	ldrb	r3, [r7, #11]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	015b      	lsls	r3, r3, #5
 8001b02:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	2200      	movs	r2, #0
 8001b22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b24:	7afb      	ldrb	r3, [r7, #11]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b30:	7afb      	ldrb	r3, [r7, #11]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d106      	bne.n	8001b48 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6979      	ldr	r1, [r7, #20]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 fb75 	bl	8004230 <USB_EPStartXfer>
 8001b46:	e005      	b.n	8001b54 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 fb6e 	bl	8004230 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	b083      	sub	sp, #12
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	460b      	mov	r3, r1
 8001b68:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	330a      	adds	r3, #10
 8001b74:	015b      	lsls	r3, r3, #5
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	460b      	mov	r3, r1
 8001b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	015b      	lsls	r3, r3, #5
 8001b9e:	3328      	adds	r3, #40	; 0x28
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbe:	7afb      	ldrb	r3, [r7, #11]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bca:	7afb      	ldrb	r3, [r7, #11]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d106      	bne.n	8001be2 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6979      	ldr	r1, [r7, #20]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fb28 	bl	8004230 <USB_EPStartXfer>
 8001be0:	e005      	b.n	8001bee <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6979      	ldr	r1, [r7, #20]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fb21 	bl	8004230 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 0207 	and.w	r2, r3, #7
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d901      	bls.n	8001c16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e046      	b.n	8001ca4 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da0b      	bge.n	8001c36 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	015b      	lsls	r3, r3, #5
 8001c26:	3328      	adds	r3, #40	; 0x28
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2201      	movs	r2, #1
 8001c32:	705a      	strb	r2, [r3, #1]
 8001c34:	e009      	b.n	8001c4a <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d101      	bne.n	8001c6a <HAL_PCD_EP_SetStall+0x72>
 8001c66:	2302      	movs	r3, #2
 8001c68:	e01c      	b.n	8001ca4 <HAL_PCD_EP_SetStall+0xac>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fd91 	bl	80047a0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d108      	bne.n	8001c9a <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f002 fe8f 	bl	80049b8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d901      	bls.n	8001cca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e03a      	b.n	8001d40 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0b      	bge.n	8001cea <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	015b      	lsls	r3, r3, #5
 8001cda:	3328      	adds	r3, #40	; 0x28
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00b      	b.n	8001d02 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	015b      	lsls	r3, r3, #5
 8001cf2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_ClrStall+0x76>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e00e      	b.n	8001d40 <HAL_PCD_EP_ClrStall+0x94>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f002 fd77 	bl	8004824 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001d50:	e282      	b.n	8002258 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d5a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001d66:	7d7b      	ldrb	r3, [r7, #21]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 8142 	bne.w	8001ff2 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001d6e:	8afb      	ldrh	r3, [r7, #22]
 8001d70:	f003 0310 	and.w	r3, r3, #16
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d151      	bne.n	8001e1c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d88:	b29c      	uxth	r4, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001d92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	3328      	adds	r3, #40	; 0x28
 8001d9e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	4413      	add	r3, r2
 8001db4:	3302      	adds	r3, #2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	695a      	ldr	r2, [r3, #20]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	441a      	add	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f004 fc25 	bl	800662c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8234 	beq.w	8002258 <PCD_EP_ISR_Handler+0x510>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f040 822f 	bne.w	8002258 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e1a:	e21d      	b.n	8002258 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e22:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001e2c:	8a7b      	ldrh	r3, [r7, #18]
 8001e2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d033      	beq.n	8001e9e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4413      	add	r3, r2
 8001e4a:	3306      	adds	r3, #6
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f002 fdee 	bl	8004a56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e86:	4013      	ands	r3, r2
 8001e88:	b29c      	uxth	r4, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001e92:	b292      	uxth	r2, r2
 8001e94:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f004 fb9e 	bl	80065d8 <HAL_PCD_SetupStageCallback>
 8001e9c:	e1dc      	b.n	8002258 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001e9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f280 81d8 	bge.w	8002258 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	b29c      	uxth	r4, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ec0:	b292      	uxth	r2, r2
 8001ec2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3306      	adds	r3, #6
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d019      	beq.n	8001f2c <PCD_EP_ISR_Handler+0x1e4>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d015      	beq.n	8001f2c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6959      	ldr	r1, [r3, #20]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	f002 fda0 	bl	8004a56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001f24:	2100      	movs	r1, #0
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f004 fb68 	bl	80065fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	461c      	mov	r4, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	441c      	add	r4, r3
 8001f3e:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8001f42:	461c      	mov	r4, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10e      	bne.n	8001f6a <PCD_EP_ISR_Handler+0x222>
 8001f4c:	8823      	ldrh	r3, [r4, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8023      	strh	r3, [r4, #0]
 8001f58:	8823      	ldrh	r3, [r4, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	8023      	strh	r3, [r4, #0]
 8001f68:	e02d      	b.n	8001fc6 <PCD_EP_ISR_Handler+0x27e>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b3e      	cmp	r3, #62	; 0x3e
 8001f70:	d812      	bhi.n	8001f98 <PCD_EP_ISR_Handler+0x250>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	61bb      	str	r3, [r7, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x244>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	61bb      	str	r3, [r7, #24]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	029b      	lsls	r3, r3, #10
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	8023      	strh	r3, [r4, #0]
 8001f96:	e016      	b.n	8001fc6 <PCD_EP_ISR_Handler+0x27e>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <PCD_EP_ISR_Handler+0x26a>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	b29c      	uxth	r4, r3
 8001fd8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001fdc:	b29c      	uxth	r4, r3
 8001fde:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001fe2:	b29c      	uxth	r4, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	4ba2      	ldr	r3, [pc, #648]	; (8002274 <PCD_EP_ISR_Handler+0x52c>)
 8001fea:	4323      	orrs	r3, r4
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	8013      	strh	r3, [r2, #0]
 8001ff0:	e132      	b.n	8002258 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	7d7b      	ldrb	r3, [r7, #21]
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002002:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002006:	2b00      	cmp	r3, #0
 8002008:	f280 80d1 	bge.w	80021ae <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	7d7b      	ldrb	r3, [r7, #21]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29a      	uxth	r2, r3
 800201c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002020:	4013      	ands	r3, r2
 8002022:	b29c      	uxth	r4, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	7d7b      	ldrb	r3, [r7, #21]
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002034:	b292      	uxth	r2, r2
 8002036:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002038:	7d7b      	ldrb	r3, [r7, #21]
 800203a:	015b      	lsls	r3, r3, #5
 800203c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	7b1b      	ldrb	r3, [r3, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d121      	bne.n	8002092 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	3306      	adds	r3, #6
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4413      	add	r3, r2
 800206c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002076:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002078:	8bfb      	ldrh	r3, [r7, #30]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d072      	beq.n	8002164 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6959      	ldr	r1, [r3, #20]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	88da      	ldrh	r2, [r3, #6]
 800208a:	8bfb      	ldrh	r3, [r7, #30]
 800208c:	f002 fce3 	bl	8004a56 <USB_ReadPMA>
 8002090:	e068      	b.n	8002164 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d021      	beq.n	80020f0 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	3302      	adds	r3, #2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80020d6:	8bfb      	ldrh	r3, [r7, #30]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d02a      	beq.n	8002132 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6959      	ldr	r1, [r3, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	891a      	ldrh	r2, [r3, #8]
 80020e8:	8bfb      	ldrh	r3, [r7, #30]
 80020ea:	f002 fcb4 	bl	8004a56 <USB_ReadPMA>
 80020ee:	e020      	b.n	8002132 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	3306      	adds	r3, #6
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	4413      	add	r3, r2
 800210e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002118:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800211a:	8bfb      	ldrh	r3, [r7, #30]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6818      	ldr	r0, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6959      	ldr	r1, [r3, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	895a      	ldrh	r2, [r3, #10]
 800212c:	8bfb      	ldrh	r3, [r7, #30]
 800212e:	f002 fc92 	bl	8004a56 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214c:	b29c      	uxth	r4, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	441a      	add	r2, r3
 800215c:	4b46      	ldr	r3, [pc, #280]	; (8002278 <PCD_EP_ISR_Handler+0x530>)
 800215e:	4323      	orrs	r3, r4
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	69da      	ldr	r2, [r3, #28]
 8002168:	8bfb      	ldrh	r3, [r7, #30]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	695a      	ldr	r2, [r3, #20]
 8002174:	8bfb      	ldrh	r3, [r7, #30]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d004      	beq.n	800218e <PCD_EP_ISR_Handler+0x446>
 8002184:	8bfa      	ldrh	r2, [r7, #30]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	429a      	cmp	r2, r3
 800218c:	d206      	bcs.n	800219c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f004 fa31 	bl	80065fc <HAL_PCD_DataOutStageCallback>
 800219a:	e008      	b.n	80021ae <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	7819      	ldrb	r1, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	695a      	ldr	r2, [r3, #20]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff fc9e 	bl	8001aea <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80021ae:	8a7b      	ldrh	r3, [r7, #18]
 80021b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d04f      	beq.n	8002258 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80021b8:	7d7b      	ldrb	r3, [r7, #21]
 80021ba:	015b      	lsls	r3, r3, #5
 80021bc:	3328      	adds	r3, #40	; 0x28
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	7d7b      	ldrb	r3, [r7, #21]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80021d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021dc:	b29c      	uxth	r4, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	7d7b      	ldrb	r3, [r7, #21]
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80021ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021fe:	b29b      	uxth	r3, r3
 8002200:	461a      	mov	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	3302      	adds	r3, #2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	4413      	add	r3, r2
 8002214:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d106      	bne.n	8002246 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f004 f9f4 	bl	800662c <HAL_PCD_DataInStageCallback>
 8002244:	e008      	b.n	8002258 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	7819      	ldrb	r1, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fc97 	bl	8001b86 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002260:	b29b      	uxth	r3, r3
 8002262:	b21b      	sxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	f6ff ad74 	blt.w	8001d52 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3724      	adds	r7, #36	; 0x24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	ffff8080 	.word	0xffff8080
 8002278:	ffff80c0 	.word	0xffff80c0

0800227c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607b      	str	r3, [r7, #4]
 8002286:	460b      	mov	r3, r1
 8002288:	817b      	strh	r3, [r7, #10]
 800228a:	4613      	mov	r3, r2
 800228c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800228e:	897b      	ldrh	r3, [r7, #10]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	b29b      	uxth	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d008      	beq.n	80022ac <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800229a:	897b      	ldrh	r3, [r7, #10]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	015b      	lsls	r3, r3, #5
 80022a2:	3328      	adds	r3, #40	; 0x28
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e006      	b.n	80022ba <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80022ac:	897b      	ldrh	r3, [r7, #10]
 80022ae:	015b      	lsls	r3, r3, #5
 80022b0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80022ba:	893b      	ldrh	r3, [r7, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d107      	bne.n	80022d0 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2200      	movs	r2, #0
 80022c4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	80da      	strh	r2, [r3, #6]
 80022ce:	e00b      	b.n	80022e8 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2201      	movs	r2, #1
 80022d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	b29a      	uxth	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e26c      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 8087 	beq.w	8002422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002314:	4b92      	ldr	r3, [pc, #584]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b04      	cmp	r3, #4
 800231e:	d00c      	beq.n	800233a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002320:	4b8f      	ldr	r3, [pc, #572]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b08      	cmp	r3, #8
 800232a:	d112      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
 800232c:	4b8c      	ldr	r3, [pc, #560]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002338:	d10b      	bne.n	8002352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233a:	4b89      	ldr	r3, [pc, #548]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d06c      	beq.n	8002420 <HAL_RCC_OscConfig+0x12c>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d168      	bne.n	8002420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e246      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x76>
 800235c:	4b80      	ldr	r3, [pc, #512]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a7f      	ldr	r2, [pc, #508]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	e02e      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b7b      	ldr	r3, [pc, #492]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7a      	ldr	r2, [pc, #488]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b78      	ldr	r3, [pc, #480]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a77      	ldr	r2, [pc, #476]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002384:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e01d      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0xbc>
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a71      	ldr	r2, [pc, #452]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800239c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b6f      	ldr	r3, [pc, #444]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a6e      	ldr	r2, [pc, #440]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e00b      	b.n	80023c8 <HAL_RCC_OscConfig+0xd4>
 80023b0:	4b6b      	ldr	r3, [pc, #428]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a6a      	ldr	r2, [pc, #424]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ba:	6013      	str	r3, [r2, #0]
 80023bc:	4b68      	ldr	r3, [pc, #416]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a67      	ldr	r2, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe fb62 	bl	8000a98 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe fb5e 	bl	8000a98 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e1fa      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b5d      	ldr	r3, [pc, #372]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0xe4>
 80023f6:	e014      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fb4e 	bl	8000a98 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002400:	f7fe fb4a 	bl	8000a98 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e1e6      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002412:	4b53      	ldr	r3, [pc, #332]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x10c>
 800241e:	e000      	b.n	8002422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d063      	beq.n	80024f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800242e:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d11c      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
 8002446:	4b46      	ldr	r3, [pc, #280]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d116      	bne.n	8002480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	4b43      	ldr	r3, [pc, #268]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e1ba      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246a:	4b3d      	ldr	r3, [pc, #244]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4939      	ldr	r1, [pc, #228]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247e:	e03a      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002488:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7fe fb03 	bl	8000a98 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002496:	f7fe faff 	bl	8000a98 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e19b      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a8:	4b2d      	ldr	r3, [pc, #180]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	4927      	ldr	r1, [pc, #156]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e015      	b.n	80024f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x270>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fae2 	bl	8000a98 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d8:	f7fe fade 	bl	8000a98 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e17a      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d03a      	beq.n	8002578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d019      	beq.n	800253e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800250a:	4b17      	ldr	r3, [pc, #92]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 800250c:	2201      	movs	r2, #1
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7fe fac2 	bl	8000a98 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7fe fabe 	bl	8000a98 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e15a      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800252a:	4b0d      	ldr	r3, [pc, #52]	; (8002560 <HAL_RCC_OscConfig+0x26c>)
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0f0      	beq.n	8002518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002536:	2001      	movs	r0, #1
 8002538:	f000 fac6 	bl	8002ac8 <RCC_Delay>
 800253c:	e01c      	b.n	8002578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_RCC_OscConfig+0x274>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe faa8 	bl	8000a98 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254a:	e00f      	b.n	800256c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254c:	f7fe faa4 	bl	8000a98 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b02      	cmp	r3, #2
 8002558:	d908      	bls.n	800256c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e140      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000
 8002564:	42420000 	.word	0x42420000
 8002568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	4b9e      	ldr	r3, [pc, #632]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e9      	bne.n	800254c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a6 	beq.w	80026d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002586:	2300      	movs	r3, #0
 8002588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800258a:	4b97      	ldr	r3, [pc, #604]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10d      	bne.n	80025b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b94      	ldr	r3, [pc, #592]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4a93      	ldr	r2, [pc, #588]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	61d3      	str	r3, [r2, #28]
 80025a2:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	69db      	ldr	r3, [r3, #28]
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ae:	2301      	movs	r3, #1
 80025b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d118      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025be:	4b8b      	ldr	r3, [pc, #556]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a8a      	ldr	r2, [pc, #552]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fa65 	bl	8000a98 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d2:	f7fe fa61 	bl	8000a98 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b64      	cmp	r3, #100	; 0x64
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0fd      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e4:	4b81      	ldr	r3, [pc, #516]	; (80027ec <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x312>
 80025f8:	4b7b      	ldr	r3, [pc, #492]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4a7a      	ldr	r2, [pc, #488]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6213      	str	r3, [r2, #32]
 8002604:	e02d      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x334>
 800260e:	4b76      	ldr	r3, [pc, #472]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	4a75      	ldr	r2, [pc, #468]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002614:	f023 0301 	bic.w	r3, r3, #1
 8002618:	6213      	str	r3, [r2, #32]
 800261a:	4b73      	ldr	r3, [pc, #460]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a72      	ldr	r2, [pc, #456]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x356>
 8002630:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	4a6c      	ldr	r2, [pc, #432]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6213      	str	r3, [r2, #32]
 800263c:	4b6a      	ldr	r3, [pc, #424]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	4a69      	ldr	r2, [pc, #420]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6213      	str	r3, [r2, #32]
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x36e>
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a66      	ldr	r2, [pc, #408]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b64      	ldr	r3, [pc, #400]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7fe fa15 	bl	8000a98 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fa11 	bl	8000a98 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0ab      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x37e>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe f9ff 	bl	8000a98 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe f9fb 	bl	8000a98 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e095      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b4c      	ldr	r3, [pc, #304]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b48      	ldr	r3, [pc, #288]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	4a47      	ldr	r2, [pc, #284]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8081 	beq.w	80027de <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d061      	beq.n	80027ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d146      	bne.n	800277e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b3f      	ldr	r3, [pc, #252]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe f9cf 	bl	8000a98 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe f9cb 	bl	8000a98 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e067      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002710:	4b35      	ldr	r3, [pc, #212]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002724:	d108      	bne.n	8002738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	492d      	ldr	r1, [pc, #180]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002738:	4b2b      	ldr	r3, [pc, #172]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a19      	ldr	r1, [r3, #32]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	430b      	orrs	r3, r1
 800274a:	4927      	ldr	r1, [pc, #156]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002756:	f7fe f99f 	bl	8000a98 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe f99b 	bl	8000a98 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e037      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x46a>
 800277c:	e02f      	b.n	80027de <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <HAL_RCC_OscConfig+0x4fc>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002784:	f7fe f988 	bl	8000a98 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7fe f984 	bl	8000a98 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e020      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x498>
 80027aa:	e018      	b.n	80027de <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e013      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_OscConfig+0x4f4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d106      	bne.n	80027da <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40021000 	.word	0x40021000
 80027ec:	40007000 	.word	0x40007000
 80027f0:	42420060 	.word	0x42420060

080027f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e0d0      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b6a      	ldr	r3, [pc, #424]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d910      	bls.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b67      	ldr	r3, [pc, #412]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4965      	ldr	r1, [pc, #404]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e0b8      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d020      	beq.n	8002886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002850:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800285a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	4a52      	ldr	r2, [pc, #328]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d040      	beq.n	8002914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289a:	4b47      	ldr	r3, [pc, #284]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e07f      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b2:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e073      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06b      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4936      	ldr	r1, [pc, #216]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e4:	f7fe f8d8 	bl	8000a98 <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7fe f8d4 	bl	8000a98 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e053      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002914:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d210      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4922      	ldr	r1, [pc, #136]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e032      	b.n	80029aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	4916      	ldr	r1, [pc, #88]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	490e      	ldr	r1, [pc, #56]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002982:	f000 f821 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	5cd3      	ldrb	r3, [r2, r3]
 8002996:	fa21 f303 	lsr.w	r3, r1, r3
 800299a:	4a09      	ldr	r2, [pc, #36]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 800299c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800299e:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe f836 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	40022000 	.word	0x40022000
 80029b8:	40021000 	.word	0x40021000
 80029bc:	080073e4 	.word	0x080073e4
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	b490      	push	{r4, r7}
 80029ca:	b08a      	sub	sp, #40	; 0x28
 80029cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ce:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029d0:	1d3c      	adds	r4, r7, #4
 80029d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_RCC_GetSysClockFreq+0xb4>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x40>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x46>
 8002a06:	e02d      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a0a:	623b      	str	r3, [r7, #32]
      break;
 8002a0c:	e02d      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	0c9b      	lsrs	r3, r3, #18
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d013      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c5b      	lsrs	r3, r3, #17
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a46:	fb02 f203 	mul.w	r2, r2, r3
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	e004      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	623b      	str	r3, [r7, #32]
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a66:	623b      	str	r3, [r7, #32]
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3728      	adds	r7, #40	; 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc90      	pop	{r4, r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	08007388 	.word	0x08007388
 8002a7c:	08007398 	.word	0x08007398
 8002a80:	40021000 	.word	0x40021000
 8002a84:	007a1200 	.word	0x007a1200
 8002a88:	003d0900 	.word	0x003d0900

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	20000000 	.word	0x20000000

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa4:	f7ff fff2 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002aa8:	4601      	mov	r1, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0a1b      	lsrs	r3, r3, #8
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4a03      	ldr	r2, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab6:	5cd3      	ldrb	r3, [r2, r3]
 8002ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	080073f4 	.word	0x080073f4

08002ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCC_Delay+0x34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <RCC_Delay+0x38>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae4:	bf00      	nop
  }
  while (Delay --);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <RCC_Delay+0x1c>
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bc80      	pop	{r7}
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d07d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b24:	4b4f      	ldr	r3, [pc, #316]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b30:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	4a4b      	ldr	r2, [pc, #300]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	61d3      	str	r3, [r2, #28]
 8002b3c:	4b49      	ldr	r3, [pc, #292]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b46      	ldr	r3, [pc, #280]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d118      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b58:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a42      	ldr	r2, [pc, #264]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b64:	f7fd ff98 	bl	8000a98 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	e008      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6c:	f7fd ff94 	bl	8000a98 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b64      	cmp	r3, #100	; 0x64
 8002b78:	d901      	bls.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e06d      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7e:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b8a:	4b36      	ldr	r3, [pc, #216]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d02e      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d027      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bb8:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bbe:	4a29      	ldr	r2, [pc, #164]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d014      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fd ff63 	bl	8000a98 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fd ff5f 	bl	8000a98 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0ee      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bf8:	4b1a      	ldr	r3, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	4917      	ldr	r1, [pc, #92]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d105      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d008      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	42420440 	.word	0x42420440

08002c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e01d      	b.n	8002cbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d106      	bne.n	8002c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7fd fd4e 	bl	8000738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3304      	adds	r3, #4
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f000 faf0 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e01d      	b.n	8002d14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f815 	bl	8002d1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f000 fac5 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d122      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d11b      	bne.n	8002d8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f06f 0202 	mvn.w	r2, #2
 8002d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa74 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002d76:	e005      	b.n	8002d84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 fa67 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa76 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d122      	bne.n	8002dde <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d11b      	bne.n	8002dde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f06f 0204 	mvn.w	r2, #4
 8002dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa4a 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002dca:	e005      	b.n	8002dd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 fa3d 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fa4c 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d122      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d11b      	bne.n	8002e32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0208 	mvn.w	r2, #8
 8002e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2204      	movs	r2, #4
 8002e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa20 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e1e:	e005      	b.n	8002e2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 fa13 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 fa22 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d122      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d11b      	bne.n	8002e86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f06f 0210 	mvn.w	r2, #16
 8002e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9f6 	bl	800325e <HAL_TIM_IC_CaptureCallback>
 8002e72:	e005      	b.n	8002e80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f9e9 	bl	800324c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f9f8 	bl	8003270 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10e      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0201 	mvn.w	r2, #1
 8002eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f9c4 	bl	800323a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d10e      	bne.n	8002ede <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b80      	cmp	r3, #128	; 0x80
 8002ecc:	d107      	bne.n	8002ede <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fca8 	bl	800382e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d10e      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef6:	2b40      	cmp	r3, #64	; 0x40
 8002ef8:	d107      	bne.n	8002f0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f9bc 	bl	8003282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d10e      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d107      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f06f 0220 	mvn.w	r2, #32
 8002f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 fc73 	bl	800381c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0b4      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2202      	movs	r2, #2
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	f200 809f 	bhi.w	80030b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002f72:	a201      	add	r2, pc, #4	; (adr r2, 8002f78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	080030b1 	.word	0x080030b1
 8002f80:	080030b1 	.word	0x080030b1
 8002f84:	080030b1 	.word	0x080030b1
 8002f88:	08002fed 	.word	0x08002fed
 8002f8c:	080030b1 	.word	0x080030b1
 8002f90:	080030b1 	.word	0x080030b1
 8002f94:	080030b1 	.word	0x080030b1
 8002f98:	0800302f 	.word	0x0800302f
 8002f9c:	080030b1 	.word	0x080030b1
 8002fa0:	080030b1 	.word	0x080030b1
 8002fa4:	080030b1 	.word	0x080030b1
 8002fa8:	0800306f 	.word	0x0800306f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f9d0 	bl	8003358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0208 	orr.w	r2, r2, #8
 8002fc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0204 	bic.w	r2, r2, #4
 8002fd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6999      	ldr	r1, [r3, #24]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	619a      	str	r2, [r3, #24]
      break;
 8002fea:	e062      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fa16 	bl	8003424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6999      	ldr	r1, [r3, #24]
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	021a      	lsls	r2, r3, #8
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
      break;
 800302c:	e041      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fa5f 	bl	80034f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69da      	ldr	r2, [r3, #28]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0208 	orr.w	r2, r2, #8
 8003048:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0204 	bic.w	r2, r2, #4
 8003058:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69d9      	ldr	r1, [r3, #28]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	691a      	ldr	r2, [r3, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	61da      	str	r2, [r3, #28]
      break;
 800306c:	e021      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	4618      	mov	r0, r3
 8003076:	f000 faa9 	bl	80035cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69da      	ldr	r2, [r3, #28]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	69d9      	ldr	r1, [r3, #28]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	61da      	str	r2, [r3, #28]
      break;
 80030ae:	e000      	b.n	80030b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80030b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_ConfigClockSource+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0a6      	b.n	8003232 <HAL_TIM_ConfigClockSource+0x166>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d067      	beq.n	80031ec <HAL_TIM_ConfigClockSource+0x120>
 800311c:	2b40      	cmp	r3, #64	; 0x40
 800311e:	d80b      	bhi.n	8003138 <HAL_TIM_ConfigClockSource+0x6c>
 8003120:	2b10      	cmp	r3, #16
 8003122:	d073      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x140>
 8003124:	2b10      	cmp	r3, #16
 8003126:	d802      	bhi.n	800312e <HAL_TIM_ConfigClockSource+0x62>
 8003128:	2b00      	cmp	r3, #0
 800312a:	d06f      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800312c:	e078      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800312e:	2b20      	cmp	r3, #32
 8003130:	d06c      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x140>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d06a      	beq.n	800320c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003136:	e073      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d00d      	beq.n	8003158 <HAL_TIM_ConfigClockSource+0x8c>
 800313c:	2b70      	cmp	r3, #112	; 0x70
 800313e:	d804      	bhi.n	800314a <HAL_TIM_ConfigClockSource+0x7e>
 8003140:	2b50      	cmp	r3, #80	; 0x50
 8003142:	d033      	beq.n	80031ac <HAL_TIM_ConfigClockSource+0xe0>
 8003144:	2b60      	cmp	r3, #96	; 0x60
 8003146:	d041      	beq.n	80031cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003148:	e06a      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800314e:	d066      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x152>
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003154:	d017      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003156:	e063      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6818      	ldr	r0, [r3, #0]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f000 faf5 	bl	8003756 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800317a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]
      break;
 8003184:	e04c      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6899      	ldr	r1, [r3, #8]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	f000 fade 	bl	8003756 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031a8:	609a      	str	r2, [r3, #8]
      break;
 80031aa:	e039      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	6859      	ldr	r1, [r3, #4]
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	461a      	mov	r2, r3
 80031ba:	f000 fa55 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2150      	movs	r1, #80	; 0x50
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 faac 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031ca:	e029      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	461a      	mov	r2, r3
 80031da:	f000 fa73 	bl	80036c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2160      	movs	r1, #96	; 0x60
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fa9c 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80031ea:	e019      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6818      	ldr	r0, [r3, #0]
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	6859      	ldr	r1, [r3, #4]
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f000 fa35 	bl	8003668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2140      	movs	r1, #64	; 0x40
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fa8c 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 800320a:	e009      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 fa83 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 800321c:	e000      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800321e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr

08003270 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a29      	ldr	r2, [pc, #164]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d007      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a26      	ldr	r2, [pc, #152]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d003      	beq.n	80032c4 <TIM_Base_SetConfig+0x30>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <TIM_Base_SetConfig+0xb8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d00b      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e4:	d007      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a19      	ldr	r2, [pc, #100]	; (8003350 <TIM_Base_SetConfig+0xbc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_Base_SetConfig+0x62>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a18      	ldr	r2, [pc, #96]	; (8003354 <TIM_Base_SetConfig+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d108      	bne.n	8003308 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	4313      	orrs	r3, r2
 8003306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	695b      	ldr	r3, [r3, #20]
 8003312:	4313      	orrs	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a07      	ldr	r2, [pc, #28]	; (800334c <TIM_Base_SetConfig+0xb8>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d103      	bne.n	800333c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691a      	ldr	r2, [r3, #16]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	615a      	str	r2, [r3, #20]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800

08003358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 0303 	bic.w	r3, r3, #3
 800338e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f023 0302 	bic.w	r3, r3, #2
 80033a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a1c      	ldr	r2, [pc, #112]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10c      	bne.n	80033ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0308 	bic.w	r3, r3, #8
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 0304 	bic.w	r3, r3, #4
 80033cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a13      	ldr	r2, [pc, #76]	; (8003420 <TIM_OC1_SetConfig+0xc8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d111      	bne.n	80033fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	621a      	str	r2, [r3, #32]
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	bc80      	pop	{r7}
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40012c00 	.word	0x40012c00

08003424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	f023 0210 	bic.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800345a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 0320 	bic.w	r3, r3, #32
 800346e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a14      	ldr	r2, [pc, #80]	; (80034f4 <TIM_OC2_SetConfig+0xd0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d113      	bne.n	80034d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	40012c00 	.word	0x40012c00

080034f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 0303 	bic.w	r3, r3, #3
 800352e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10d      	bne.n	8003572 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800355c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <TIM_OC3_SetConfig+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d113      	bne.n	80035a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	621a      	str	r2, [r3, #32]
}
 80035bc:	bf00      	nop
 80035be:	371c      	adds	r7, #28
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00

080035cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	021b      	lsls	r3, r3, #8
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4313      	orrs	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <TIM_OC4_SetConfig+0x98>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d109      	bne.n	8003640 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	019b      	lsls	r3, r3, #6
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	621a      	str	r2, [r3, #32]
}
 800365a:	bf00      	nop
 800365c:	371c      	adds	r7, #28
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	40012c00 	.word	0x40012c00

08003668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	f023 0201 	bic.w	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	4313      	orrs	r3, r2
 800369c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f023 030a 	bic.w	r3, r3, #10
 80036a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	621a      	str	r2, [r3, #32]
}
 80036ba:	bf00      	nop
 80036bc:	371c      	adds	r7, #28
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 0210 	bic.w	r2, r3, #16
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	031b      	lsls	r3, r3, #12
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003700:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4313      	orrs	r3, r2
 800370a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	621a      	str	r2, [r3, #32]
}
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	bc80      	pop	{r7}
 8003754:	4770      	bx	lr

08003756 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003756:	b480      	push	{r7}
 8003758:	b087      	sub	sp, #28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003770:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	021a      	lsls	r2, r3, #8
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	431a      	orrs	r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4313      	orrs	r3, r2
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	371c      	adds	r7, #28
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e032      	b.n	8003812 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3714      	adds	r7, #20
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003840:	b084      	sub	sp, #16
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	f107 0014 	add.w	r0, r7, #20
 800384e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	b004      	add	sp, #16
 800385e:	4770      	bx	lr

08003860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003868:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800386c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003874:	b29a      	uxth	r2, r3
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	4313      	orrs	r3, r2
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003896:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800389a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	b21a      	sxth	r2, r3
 80038a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	b21b      	sxth	r3, r3
 80038ae:	4013      	ands	r3, r2
 80038b0:	b21b      	sxth	r3, r3
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	460b      	mov	r3, r1
 80038d0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038de:	b084      	sub	sp, #16
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	f107 0014 	add.w	r0, r7, #20
 80038ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ffa5 	bl	8003860 <USB_EnableGlobalInt>

  return HAL_OK;
 8003916:	2300      	movs	r3, #0
}
 8003918:	4618      	mov	r0, r3
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003922:	b004      	add	sp, #16
 8003924:	4770      	bx	lr
	...

08003928 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003928:	b490      	push	{r4, r7}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	881b      	ldrh	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	78db      	ldrb	r3, [r3, #3]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d819      	bhi.n	800398a <USB_ActivateEndpoint+0x62>
 8003956:	a201      	add	r2, pc, #4	; (adr r2, 800395c <USB_ActivateEndpoint+0x34>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003981 	.word	0x08003981
 8003964:	08003991 	.word	0x08003991
 8003968:	08003977 	.word	0x08003977
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800396c:	89bb      	ldrh	r3, [r7, #12]
 800396e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003972:	81bb      	strh	r3, [r7, #12]
      break;
 8003974:	e00d      	b.n	8003992 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003976:	89bb      	ldrh	r3, [r7, #12]
 8003978:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800397c:	81bb      	strh	r3, [r7, #12]
      break;
 800397e:	e008      	b.n	8003992 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003980:	89bb      	ldrh	r3, [r7, #12]
 8003982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003986:	81bb      	strh	r3, [r7, #12]
      break;
 8003988:	e003      	b.n	8003992 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      break;
 800398e:	e000      	b.n	8003992 <USB_ActivateEndpoint+0x6a>
      break;
 8003990:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	441a      	add	r2, r3
 800399c:	89bb      	ldrh	r3, [r7, #12]
 800399e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b29c      	uxth	r4, r3
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	441a      	add	r2, r3
 80039de:	4b8a      	ldr	r3, [pc, #552]	; (8003c08 <USB_ActivateEndpoint+0x2e0>)
 80039e0:	4323      	orrs	r3, r4
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	7b1b      	ldrb	r3, [r3, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 8112 	bne.w	8003c14 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	785b      	ldrb	r3, [r3, #1]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d067      	beq.n	8003ac8 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039f8:	687c      	ldr	r4, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	441c      	add	r4, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4423      	add	r3, r4
 8003a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a10:	461c      	mov	r4, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	88db      	ldrh	r3, [r3, #6]
 8003a16:	085b      	lsrs	r3, r3, #1
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	881b      	ldrh	r3, [r3, #0]
 8003a2c:	b29c      	uxth	r4, r3
 8003a2e:	4623      	mov	r3, r4
 8003a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d014      	beq.n	8003a62 <USB_ActivateEndpoint+0x13a>
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4e:	b29c      	uxth	r4, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <USB_ActivateEndpoint+0x2e4>)
 8003a5c:	4323      	orrs	r3, r4
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d018      	beq.n	8003a9c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a80:	b29c      	uxth	r4, r3
 8003a82:	f084 0320 	eor.w	r3, r4, #32
 8003a86:	b29c      	uxth	r4, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	441a      	add	r2, r3
 8003a92:	4b5d      	ldr	r3, [pc, #372]	; (8003c08 <USB_ActivateEndpoint+0x2e0>)
 8003a94:	4323      	orrs	r3, r4
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	8013      	strh	r3, [r2, #0]
 8003a9a:	e22b      	b.n	8003ef4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4413      	add	r3, r2
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ab2:	b29c      	uxth	r4, r3
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <USB_ActivateEndpoint+0x2e0>)
 8003ac0:	4323      	orrs	r3, r4
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	8013      	strh	r3, [r2, #0]
 8003ac6:	e215      	b.n	8003ef4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003ac8:	687c      	ldr	r4, [r7, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	441c      	add	r4, r3
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	4423      	add	r3, r4
 8003adc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	88db      	ldrh	r3, [r3, #6]
 8003ae6:	085b      	lsrs	r3, r3, #1
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003af0:	687c      	ldr	r4, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	441c      	add	r4, r3
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	4423      	add	r3, r4
 8003b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b08:	461c      	mov	r4, r3
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10e      	bne.n	8003b30 <USB_ActivateEndpoint+0x208>
 8003b12:	8823      	ldrh	r3, [r4, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	8023      	strh	r3, [r4, #0]
 8003b1e:	8823      	ldrh	r3, [r4, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	8023      	strh	r3, [r4, #0]
 8003b2e:	e02d      	b.n	8003b8c <USB_ActivateEndpoint+0x264>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b3e      	cmp	r3, #62	; 0x3e
 8003b36:	d812      	bhi.n	8003b5e <USB_ActivateEndpoint+0x236>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	085b      	lsrs	r3, r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <USB_ActivateEndpoint+0x22a>
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	8023      	strh	r3, [r4, #0]
 8003b5c:	e016      	b.n	8003b8c <USB_ActivateEndpoint+0x264>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <USB_ActivateEndpoint+0x250>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29c      	uxth	r4, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d014      	beq.n	8003bce <USB_ActivateEndpoint+0x2a6>
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	b29c      	uxth	r4, r3
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	4b12      	ldr	r3, [pc, #72]	; (8003c10 <USB_ActivateEndpoint+0x2e8>)
 8003bc8:	4323      	orrs	r3, r4
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be4:	b29c      	uxth	r4, r3
 8003be6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003bea:	b29c      	uxth	r4, r3
 8003bec:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003bf0:	b29c      	uxth	r4, r3
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	441a      	add	r2, r3
 8003bfc:	4b02      	ldr	r3, [pc, #8]	; (8003c08 <USB_ActivateEndpoint+0x2e0>)
 8003bfe:	4323      	orrs	r3, r4
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	8013      	strh	r3, [r2, #0]
 8003c04:	e176      	b.n	8003ef4 <USB_ActivateEndpoint+0x5cc>
 8003c06:	bf00      	nop
 8003c08:	ffff8080 	.word	0xffff8080
 8003c0c:	ffff80c0 	.word	0xffff80c0
 8003c10:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	b29c      	uxth	r4, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	441a      	add	r2, r3
 8003c36:	4b96      	ldr	r3, [pc, #600]	; (8003e90 <USB_ActivateEndpoint+0x568>)
 8003c38:	4323      	orrs	r3, r4
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c3e:	687c      	ldr	r4, [r7, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	441c      	add	r4, r3
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4423      	add	r3, r4
 8003c52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c56:	461c      	mov	r4, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	891b      	ldrh	r3, [r3, #8]
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	8023      	strh	r3, [r4, #0]
 8003c66:	687c      	ldr	r4, [r7, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	441c      	add	r4, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4423      	add	r3, r4
 8003c7a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c7e:	461c      	mov	r4, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	895b      	ldrh	r3, [r3, #10]
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f040 8088 	bne.w	8003da8 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	881b      	ldrh	r3, [r3, #0]
 8003ca4:	b29c      	uxth	r4, r3
 8003ca6:	4623      	mov	r3, r4
 8003ca8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d014      	beq.n	8003cda <USB_ActivateEndpoint+0x3b2>
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	881b      	ldrh	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc6:	b29c      	uxth	r4, r3
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	441a      	add	r2, r3
 8003cd2:	4b70      	ldr	r3, [pc, #448]	; (8003e94 <USB_ActivateEndpoint+0x56c>)
 8003cd4:	4323      	orrs	r3, r4
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b29c      	uxth	r4, r3
 8003ce8:	4623      	mov	r3, r4
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d014      	beq.n	8003d1c <USB_ActivateEndpoint+0x3f4>
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d08:	b29c      	uxth	r4, r3
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	441a      	add	r2, r3
 8003d14:	4b60      	ldr	r3, [pc, #384]	; (8003e98 <USB_ActivateEndpoint+0x570>)
 8003d16:	4323      	orrs	r3, r4
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	b29c      	uxth	r4, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	441a      	add	r2, r3
 8003d3e:	4b56      	ldr	r3, [pc, #344]	; (8003e98 <USB_ActivateEndpoint+0x570>)
 8003d40:	4323      	orrs	r3, r4
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	b29c      	uxth	r4, r3
 8003d5e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003d62:	b29c      	uxth	r4, r3
 8003d64:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003d68:	b29c      	uxth	r4, r3
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	441a      	add	r2, r3
 8003d74:	4b49      	ldr	r3, [pc, #292]	; (8003e9c <USB_ActivateEndpoint+0x574>)
 8003d76:	4323      	orrs	r3, r4
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d92:	b29c      	uxth	r4, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	441a      	add	r2, r3
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <USB_ActivateEndpoint+0x574>)
 8003da0:	4323      	orrs	r3, r4
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8013      	strh	r3, [r2, #0]
 8003da6:	e0a5      	b.n	8003ef4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	b29c      	uxth	r4, r3
 8003db6:	4623      	mov	r3, r4
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d014      	beq.n	8003dea <USB_ActivateEndpoint+0x4c2>
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd6:	b29c      	uxth	r4, r3
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	441a      	add	r2, r3
 8003de2:	4b2c      	ldr	r3, [pc, #176]	; (8003e94 <USB_ActivateEndpoint+0x56c>)
 8003de4:	4323      	orrs	r3, r4
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29c      	uxth	r4, r3
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d014      	beq.n	8003e2c <USB_ActivateEndpoint+0x504>
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e18:	b29c      	uxth	r4, r3
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	441a      	add	r2, r3
 8003e24:	4b1c      	ldr	r3, [pc, #112]	; (8003e98 <USB_ActivateEndpoint+0x570>)
 8003e26:	4323      	orrs	r3, r4
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	b29c      	uxth	r4, r3
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	441a      	add	r2, r3
 8003e4e:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <USB_ActivateEndpoint+0x56c>)
 8003e50:	4323      	orrs	r3, r4
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	78db      	ldrb	r3, [r3, #3]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d020      	beq.n	8003ea0 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	b29c      	uxth	r4, r3
 8003e76:	f084 0320 	eor.w	r3, r4, #32
 8003e7a:	b29c      	uxth	r4, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <USB_ActivateEndpoint+0x574>)
 8003e88:	4323      	orrs	r3, r4
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]
 8003e8e:	e01c      	b.n	8003eca <USB_ActivateEndpoint+0x5a2>
 8003e90:	ffff8180 	.word	0xffff8180
 8003e94:	ffffc080 	.word	0xffffc080
 8003e98:	ffff80c0 	.word	0xffff80c0
 8003e9c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb6:	b29c      	uxth	r4, r3
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <USB_ActivateEndpoint+0x5d8>)
 8003ec4:	4323      	orrs	r3, r4
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	b29c      	uxth	r4, r3
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <USB_ActivateEndpoint+0x5d8>)
 8003eee:	4323      	orrs	r3, r4
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc90      	pop	{r4, r7}
 8003efe:	4770      	bx	lr
 8003f00:	ffff8080 	.word	0xffff8080

08003f04 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f04:	b490      	push	{r4, r7}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	7b1b      	ldrb	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d171      	bne.n	8003ffa <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	785b      	ldrb	r3, [r3, #1]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d036      	beq.n	8003f8c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4413      	add	r3, r2
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29c      	uxth	r4, r3
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d014      	beq.n	8003f60 <USB_DeactivateEndpoint+0x5c>
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f4c:	b29c      	uxth	r4, r3
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	441a      	add	r2, r3
 8003f58:	4b6b      	ldr	r3, [pc, #428]	; (8004108 <USB_DeactivateEndpoint+0x204>)
 8003f5a:	4323      	orrs	r3, r4
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f76:	b29c      	uxth	r4, r3
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	441a      	add	r2, r3
 8003f82:	4b62      	ldr	r3, [pc, #392]	; (800410c <USB_DeactivateEndpoint+0x208>)
 8003f84:	4323      	orrs	r3, r4
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	8013      	strh	r3, [r2, #0]
 8003f8a:	e144      	b.n	8004216 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	4413      	add	r3, r2
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	b29c      	uxth	r4, r3
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d014      	beq.n	8003fce <USB_DeactivateEndpoint+0xca>
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	b29c      	uxth	r4, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	441a      	add	r2, r3
 8003fc6:	4b52      	ldr	r3, [pc, #328]	; (8004110 <USB_DeactivateEndpoint+0x20c>)
 8003fc8:	4323      	orrs	r3, r4
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fe4:	b29c      	uxth	r4, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	4b46      	ldr	r3, [pc, #280]	; (800410c <USB_DeactivateEndpoint+0x208>)
 8003ff2:	4323      	orrs	r3, r4
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
 8003ff8:	e10d      	b.n	8004216 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	785b      	ldrb	r3, [r3, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f040 8088 	bne.w	8004114 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4413      	add	r3, r2
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29c      	uxth	r4, r3
 8004012:	4623      	mov	r3, r4
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d014      	beq.n	8004046 <USB_DeactivateEndpoint+0x142>
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	b29b      	uxth	r3, r3
 800402a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	b29c      	uxth	r4, r3
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	4b34      	ldr	r3, [pc, #208]	; (8004110 <USB_DeactivateEndpoint+0x20c>)
 8004040:	4323      	orrs	r3, r4
 8004042:	b29b      	uxth	r3, r3
 8004044:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	b29c      	uxth	r4, r3
 8004054:	4623      	mov	r3, r4
 8004056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405a:	2b00      	cmp	r3, #0
 800405c:	d014      	beq.n	8004088 <USB_DeactivateEndpoint+0x184>
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004074:	b29c      	uxth	r4, r3
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	441a      	add	r2, r3
 8004080:	4b21      	ldr	r3, [pc, #132]	; (8004108 <USB_DeactivateEndpoint+0x204>)
 8004082:	4323      	orrs	r3, r4
 8004084:	b29b      	uxth	r3, r3
 8004086:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800409a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800409e:	b29c      	uxth	r4, r3
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	441a      	add	r2, r3
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <USB_DeactivateEndpoint+0x204>)
 80040ac:	4323      	orrs	r3, r4
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	b29c      	uxth	r4, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <USB_DeactivateEndpoint+0x208>)
 80040d6:	4323      	orrs	r3, r4
 80040d8:	b29b      	uxth	r3, r3
 80040da:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040f2:	b29c      	uxth	r4, r3
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	441a      	add	r2, r3
 80040fe:	4b03      	ldr	r3, [pc, #12]	; (800410c <USB_DeactivateEndpoint+0x208>)
 8004100:	4323      	orrs	r3, r4
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
 8004106:	e086      	b.n	8004216 <USB_DeactivateEndpoint+0x312>
 8004108:	ffff80c0 	.word	0xffff80c0
 800410c:	ffff8080 	.word	0xffff8080
 8004110:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29c      	uxth	r4, r3
 8004122:	4623      	mov	r3, r4
 8004124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d014      	beq.n	8004156 <USB_DeactivateEndpoint+0x252>
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	b29b      	uxth	r3, r3
 800413a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	b29c      	uxth	r4, r3
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	441a      	add	r2, r3
 800414e:	4b35      	ldr	r3, [pc, #212]	; (8004224 <USB_DeactivateEndpoint+0x320>)
 8004150:	4323      	orrs	r3, r4
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	b29c      	uxth	r4, r3
 8004164:	4623      	mov	r3, r4
 8004166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d014      	beq.n	8004198 <USB_DeactivateEndpoint+0x294>
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004184:	b29c      	uxth	r4, r3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <USB_DeactivateEndpoint+0x324>)
 8004192:	4323      	orrs	r3, r4
 8004194:	b29b      	uxth	r3, r3
 8004196:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ae:	b29c      	uxth	r4, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	441a      	add	r2, r3
 80041ba:	4b1a      	ldr	r3, [pc, #104]	; (8004224 <USB_DeactivateEndpoint+0x320>)
 80041bc:	4323      	orrs	r3, r4
 80041be:	b29b      	uxth	r3, r3
 80041c0:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	881b      	ldrh	r3, [r3, #0]
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041d8:	b29c      	uxth	r4, r3
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	441a      	add	r2, r3
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <USB_DeactivateEndpoint+0x328>)
 80041e6:	4323      	orrs	r3, r4
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	b29c      	uxth	r4, r3
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <USB_DeactivateEndpoint+0x328>)
 8004210:	4323      	orrs	r3, r4
 8004212:	b29b      	uxth	r3, r3
 8004214:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3708      	adds	r7, #8
 800421c:	46bd      	mov	sp, r7
 800421e:	bc90      	pop	{r4, r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	ffffc080 	.word	0xffffc080
 8004228:	ffff80c0 	.word	0xffff80c0
 800422c:	ffff8080 	.word	0xffff8080

08004230 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b08d      	sub	sp, #52	; 0x34
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	2b01      	cmp	r3, #1
 8004240:	f040 8160 	bne.w	8004504 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	699a      	ldr	r2, [r3, #24]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	429a      	cmp	r2, r3
 800424e:	d909      	bls.n	8004264 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699a      	ldr	r2, [r3, #24]
 800425a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425c:	1ad2      	subs	r2, r2, r3
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	619a      	str	r2, [r3, #24]
 8004262:	e005      	b.n	8004270 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	7b1b      	ldrb	r3, [r3, #12]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d119      	bne.n	80042ac <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6959      	ldr	r1, [r3, #20]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	88da      	ldrh	r2, [r3, #6]
 8004280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004282:	b29b      	uxth	r3, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fba2 	bl	80049ce <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800428a:	687c      	ldr	r4, [r7, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004292:	b29b      	uxth	r3, r3
 8004294:	441c      	add	r4, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	4423      	add	r3, r4
 800429e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80042a2:	461c      	mov	r4, r3
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	8023      	strh	r3, [r4, #0]
 80042aa:	e10f      	b.n	80044cc <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d065      	beq.n	800438e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042c2:	687c      	ldr	r4, [r7, #4]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d148      	bne.n	800435e <USB_EPStartXfer+0x12e>
 80042cc:	687c      	ldr	r4, [r7, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	441c      	add	r4, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4423      	add	r3, r4
 80042e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042e4:	461c      	mov	r4, r3
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10e      	bne.n	800430a <USB_EPStartXfer+0xda>
 80042ec:	8823      	ldrh	r3, [r4, #0]
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8023      	strh	r3, [r4, #0]
 80042f8:	8823      	ldrh	r3, [r4, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004304:	b29b      	uxth	r3, r3
 8004306:	8023      	strh	r3, [r4, #0]
 8004308:	e03d      	b.n	8004386 <USB_EPStartXfer+0x156>
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	2b3e      	cmp	r3, #62	; 0x3e
 800430e:	d810      	bhi.n	8004332 <USB_EPStartXfer+0x102>
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d002      	beq.n	8004326 <USB_EPStartXfer+0xf6>
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	3301      	adds	r3, #1
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	b29b      	uxth	r3, r3
 800432a:	029b      	lsls	r3, r3, #10
 800432c:	b29b      	uxth	r3, r3
 800432e:	8023      	strh	r3, [r4, #0]
 8004330:	e029      	b.n	8004386 <USB_EPStartXfer+0x156>
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2b00      	cmp	r3, #0
 8004340:	d102      	bne.n	8004348 <USB_EPStartXfer+0x118>
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	3b01      	subs	r3, #1
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	b29b      	uxth	r3, r3
 800434c:	029b      	lsls	r3, r3, #10
 800434e:	b29b      	uxth	r3, r3
 8004350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004358:	b29b      	uxth	r3, r3
 800435a:	8023      	strh	r3, [r4, #0]
 800435c:	e013      	b.n	8004386 <USB_EPStartXfer+0x156>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	785b      	ldrb	r3, [r3, #1]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d10f      	bne.n	8004386 <USB_EPStartXfer+0x156>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800436c:	b29b      	uxth	r3, r3
 800436e:	441c      	add	r4, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	4423      	add	r3, r4
 8004378:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	895b      	ldrh	r3, [r3, #10]
 800438a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800438c:	e063      	b.n	8004456 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	785b      	ldrb	r3, [r3, #1]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d148      	bne.n	8004428 <USB_EPStartXfer+0x1f8>
 8004396:	687c      	ldr	r4, [r7, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439e:	b29b      	uxth	r3, r3
 80043a0:	441c      	add	r4, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	4423      	add	r3, r4
 80043aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80043ae:	461c      	mov	r4, r3
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <USB_EPStartXfer+0x1a4>
 80043b6:	8823      	ldrh	r3, [r4, #0]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80043be:	b29b      	uxth	r3, r3
 80043c0:	8023      	strh	r3, [r4, #0]
 80043c2:	8823      	ldrh	r3, [r4, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	8023      	strh	r3, [r4, #0]
 80043d2:	e03d      	b.n	8004450 <USB_EPStartXfer+0x220>
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	2b3e      	cmp	r3, #62	; 0x3e
 80043d8:	d810      	bhi.n	80043fc <USB_EPStartXfer+0x1cc>
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d002      	beq.n	80043f0 <USB_EPStartXfer+0x1c0>
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	3301      	adds	r3, #1
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	029b      	lsls	r3, r3, #10
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	8023      	strh	r3, [r4, #0]
 80043fa:	e029      	b.n	8004450 <USB_EPStartXfer+0x220>
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	623b      	str	r3, [r7, #32]
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2b00      	cmp	r3, #0
 800440a:	d102      	bne.n	8004412 <USB_EPStartXfer+0x1e2>
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	3b01      	subs	r3, #1
 8004410:	623b      	str	r3, [r7, #32]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	b29b      	uxth	r3, r3
 8004416:	029b      	lsls	r3, r3, #10
 8004418:	b29b      	uxth	r3, r3
 800441a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800441e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004422:	b29b      	uxth	r3, r3
 8004424:	8023      	strh	r3, [r4, #0]
 8004426:	e013      	b.n	8004450 <USB_EPStartXfer+0x220>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d10f      	bne.n	8004450 <USB_EPStartXfer+0x220>
 8004430:	687c      	ldr	r4, [r7, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004438:	b29b      	uxth	r3, r3
 800443a:	441c      	add	r4, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4423      	add	r3, r4
 8004444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004448:	461c      	mov	r4, r3
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	b29b      	uxth	r3, r3
 800444e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	891b      	ldrh	r3, [r3, #8]
 8004454:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6959      	ldr	r1, [r3, #20]
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	b29b      	uxth	r3, r3
 800445e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fab4 	bl	80049ce <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <USB_EPStartXfer+0x26a>
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004484:	b29c      	uxth	r4, r3
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	4b9a      	ldr	r3, [pc, #616]	; (80046fc <USB_EPStartXfer+0x4cc>)
 8004492:	4323      	orrs	r3, r4
 8004494:	b29b      	uxth	r3, r3
 8004496:	8013      	strh	r3, [r2, #0]
 8004498:	e018      	b.n	80044cc <USB_EPStartXfer+0x29c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d114      	bne.n	80044cc <USB_EPStartXfer+0x29c>
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b8:	b29c      	uxth	r4, r3
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	441a      	add	r2, r3
 80044c4:	4b8e      	ldr	r3, [pc, #568]	; (8004700 <USB_EPStartXfer+0x4d0>)
 80044c6:	4323      	orrs	r3, r4
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044e2:	b29c      	uxth	r4, r3
 80044e4:	f084 0310 	eor.w	r3, r4, #16
 80044e8:	b29c      	uxth	r4, r3
 80044ea:	f084 0320 	eor.w	r3, r4, #32
 80044ee:	b29c      	uxth	r4, r3
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	441a      	add	r2, r3
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <USB_EPStartXfer+0x4d4>)
 80044fc:	4323      	orrs	r3, r4
 80044fe:	b29b      	uxth	r3, r3
 8004500:	8013      	strh	r3, [r2, #0]
 8004502:	e146      	b.n	8004792 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	429a      	cmp	r2, r3
 800450e:	d909      	bls.n	8004524 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451c:	1ad2      	subs	r2, r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	619a      	str	r2, [r3, #24]
 8004522:	e005      	b.n	8004530 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	7b1b      	ldrb	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d148      	bne.n	80045ca <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004538:	687c      	ldr	r4, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004540:	b29b      	uxth	r3, r3
 8004542:	441c      	add	r4, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4423      	add	r3, r4
 800454c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004550:	461c      	mov	r4, r3
 8004552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10e      	bne.n	8004576 <USB_EPStartXfer+0x346>
 8004558:	8823      	ldrh	r3, [r4, #0]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004560:	b29b      	uxth	r3, r3
 8004562:	8023      	strh	r3, [r4, #0]
 8004564:	8823      	ldrh	r3, [r4, #0]
 8004566:	b29b      	uxth	r3, r3
 8004568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004570:	b29b      	uxth	r3, r3
 8004572:	8023      	strh	r3, [r4, #0]
 8004574:	e0f2      	b.n	800475c <USB_EPStartXfer+0x52c>
 8004576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004578:	2b3e      	cmp	r3, #62	; 0x3e
 800457a:	d810      	bhi.n	800459e <USB_EPStartXfer+0x36e>
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	085b      	lsrs	r3, r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d002      	beq.n	8004592 <USB_EPStartXfer+0x362>
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	3301      	adds	r3, #1
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	b29b      	uxth	r3, r3
 8004596:	029b      	lsls	r3, r3, #10
 8004598:	b29b      	uxth	r3, r3
 800459a:	8023      	strh	r3, [r4, #0]
 800459c:	e0de      	b.n	800475c <USB_EPStartXfer+0x52c>
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d102      	bne.n	80045b4 <USB_EPStartXfer+0x384>
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	029b      	lsls	r3, r3, #10
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	8023      	strh	r3, [r4, #0]
 80045c8:	e0c8      	b.n	800475c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d148      	bne.n	8004664 <USB_EPStartXfer+0x434>
 80045d2:	687c      	ldr	r4, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	441c      	add	r4, r3
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4423      	add	r3, r4
 80045e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80045ea:	461c      	mov	r4, r3
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <USB_EPStartXfer+0x3e0>
 80045f2:	8823      	ldrh	r3, [r4, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8023      	strh	r3, [r4, #0]
 80045fe:	8823      	ldrh	r3, [r4, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800460a:	b29b      	uxth	r3, r3
 800460c:	8023      	strh	r3, [r4, #0]
 800460e:	e03d      	b.n	800468c <USB_EPStartXfer+0x45c>
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b3e      	cmp	r3, #62	; 0x3e
 8004614:	d810      	bhi.n	8004638 <USB_EPStartXfer+0x408>
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	085b      	lsrs	r3, r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d002      	beq.n	800462c <USB_EPStartXfer+0x3fc>
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	3301      	adds	r3, #1
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	b29b      	uxth	r3, r3
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	b29b      	uxth	r3, r3
 8004634:	8023      	strh	r3, [r4, #0]
 8004636:	e029      	b.n	800468c <USB_EPStartXfer+0x45c>
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2b00      	cmp	r3, #0
 8004646:	d102      	bne.n	800464e <USB_EPStartXfer+0x41e>
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	3b01      	subs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	b29b      	uxth	r3, r3
 8004652:	029b      	lsls	r3, r3, #10
 8004654:	b29b      	uxth	r3, r3
 8004656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800465a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800465e:	b29b      	uxth	r3, r3
 8004660:	8023      	strh	r3, [r4, #0]
 8004662:	e013      	b.n	800468c <USB_EPStartXfer+0x45c>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10f      	bne.n	800468c <USB_EPStartXfer+0x45c>
 800466c:	687c      	ldr	r4, [r7, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004674:	b29b      	uxth	r3, r3
 8004676:	441c      	add	r4, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4423      	add	r3, r4
 8004680:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004684:	461c      	mov	r4, r3
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	b29b      	uxth	r3, r3
 800468a:	8023      	strh	r3, [r4, #0]
 800468c:	687c      	ldr	r4, [r7, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d14e      	bne.n	8004734 <USB_EPStartXfer+0x504>
 8004696:	687c      	ldr	r4, [r7, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800469e:	b29b      	uxth	r3, r3
 80046a0:	441c      	add	r4, r3
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	4423      	add	r3, r4
 80046aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80046ae:	461c      	mov	r4, r3
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10e      	bne.n	80046d4 <USB_EPStartXfer+0x4a4>
 80046b6:	8823      	ldrh	r3, [r4, #0]
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046be:	b29b      	uxth	r3, r3
 80046c0:	8023      	strh	r3, [r4, #0]
 80046c2:	8823      	ldrh	r3, [r4, #0]
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	8023      	strh	r3, [r4, #0]
 80046d2:	e043      	b.n	800475c <USB_EPStartXfer+0x52c>
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	2b3e      	cmp	r3, #62	; 0x3e
 80046d8:	d816      	bhi.n	8004708 <USB_EPStartXfer+0x4d8>
 80046da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <USB_EPStartXfer+0x4c0>
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	029b      	lsls	r3, r3, #10
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	8023      	strh	r3, [r4, #0]
 80046fa:	e02f      	b.n	800475c <USB_EPStartXfer+0x52c>
 80046fc:	ffff80c0 	.word	0xffff80c0
 8004700:	ffffc080 	.word	0xffffc080
 8004704:	ffff8080 	.word	0xffff8080
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	095b      	lsrs	r3, r3, #5
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2b00      	cmp	r3, #0
 8004716:	d102      	bne.n	800471e <USB_EPStartXfer+0x4ee>
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	3b01      	subs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	b29b      	uxth	r3, r3
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	b29b      	uxth	r3, r3
 8004726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800472a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800472e:	b29b      	uxth	r3, r3
 8004730:	8023      	strh	r3, [r4, #0]
 8004732:	e013      	b.n	800475c <USB_EPStartXfer+0x52c>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d10f      	bne.n	800475c <USB_EPStartXfer+0x52c>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004742:	b29b      	uxth	r3, r3
 8004744:	441c      	add	r4, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	011b      	lsls	r3, r3, #4
 800474c:	4423      	add	r3, r4
 800474e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004756:	b29a      	uxth	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004772:	b29c      	uxth	r4, r3
 8004774:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004778:	b29c      	uxth	r4, r3
 800477a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800477e:	b29c      	uxth	r4, r3
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	441a      	add	r2, r3
 800478a:	4b04      	ldr	r3, [pc, #16]	; (800479c <USB_EPStartXfer+0x56c>)
 800478c:	4323      	orrs	r3, r4
 800478e:	b29b      	uxth	r3, r3
 8004790:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3734      	adds	r7, #52	; 0x34
 8004798:	46bd      	mov	sp, r7
 800479a:	bd90      	pop	{r4, r7, pc}
 800479c:	ffff8080 	.word	0xffff8080

080047a0 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80047a0:	b490      	push	{r4, r7}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d018      	beq.n	80047e4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047c8:	b29c      	uxth	r4, r3
 80047ca:	f084 0310 	eor.w	r3, r4, #16
 80047ce:	b29c      	uxth	r4, r3
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	4b11      	ldr	r3, [pc, #68]	; (8004820 <USB_EPSetStall+0x80>)
 80047dc:	4323      	orrs	r3, r4
 80047de:	b29b      	uxth	r3, r3
 80047e0:	8013      	strh	r3, [r2, #0]
 80047e2:	e017      	b.n	8004814 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	b29c      	uxth	r4, r3
 80047fc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004800:	b29c      	uxth	r4, r3
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	441a      	add	r2, r3
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <USB_EPSetStall+0x80>)
 800480e:	4323      	orrs	r3, r4
 8004810:	b29b      	uxth	r3, r3
 8004812:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bc90      	pop	{r4, r7}
 800481e:	4770      	bx	lr
 8004820:	ffff8080 	.word	0xffff8080

08004824 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004824:	b490      	push	{r4, r7}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	7b1b      	ldrb	r3, [r3, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d17d      	bne.n	8004932 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	785b      	ldrb	r3, [r3, #1]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d03d      	beq.n	80048ba <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29c      	uxth	r4, r3
 800484c:	4623      	mov	r3, r4
 800484e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d014      	beq.n	8004880 <USB_EPClearStall+0x5c>
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486c:	b29c      	uxth	r4, r3
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	441a      	add	r2, r3
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <USB_EPClearStall+0x11c>)
 800487a:	4323      	orrs	r3, r4
 800487c:	b29b      	uxth	r3, r3
 800487e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	78db      	ldrb	r3, [r3, #3]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d054      	beq.n	8004932 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800489a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800489e:	b29c      	uxth	r4, r3
 80048a0:	f084 0320 	eor.w	r3, r4, #32
 80048a4:	b29c      	uxth	r4, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	441a      	add	r2, r3
 80048b0:	4b24      	ldr	r3, [pc, #144]	; (8004944 <USB_EPClearStall+0x120>)
 80048b2:	4323      	orrs	r3, r4
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	8013      	strh	r3, [r2, #0]
 80048b8:	e03b      	b.n	8004932 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	881b      	ldrh	r3, [r3, #0]
 80048c6:	b29c      	uxth	r4, r3
 80048c8:	4623      	mov	r3, r4
 80048ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d014      	beq.n	80048fc <USB_EPClearStall+0xd8>
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	b29b      	uxth	r3, r3
 80048e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e8:	b29c      	uxth	r4, r3
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	441a      	add	r2, r3
 80048f4:	4b14      	ldr	r3, [pc, #80]	; (8004948 <USB_EPClearStall+0x124>)
 80048f6:	4323      	orrs	r3, r4
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	b29c      	uxth	r4, r3
 8004914:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004918:	b29c      	uxth	r4, r3
 800491a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800491e:	b29c      	uxth	r4, r3
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	441a      	add	r2, r3
 800492a:	4b06      	ldr	r3, [pc, #24]	; (8004944 <USB_EPClearStall+0x120>)
 800492c:	4323      	orrs	r3, r4
 800492e:	b29b      	uxth	r3, r3
 8004930:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bc90      	pop	{r4, r7}
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	ffff80c0 	.word	0xffff80c0
 8004944:	ffff8080 	.word	0xffff8080
 8004948:	ffffc080 	.word	0xffffc080

0800494c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr

08004986 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr

0800499a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80049ac:	68fb      	ldr	r3, [r7, #12]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bc80      	pop	{r7}
 80049cc:	4770      	bx	lr

080049ce <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80049ce:	b480      	push	{r7}
 80049d0:	b08d      	sub	sp, #52	; 0x34
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	60b9      	str	r1, [r7, #8]
 80049d8:	4611      	mov	r1, r2
 80049da:	461a      	mov	r2, r3
 80049dc:	460b      	mov	r3, r1
 80049de:	80fb      	strh	r3, [r7, #6]
 80049e0:	4613      	mov	r3, r2
 80049e2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80049e4:	88bb      	ldrh	r3, [r7, #4]
 80049e6:	3301      	adds	r3, #1
 80049e8:	085b      	lsrs	r3, r3, #1
 80049ea:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	005a      	lsls	r2, r3, #1
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a06:	e01e      	b.n	8004a46 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	3301      	adds	r3, #1
 8004a12:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	b29a      	uxth	r2, r3
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a30:	3302      	adds	r3, #2
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	3302      	adds	r3, #2
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	3b01      	subs	r3, #1
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1dd      	bne.n	8004a08 <USB_WritePMA+0x3a>
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	3734      	adds	r7, #52	; 0x34
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b08b      	sub	sp, #44	; 0x2c
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	4611      	mov	r1, r2
 8004a62:	461a      	mov	r2, r3
 8004a64:	460b      	mov	r3, r1
 8004a66:	80fb      	strh	r3, [r7, #6]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004a6c:	88bb      	ldrh	r3, [r7, #4]
 8004a6e:	085b      	lsrs	r3, r3, #1
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a7c:	88fb      	ldrh	r3, [r7, #6]
 8004a7e:	005a      	lsls	r2, r3, #1
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	4413      	add	r3, r2
 8004a84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a88:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	e01b      	b.n	8004ac8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	0a1b      	lsrs	r3, r3, #8
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	3302      	adds	r3, #2
 8004ac0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1e0      	bne.n	8004a90 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004ace:	88bb      	ldrh	r3, [r7, #4]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	881b      	ldrh	r3, [r3, #0]
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	701a      	strb	r2, [r3, #0]
  }
}
 8004aea:	bf00      	nop
 8004aec:	372c      	adds	r7, #44	; 0x2c
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr

08004af4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7c1b      	ldrb	r3, [r3, #16]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d115      	bne.n	8004b38 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b10:	2202      	movs	r2, #2
 8004b12:	2181      	movs	r1, #129	; 0x81
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 fe6a 	bl	80067ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b24:	2202      	movs	r2, #2
 8004b26:	2101      	movs	r1, #1
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f001 fe60 	bl	80067ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004b36:	e012      	b.n	8004b5e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004b38:	2340      	movs	r3, #64	; 0x40
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	2181      	movs	r1, #129	; 0x81
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 fe55 	bl	80067ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004b4a:	2340      	movs	r3, #64	; 0x40
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	2101      	movs	r1, #1
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f001 fe4c 	bl	80067ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004b5e:	2308      	movs	r3, #8
 8004b60:	2203      	movs	r2, #3
 8004b62:	2182      	movs	r1, #130	; 0x82
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f001 fe42 	bl	80067ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004b70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004b74:	f001 ff5c 	bl	8006a30 <USBD_static_malloc>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
 8004b8e:	e026      	b.n	8004bde <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7c1b      	ldrb	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f001 fefb 	bl	80069c2 <USBD_LL_PrepareReceive>
 8004bcc:	e007      	b.n	8004bde <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004bd4:	2340      	movs	r3, #64	; 0x40
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f001 fef2 	bl	80069c2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004bf8:	2181      	movs	r1, #129	; 0x81
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 fe1d 	bl	800683a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c06:	2101      	movs	r1, #1
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f001 fe16 	bl	800683a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c16:	2182      	movs	r1, #130	; 0x82
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f001 fe0e 	bl	800683a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00e      	beq.n	8004c4c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 ff02 	bl	8006a48 <USBD_static_free>
    pdev->pClassData = NULL;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c66:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d039      	beq.n	8004cf4 <USBD_CDC_Setup+0x9e>
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d17c      	bne.n	8004d7e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	88db      	ldrh	r3, [r3, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d029      	beq.n	8004ce0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b25b      	sxtb	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da11      	bge.n	8004cba <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004ca2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	88d2      	ldrh	r2, [r2, #6]
 8004ca8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004caa:	6939      	ldr	r1, [r7, #16]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	88db      	ldrh	r3, [r3, #6]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f001 f9f6 	bl	80060a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004cb8:	e068      	b.n	8004d8c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	785a      	ldrb	r2, [r3, #1]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	88db      	ldrh	r3, [r3, #6]
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004cd0:	6939      	ldr	r1, [r7, #16]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	88db      	ldrh	r3, [r3, #6]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 fa11 	bl	8006100 <USBD_CtlPrepareRx>
      break;
 8004cde:	e055      	b.n	8004d8c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	7850      	ldrb	r0, [r2, #1]
 8004cec:	2200      	movs	r2, #0
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	4798      	blx	r3
      break;
 8004cf2:	e04b      	b.n	8004d8c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b0a      	cmp	r3, #10
 8004cfa:	d017      	beq.n	8004d2c <USBD_CDC_Setup+0xd6>
 8004cfc:	2b0b      	cmp	r3, #11
 8004cfe:	d029      	beq.n	8004d54 <USBD_CDC_Setup+0xfe>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d133      	bne.n	8004d6c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d107      	bne.n	8004d1e <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004d0e:	f107 030c 	add.w	r3, r7, #12
 8004d12:	2202      	movs	r2, #2
 8004d14:	4619      	mov	r1, r3
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f001 f9c4 	bl	80060a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d1c:	e02e      	b.n	8004d7c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d1e:	6839      	ldr	r1, [r7, #0]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f001 f955 	bl	8005fd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d26:	2302      	movs	r3, #2
 8004d28:	75fb      	strb	r3, [r7, #23]
          break;
 8004d2a:	e027      	b.n	8004d7c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d107      	bne.n	8004d46 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004d36:	f107 030f 	add.w	r3, r7, #15
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 f9b0 	bl	80060a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004d44:	e01a      	b.n	8004d7c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f001 f941 	bl	8005fd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d4e:	2302      	movs	r3, #2
 8004d50:	75fb      	strb	r3, [r7, #23]
          break;
 8004d52:	e013      	b.n	8004d7c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d00d      	beq.n	8004d7a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004d5e:	6839      	ldr	r1, [r7, #0]
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f001 f935 	bl	8005fd0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004d66:	2302      	movs	r3, #2
 8004d68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d6a:	e006      	b.n	8004d7a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 f92e 	bl	8005fd0 <USBD_CtlError>
          ret = USBD_FAIL;
 8004d74:	2302      	movs	r3, #2
 8004d76:	75fb      	strb	r3, [r7, #23]
          break;
 8004d78:	e000      	b.n	8004d7c <USBD_CDC_Setup+0x126>
          break;
 8004d7a:	bf00      	nop
      }
      break;
 8004d7c:	e006      	b.n	8004d8c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004d7e:	6839      	ldr	r1, [r7, #0]
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f001 f925 	bl	8005fd0 <USBD_CtlError>
      ret = USBD_FAIL;
 8004d86:	2302      	movs	r3, #2
 8004d88:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8a:	bf00      	nop
  }

  return ret;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	460b      	mov	r3, r1
 8004da0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004da8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004db0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d037      	beq.n	8004e2c <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	331c      	adds	r3, #28
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d026      	beq.n	8004e20 <USBD_CDC_DataIn+0x8a>
 8004dd2:	78fa      	ldrb	r2, [r7, #3]
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	331c      	adds	r3, #28
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	0152      	lsls	r2, r2, #5
 8004dea:	440a      	add	r2, r1
 8004dec:	3238      	adds	r2, #56	; 0x38
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df4:	fb02 f201 	mul.w	r2, r2, r1
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d110      	bne.n	8004e20 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004dfe:	78fa      	ldrb	r2, [r7, #3]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	331c      	adds	r3, #28
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004e12:	78f9      	ldrb	r1, [r7, #3]
 8004e14:	2300      	movs	r3, #0
 8004e16:	2200      	movs	r2, #0
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f001 fdaf 	bl	800697c <USBD_LL_Transmit>
 8004e1e:	e003      	b.n	8004e28 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e48:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e4a:	78fb      	ldrb	r3, [r7, #3]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 fdda 	bl	8006a08 <USBD_LL_GetRxDataSize>
 8004e54:	4602      	mov	r2, r0
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00d      	beq.n	8004e82 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	4798      	blx	r3

    return USBD_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e000      	b.n	8004e84 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004e82:	2302      	movs	r3, #2
  }
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e9a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d015      	beq.n	8004ed2 <USBD_CDC_EP0_RxReady+0x46>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004eac:	2bff      	cmp	r3, #255	; 0xff
 8004eae:	d010      	beq.n	8004ed2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004ebe:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	; 0xff
 8004ece:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2243      	movs	r2, #67	; 0x43
 8004ee8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004eea:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bc80      	pop	{r7}
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000094 	.word	0x20000094

08004efc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2243      	movs	r2, #67	; 0x43
 8004f08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004f0a:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bc80      	pop	{r7}
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000050 	.word	0x20000050

08004f1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2243      	movs	r2, #67	; 0x43
 8004f28:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004f2a:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	200000d8 	.word	0x200000d8

08004f3c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	220a      	movs	r2, #10
 8004f48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004f4a:	4b03      	ldr	r3, [pc, #12]	; (8004f58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bc80      	pop	{r7}
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	2000000c 	.word	0x2000000c

08004f5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004f66:	2302      	movs	r3, #2
 8004f68:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bc80      	pop	{r7}
 8004f86:	4770      	bx	lr

08004f88 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f9c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004fa6:	88fa      	ldrh	r2, [r7, #6]
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bc80      	pop	{r7}
 8004fb8:	4770      	bx	lr

08004fba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bc80      	pop	{r7}
 8004fde:	4770      	bx	lr

08004fe0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01c      	beq.n	8005034 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005000:	2b00      	cmp	r3, #0
 8005002:	d115      	bne.n	8005030 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005022:	b29b      	uxth	r3, r3
 8005024:	2181      	movs	r1, #129	; 0x81
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 fca8 	bl	800697c <USBD_LL_Transmit>

      return USBD_OK;
 800502c:	2300      	movs	r3, #0
 800502e:	e002      	b.n	8005036 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800504c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	7c1b      	ldrb	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800506a:	2101      	movs	r1, #1
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f001 fca8 	bl	80069c2 <USBD_LL_PrepareReceive>
 8005072:	e007      	b.n	8005084 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800507a:	2340      	movs	r3, #64	; 0x40
 800507c:	2101      	movs	r1, #1
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fc9f 	bl	80069c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	4613      	mov	r3, r2
 800509e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d101      	bne.n	80050aa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80050a6:	2302      	movs	r3, #2
 80050a8:	e01a      	b.n	80050e0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	79fa      	ldrb	r2, [r7, #7]
 80050d6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 fb13 	bl	8006704 <USBD_LL_Init>

  return USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d006      	beq.n	800510a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	683a      	ldr	r2, [r7, #0]
 8005100:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e001      	b.n	800510e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800510a:	2302      	movs	r3, #2
 800510c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr

0800511a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 fb48 	bl	80067b8 <USBD_LL_Start>

  return USBD_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr

08005146 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005152:	2302      	movs	r3, #2
 8005154:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	4611      	mov	r1, r2
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	4798      	blx	r3
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800517a:	7bfb      	ldrb	r3, [r7, #15]
}
 800517c:	4618      	mov	r0, r3
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	78fa      	ldrb	r2, [r7, #3]
 800519a:	4611      	mov	r1, r2
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4798      	blx	r3

  return USBD_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051ba:	6839      	ldr	r1, [r7, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f000 fecb 	bl	8005f58 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80051de:	f003 031f 	and.w	r3, r3, #31
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d00c      	beq.n	8005200 <USBD_LL_SetupStage+0x56>
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d302      	bcc.n	80051f0 <USBD_LL_SetupStage+0x46>
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d010      	beq.n	8005210 <USBD_LL_SetupStage+0x66>
 80051ee:	e017      	b.n	8005220 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9cb 	bl	8005594 <USBD_StdDevReq>
      break;
 80051fe:	e01a      	b.n	8005236 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005206:	4619      	mov	r1, r3
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fa2d 	bl	8005668 <USBD_StdItfReq>
      break;
 800520e:	e012      	b.n	8005236 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa6b 	bl	80056f4 <USBD_StdEPReq>
      break;
 800521e:	e00a      	b.n	8005236 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005226:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800522a:	b2db      	uxtb	r3, r3
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fb22 	bl	8006878 <USBD_LL_StallEP>
      break;
 8005234:	bf00      	nop
  }

  return USBD_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	460b      	mov	r3, r1
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800524e:	7afb      	ldrb	r3, [r7, #11]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d14b      	bne.n	80052ec <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800525a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005262:	2b03      	cmp	r3, #3
 8005264:	d134      	bne.n	80052d0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d919      	bls.n	80052a6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	1ad2      	subs	r2, r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005288:	429a      	cmp	r2, r3
 800528a:	d203      	bcs.n	8005294 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005290:	b29b      	uxth	r3, r3
 8005292:	e002      	b.n	800529a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005298:	b29b      	uxth	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 ff4c 	bl	800613c <USBD_CtlContinueRx>
 80052a4:	e038      	b.n	8005318 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00a      	beq.n	80052c8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d105      	bne.n	80052c8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 ff49 	bl	8006160 <USBD_CtlSendStatus>
 80052ce:	e023      	b.n	8005318 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	d11e      	bne.n	8005318 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80052e2:	2100      	movs	r1, #0
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f001 fac7 	bl	8006878 <USBD_LL_StallEP>
 80052ea:	e015      	b.n	8005318 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00d      	beq.n	8005314 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d108      	bne.n	8005314 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	7afa      	ldrb	r2, [r7, #11]
 800530c:	4611      	mov	r1, r2
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	4798      	blx	r3
 8005312:	e001      	b.n	8005318 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005314:	2302      	movs	r3, #2
 8005316:	e000      	b.n	800531a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	460b      	mov	r3, r1
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d17f      	bne.n	8005436 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3314      	adds	r3, #20
 800533a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005342:	2b02      	cmp	r3, #2
 8005344:	d15c      	bne.n	8005400 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	429a      	cmp	r2, r3
 8005350:	d915      	bls.n	800537e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	b29b      	uxth	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 feb6 	bl	80060dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005370:	2300      	movs	r3, #0
 8005372:	2200      	movs	r2, #0
 8005374:	2100      	movs	r1, #0
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f001 fb23 	bl	80069c2 <USBD_LL_PrepareReceive>
 800537c:	e04e      	b.n	800541c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	6912      	ldr	r2, [r2, #16]
 8005386:	fbb3 f1f2 	udiv	r1, r3, r2
 800538a:	fb02 f201 	mul.w	r2, r2, r1
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	2b00      	cmp	r3, #0
 8005392:	d11c      	bne.n	80053ce <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800539c:	429a      	cmp	r2, r3
 800539e:	d316      	bcc.n	80053ce <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	689a      	ldr	r2, [r3, #8]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d20f      	bcs.n	80053ce <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053ae:	2200      	movs	r2, #0
 80053b0:	2100      	movs	r1, #0
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 fe92 	bl	80060dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053c0:	2300      	movs	r3, #0
 80053c2:	2200      	movs	r2, #0
 80053c4:	2100      	movs	r1, #0
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f001 fafb 	bl	80069c2 <USBD_LL_PrepareReceive>
 80053cc:	e026      	b.n	800541c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80053e0:	2b03      	cmp	r3, #3
 80053e2:	d105      	bne.n	80053f0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f001 fa40 	bl	8006878 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 fec4 	bl	8006186 <USBD_CtlReceiveStatus>
 80053fe:	e00d      	b.n	800541c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005406:	2b04      	cmp	r3, #4
 8005408:	d004      	beq.n	8005414 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 fa2e 	bl	8006878 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d11d      	bne.n	8005462 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fe83 	bl	8005132 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005434:	e015      	b.n	8005462 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00d      	beq.n	800545e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005448:	2b03      	cmp	r3, #3
 800544a:	d108      	bne.n	800545e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	7afa      	ldrb	r2, [r7, #11]
 8005456:	4611      	mov	r1, r2
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	4798      	blx	r3
 800545c:	e001      	b.n	8005462 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800545e:	2302      	movs	r3, #2
 8005460:	e000      	b.n	8005464 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3718      	adds	r7, #24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005474:	2340      	movs	r3, #64	; 0x40
 8005476:	2200      	movs	r2, #0
 8005478:	2100      	movs	r1, #0
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 f9b7 	bl	80067ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2240      	movs	r2, #64	; 0x40
 800548c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005490:	2340      	movs	r3, #64	; 0x40
 8005492:	2200      	movs	r2, #0
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f001 f9a9 	bl	80067ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2240      	movs	r2, #64	; 0x40
 80054a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6852      	ldr	r2, [r2, #4]
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	4611      	mov	r1, r2
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
  }

  return USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	bc80      	pop	{r7}
 800550a:	4770      	bx	lr

0800550c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2204      	movs	r2, #4
 8005524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005542:	2b04      	cmp	r3, #4
 8005544:	d105      	bne.n	8005552 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b082      	sub	sp, #8
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800556c:	2b03      	cmp	r3, #3
 800556e:	d10b      	bne.n	8005588 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
	...

08005594 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800559e:	2300      	movs	r3, #0
 80055a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	d004      	beq.n	80055b8 <USBD_StdDevReq+0x24>
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d002      	beq.n	80055b8 <USBD_StdDevReq+0x24>
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <USBD_StdDevReq+0x34>
 80055b6:	e04c      	b.n	8005652 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	4798      	blx	r3
      break;
 80055c6:	e049      	b.n	800565c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b09      	cmp	r3, #9
 80055ce:	d83a      	bhi.n	8005646 <USBD_StdDevReq+0xb2>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <USBD_StdDevReq+0x44>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	08005629 	.word	0x08005629
 80055dc:	0800563d 	.word	0x0800563d
 80055e0:	08005647 	.word	0x08005647
 80055e4:	08005633 	.word	0x08005633
 80055e8:	08005647 	.word	0x08005647
 80055ec:	0800560b 	.word	0x0800560b
 80055f0:	08005601 	.word	0x08005601
 80055f4:	08005647 	.word	0x08005647
 80055f8:	0800561f 	.word	0x0800561f
 80055fc:	08005615 	.word	0x08005615
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9d4 	bl	80059b0 <USBD_GetDescriptor>
          break;
 8005608:	e022      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 fb37 	bl	8005c80 <USBD_SetAddress>
          break;
 8005612:	e01d      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005614:	6839      	ldr	r1, [r7, #0]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fb74 	bl	8005d04 <USBD_SetConfig>
          break;
 800561c:	e018      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800561e:	6839      	ldr	r1, [r7, #0]
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fbfd 	bl	8005e20 <USBD_GetConfig>
          break;
 8005626:	e013      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005628:	6839      	ldr	r1, [r7, #0]
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 fc2c 	bl	8005e88 <USBD_GetStatus>
          break;
 8005630:	e00e      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005632:	6839      	ldr	r1, [r7, #0]
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fc5a 	bl	8005eee <USBD_SetFeature>
          break;
 800563a:	e009      	b.n	8005650 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fc69 	bl	8005f16 <USBD_ClrFeature>
          break;
 8005644:	e004      	b.n	8005650 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8005646:	6839      	ldr	r1, [r7, #0]
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fcc1 	bl	8005fd0 <USBD_CtlError>
          break;
 800564e:	bf00      	nop
      }
      break;
 8005650:	e004      	b.n	800565c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fcbb 	bl	8005fd0 <USBD_CtlError>
      break;
 800565a:	bf00      	nop
  }

  return ret;
 800565c:	7bfb      	ldrb	r3, [r7, #15]
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop

08005668 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800567e:	2b20      	cmp	r3, #32
 8005680:	d003      	beq.n	800568a <USBD_StdItfReq+0x22>
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d001      	beq.n	800568a <USBD_StdItfReq+0x22>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d12a      	bne.n	80056e0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005690:	3b01      	subs	r3, #1
 8005692:	2b02      	cmp	r3, #2
 8005694:	d81d      	bhi.n	80056d2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	889b      	ldrh	r3, [r3, #4]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	d813      	bhi.n	80056c8 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
 80056ae:	4603      	mov	r3, r0
 80056b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	88db      	ldrh	r3, [r3, #6]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d110      	bne.n	80056dc <USBD_StdItfReq+0x74>
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10d      	bne.n	80056dc <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fd4d 	bl	8006160 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80056c6:	e009      	b.n	80056dc <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fc80 	bl	8005fd0 <USBD_CtlError>
          break;
 80056d0:	e004      	b.n	80056dc <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fc7b 	bl	8005fd0 <USBD_CtlError>
          break;
 80056da:	e000      	b.n	80056de <USBD_StdItfReq+0x76>
          break;
 80056dc:	bf00      	nop
      }
      break;
 80056de:	e004      	b.n	80056ea <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fc74 	bl	8005fd0 <USBD_CtlError>
      break;
 80056e8:	bf00      	nop
  }

  return USBD_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80056fe:	2300      	movs	r3, #0
 8005700:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	889b      	ldrh	r3, [r3, #4]
 8005706:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005710:	2b20      	cmp	r3, #32
 8005712:	d004      	beq.n	800571e <USBD_StdEPReq+0x2a>
 8005714:	2b40      	cmp	r3, #64	; 0x40
 8005716:	d002      	beq.n	800571e <USBD_StdEPReq+0x2a>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <USBD_StdEPReq+0x3a>
 800571c:	e13d      	b.n	800599a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	6839      	ldr	r1, [r7, #0]
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	4798      	blx	r3
      break;
 800572c:	e13a      	b.n	80059a4 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005736:	2b20      	cmp	r3, #32
 8005738:	d10a      	bne.n	8005750 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	6839      	ldr	r1, [r7, #0]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	4798      	blx	r3
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	e12a      	b.n	80059a6 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	785b      	ldrb	r3, [r3, #1]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d03e      	beq.n	80057d6 <USBD_StdEPReq+0xe2>
 8005758:	2b03      	cmp	r3, #3
 800575a:	d002      	beq.n	8005762 <USBD_StdEPReq+0x6e>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d070      	beq.n	8005842 <USBD_StdEPReq+0x14e>
 8005760:	e115      	b.n	800598e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005768:	2b02      	cmp	r3, #2
 800576a:	d002      	beq.n	8005772 <USBD_StdEPReq+0x7e>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d015      	beq.n	800579c <USBD_StdEPReq+0xa8>
 8005770:	e02b      	b.n	80057ca <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005772:	7bbb      	ldrb	r3, [r7, #14]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <USBD_StdEPReq+0x9e>
 8005778:	7bbb      	ldrb	r3, [r7, #14]
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d009      	beq.n	8005792 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800577e:	7bbb      	ldrb	r3, [r7, #14]
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f001 f878 	bl	8006878 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005788:	2180      	movs	r1, #128	; 0x80
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f001 f874 	bl	8006878 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005790:	e020      	b.n	80057d4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005792:	6839      	ldr	r1, [r7, #0]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fc1b 	bl	8005fd0 <USBD_CtlError>
              break;
 800579a:	e01b      	b.n	80057d4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	885b      	ldrh	r3, [r3, #2]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10e      	bne.n	80057c2 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80057a4:	7bbb      	ldrb	r3, [r7, #14]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00b      	beq.n	80057c2 <USBD_StdEPReq+0xce>
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	2b80      	cmp	r3, #128	; 0x80
 80057ae:	d008      	beq.n	80057c2 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	88db      	ldrh	r3, [r3, #6]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80057b8:	7bbb      	ldrb	r3, [r7, #14]
 80057ba:	4619      	mov	r1, r3
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 f85b 	bl	8006878 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fccc 	bl	8006160 <USBD_CtlSendStatus>

              break;
 80057c8:	e004      	b.n	80057d4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fbff 	bl	8005fd0 <USBD_CtlError>
              break;
 80057d2:	bf00      	nop
          }
          break;
 80057d4:	e0e0      	b.n	8005998 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d002      	beq.n	80057e6 <USBD_StdEPReq+0xf2>
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d015      	beq.n	8005810 <USBD_StdEPReq+0x11c>
 80057e4:	e026      	b.n	8005834 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80057e6:	7bbb      	ldrb	r3, [r7, #14]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00c      	beq.n	8005806 <USBD_StdEPReq+0x112>
 80057ec:	7bbb      	ldrb	r3, [r7, #14]
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d009      	beq.n	8005806 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80057f2:	7bbb      	ldrb	r3, [r7, #14]
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 f83e 	bl	8006878 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80057fc:	2180      	movs	r1, #128	; 0x80
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 f83a 	bl	8006878 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005804:	e01c      	b.n	8005840 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fbe1 	bl	8005fd0 <USBD_CtlError>
              break;
 800580e:	e017      	b.n	8005840 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	885b      	ldrh	r3, [r3, #2]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d112      	bne.n	800583e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800581e:	2b00      	cmp	r3, #0
 8005820:	d004      	beq.n	800582c <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	4619      	mov	r1, r3
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 f845 	bl	80068b6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fc97 	bl	8006160 <USBD_CtlSendStatus>
              }
              break;
 8005832:	e004      	b.n	800583e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 fbca 	bl	8005fd0 <USBD_CtlError>
              break;
 800583c:	e000      	b.n	8005840 <USBD_StdEPReq+0x14c>
              break;
 800583e:	bf00      	nop
          }
          break;
 8005840:	e0aa      	b.n	8005998 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005848:	2b02      	cmp	r3, #2
 800584a:	d002      	beq.n	8005852 <USBD_StdEPReq+0x15e>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d032      	beq.n	80058b6 <USBD_StdEPReq+0x1c2>
 8005850:	e097      	b.n	8005982 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005852:	7bbb      	ldrb	r3, [r7, #14]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <USBD_StdEPReq+0x174>
 8005858:	7bbb      	ldrb	r3, [r7, #14]
 800585a:	2b80      	cmp	r3, #128	; 0x80
 800585c:	d004      	beq.n	8005868 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fbb5 	bl	8005fd0 <USBD_CtlError>
                break;
 8005866:	e091      	b.n	800598c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800586c:	2b00      	cmp	r3, #0
 800586e:	da0b      	bge.n	8005888 <USBD_StdEPReq+0x194>
 8005870:	7bbb      	ldrb	r3, [r7, #14]
 8005872:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3310      	adds	r3, #16
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	4413      	add	r3, r2
 8005884:	3304      	adds	r3, #4
 8005886:	e00b      	b.n	80058a0 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005888:	7bbb      	ldrb	r3, [r7, #14]
 800588a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	4413      	add	r3, r2
 800589e:	3304      	adds	r3, #4
 80058a0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2202      	movs	r2, #2
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fbf8 	bl	80060a4 <USBD_CtlSendData>
              break;
 80058b4:	e06a      	b.n	800598c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80058b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da11      	bge.n	80058e2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80058be:	7bbb      	ldrb	r3, [r7, #14]
 80058c0:	f003 020f 	and.w	r2, r3, #15
 80058c4:	6879      	ldr	r1, [r7, #4]
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3318      	adds	r3, #24
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d117      	bne.n	8005908 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fb78 	bl	8005fd0 <USBD_CtlError>
                  break;
 80058e0:	e054      	b.n	800598c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb65 	bl	8005fd0 <USBD_CtlError>
                  break;
 8005906:	e041      	b.n	800598c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005908:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da0b      	bge.n	8005928 <USBD_StdEPReq+0x234>
 8005910:	7bbb      	ldrb	r3, [r7, #14]
 8005912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005916:	4613      	mov	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	3310      	adds	r3, #16
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	4413      	add	r3, r2
 8005924:	3304      	adds	r3, #4
 8005926:	e00b      	b.n	8005940 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	4413      	add	r3, r2
 800593e:	3304      	adds	r3, #4
 8005940:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005942:	7bbb      	ldrb	r3, [r7, #14]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <USBD_StdEPReq+0x25a>
 8005948:	7bbb      	ldrb	r3, [r7, #14]
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d103      	bne.n	8005956 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	e00e      	b.n	8005974 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	4619      	mov	r1, r3
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 ffca 	bl	80068f4 <USBD_LL_IsStallEP>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2201      	movs	r2, #1
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	e002      	b.n	8005974 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2202      	movs	r2, #2
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fb92 	bl	80060a4 <USBD_CtlSendData>
              break;
 8005980:	e004      	b.n	800598c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005982:	6839      	ldr	r1, [r7, #0]
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fb23 	bl	8005fd0 <USBD_CtlError>
              break;
 800598a:	bf00      	nop
          }
          break;
 800598c:	e004      	b.n	8005998 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fb1d 	bl	8005fd0 <USBD_CtlError>
          break;
 8005996:	bf00      	nop
      }
      break;
 8005998:	e004      	b.n	80059a4 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800599a:	6839      	ldr	r1, [r7, #0]
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 fb17 	bl	8005fd0 <USBD_CtlError>
      break;
 80059a2:	bf00      	nop
  }

  return ret;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	885b      	ldrh	r3, [r3, #2]
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	2b06      	cmp	r3, #6
 80059d2:	f200 8128 	bhi.w	8005c26 <USBD_GetDescriptor+0x276>
 80059d6:	a201      	add	r2, pc, #4	; (adr r2, 80059dc <USBD_GetDescriptor+0x2c>)
 80059d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	08005a11 	.word	0x08005a11
 80059e4:	08005a51 	.word	0x08005a51
 80059e8:	08005c27 	.word	0x08005c27
 80059ec:	08005c27 	.word	0x08005c27
 80059f0:	08005bc7 	.word	0x08005bc7
 80059f4:	08005bf3 	.word	0x08005bf3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	7c12      	ldrb	r2, [r2, #16]
 8005a04:	f107 0108 	add.w	r1, r7, #8
 8005a08:	4610      	mov	r0, r2
 8005a0a:	4798      	blx	r3
 8005a0c:	60f8      	str	r0, [r7, #12]
      break;
 8005a0e:	e112      	b.n	8005c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	7c1b      	ldrb	r3, [r3, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f107 0208 	add.w	r2, r7, #8
 8005a24:	4610      	mov	r0, r2
 8005a26:	4798      	blx	r3
 8005a28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	2202      	movs	r2, #2
 8005a30:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005a32:	e100      	b.n	8005c36 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3c:	f107 0208 	add.w	r2, r7, #8
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
 8005a44:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	701a      	strb	r2, [r3, #0]
      break;
 8005a4e:	e0f2      	b.n	8005c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	885b      	ldrh	r3, [r3, #2]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	f200 80ac 	bhi.w	8005bb4 <USBD_GetDescriptor+0x204>
 8005a5c:	a201      	add	r2, pc, #4	; (adr r2, 8005a64 <USBD_GetDescriptor+0xb4>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a7d 	.word	0x08005a7d
 8005a68:	08005ab1 	.word	0x08005ab1
 8005a6c:	08005ae5 	.word	0x08005ae5
 8005a70:	08005b19 	.word	0x08005b19
 8005a74:	08005b4d 	.word	0x08005b4d
 8005a78:	08005b81 	.word	0x08005b81
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00b      	beq.n	8005aa0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	7c12      	ldrb	r2, [r2, #16]
 8005a94:	f107 0108 	add.w	r1, r7, #8
 8005a98:	4610      	mov	r0, r2
 8005a9a:	4798      	blx	r3
 8005a9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a9e:	e091      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa94 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005aa8:	7afb      	ldrb	r3, [r7, #11]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	72fb      	strb	r3, [r7, #11]
          break;
 8005aae:	e089      	b.n	8005bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	7c12      	ldrb	r2, [r2, #16]
 8005ac8:	f107 0108 	add.w	r1, r7, #8
 8005acc:	4610      	mov	r0, r2
 8005ace:	4798      	blx	r3
 8005ad0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ad2:	e077      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa7a 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005adc:	7afb      	ldrb	r3, [r7, #11]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ae2:	e06f      	b.n	8005bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	7c12      	ldrb	r2, [r2, #16]
 8005afc:	f107 0108 	add.w	r1, r7, #8
 8005b00:	4610      	mov	r0, r2
 8005b02:	4798      	blx	r3
 8005b04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b06:	e05d      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fa60 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	3301      	adds	r3, #1
 8005b14:	72fb      	strb	r3, [r7, #11]
          break;
 8005b16:	e055      	b.n	8005bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	7c12      	ldrb	r2, [r2, #16]
 8005b30:	f107 0108 	add.w	r1, r7, #8
 8005b34:	4610      	mov	r0, r2
 8005b36:	4798      	blx	r3
 8005b38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b3a:	e043      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b3c:	6839      	ldr	r1, [r7, #0]
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa46 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005b44:	7afb      	ldrb	r3, [r7, #11]
 8005b46:	3301      	adds	r3, #1
 8005b48:	72fb      	strb	r3, [r7, #11]
          break;
 8005b4a:	e03b      	b.n	8005bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00b      	beq.n	8005b70 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	7c12      	ldrb	r2, [r2, #16]
 8005b64:	f107 0108 	add.w	r1, r7, #8
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4798      	blx	r3
 8005b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005b6e:	e029      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005b70:	6839      	ldr	r1, [r7, #0]
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa2c 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	3301      	adds	r3, #1
 8005b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005b7e:	e021      	b.n	8005bc4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005b92:	699b      	ldr	r3, [r3, #24]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	7c12      	ldrb	r2, [r2, #16]
 8005b98:	f107 0108 	add.w	r1, r7, #8
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
 8005ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ba2:	e00f      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fa12 	bl	8005fd0 <USBD_CtlError>
            err++;
 8005bac:	7afb      	ldrb	r3, [r7, #11]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8005bb2:	e007      	b.n	8005bc4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fa0a 	bl	8005fd0 <USBD_CtlError>
          err++;
 8005bbc:	7afb      	ldrb	r3, [r7, #11]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005bc2:	e038      	b.n	8005c36 <USBD_GetDescriptor+0x286>
 8005bc4:	e037      	b.n	8005c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	7c1b      	ldrb	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	f107 0208 	add.w	r2, r7, #8
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4798      	blx	r3
 8005bde:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005be0:	e029      	b.n	8005c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f9f3 	bl	8005fd0 <USBD_CtlError>
        err++;
 8005bea:	7afb      	ldrb	r3, [r7, #11]
 8005bec:	3301      	adds	r3, #1
 8005bee:	72fb      	strb	r3, [r7, #11]
      break;
 8005bf0:	e021      	b.n	8005c36 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	7c1b      	ldrb	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10d      	bne.n	8005c16 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f107 0208 	add.w	r2, r7, #8
 8005c06:	4610      	mov	r0, r2
 8005c08:	4798      	blx	r3
 8005c0a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	2207      	movs	r2, #7
 8005c12:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c14:	e00f      	b.n	8005c36 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f9d9 	bl	8005fd0 <USBD_CtlError>
        err++;
 8005c1e:	7afb      	ldrb	r3, [r7, #11]
 8005c20:	3301      	adds	r3, #1
 8005c22:	72fb      	strb	r3, [r7, #11]
      break;
 8005c24:	e007      	b.n	8005c36 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9d1 	bl	8005fd0 <USBD_CtlError>
      err++;
 8005c2e:	7afb      	ldrb	r3, [r7, #11]
 8005c30:	3301      	adds	r3, #1
 8005c32:	72fb      	strb	r3, [r7, #11]
      break;
 8005c34:	bf00      	nop
  }

  if (err != 0U)
 8005c36:	7afb      	ldrb	r3, [r7, #11]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11c      	bne.n	8005c76 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005c3c:	893b      	ldrh	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d011      	beq.n	8005c66 <USBD_GetDescriptor+0x2b6>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	88db      	ldrh	r3, [r3, #6]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00d      	beq.n	8005c66 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	88da      	ldrh	r2, [r3, #6]
 8005c4e:	893b      	ldrh	r3, [r7, #8]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	bf28      	it	cs
 8005c54:	4613      	movcs	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c5a:	893b      	ldrh	r3, [r7, #8]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 fa1f 	bl	80060a4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	88db      	ldrh	r3, [r3, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fa76 	bl	8006160 <USBD_CtlSendStatus>
 8005c74:	e000      	b.n	8005c78 <USBD_GetDescriptor+0x2c8>
    return;
 8005c76:	bf00      	nop
    }
  }
}
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop

08005c80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	889b      	ldrh	r3, [r3, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d130      	bne.n	8005cf4 <USBD_SetAddress+0x74>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	88db      	ldrh	r3, [r3, #6]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d12c      	bne.n	8005cf4 <USBD_SetAddress+0x74>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	885b      	ldrh	r3, [r3, #2]
 8005c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca0:	d828      	bhi.n	8005cf4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	885b      	ldrh	r3, [r3, #2]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d104      	bne.n	8005cc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005cb8:	6839      	ldr	r1, [r7, #0]
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f988 	bl	8005fd0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cc0:	e01c      	b.n	8005cfc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	7bfa      	ldrb	r2, [r7, #15]
 8005cc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fe35 	bl	800693e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fa43 	bl	8006160 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d004      	beq.n	8005cea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ce8:	e008      	b.n	8005cfc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cf2:	e003      	b.n	8005cfc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f96a 	bl	8005fd0 <USBD_CtlError>
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	885b      	ldrh	r3, [r3, #2]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d16:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005d18:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d904      	bls.n	8005d2a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f954 	bl	8005fd0 <USBD_CtlError>
 8005d28:	e075      	b.n	8005e16 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d002      	beq.n	8005d3a <USBD_SetConfig+0x36>
 8005d34:	2b03      	cmp	r3, #3
 8005d36:	d023      	beq.n	8005d80 <USBD_SetConfig+0x7c>
 8005d38:	e062      	b.n	8005e00 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005d3a:	4b38      	ldr	r3, [pc, #224]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01a      	beq.n	8005d78 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005d42:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2203      	movs	r2, #3
 8005d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005d54:	4b31      	ldr	r3, [pc, #196]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff f9f3 	bl	8005146 <USBD_SetClassConfig>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d104      	bne.n	8005d70 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f931 	bl	8005fd0 <USBD_CtlError>
            return;
 8005d6e:	e052      	b.n	8005e16 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f9f5 	bl	8006160 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005d76:	e04e      	b.n	8005e16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 f9f1 	bl	8006160 <USBD_CtlSendStatus>
        break;
 8005d7e:	e04a      	b.n	8005e16 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005d80:	4b26      	ldr	r3, [pc, #152]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d112      	bne.n	8005dae <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2202      	movs	r2, #2
 8005d8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005d90:	4b22      	ldr	r3, [pc, #136]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <USBD_SetConfig+0x118>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff f9ef 	bl	8005184 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9da 	bl	8006160 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005dac:	e033      	b.n	8005e16 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <USBD_SetConfig+0x118>)
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	461a      	mov	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d01d      	beq.n	8005df8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f7ff f9dd 	bl	8005184 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005dca:	4b14      	ldr	r3, [pc, #80]	; (8005e1c <USBD_SetConfig+0x118>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005dd4:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <USBD_SetConfig+0x118>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff f9b3 	bl	8005146 <USBD_SetClassConfig>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d104      	bne.n	8005df0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f8f1 	bl	8005fd0 <USBD_CtlError>
            return;
 8005dee:	e012      	b.n	8005e16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f9b5 	bl	8006160 <USBD_CtlSendStatus>
        break;
 8005df6:	e00e      	b.n	8005e16 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 f9b1 	bl	8006160 <USBD_CtlSendStatus>
        break;
 8005dfe:	e00a      	b.n	8005e16 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f8e4 	bl	8005fd0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <USBD_SetConfig+0x118>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7ff f9b8 	bl	8005184 <USBD_ClrClassConfig>
        break;
 8005e14:	bf00      	nop
    }
  }
}
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000200 	.word	0x20000200

08005e20 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	88db      	ldrh	r3, [r3, #6]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d004      	beq.n	8005e3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 f8cb 	bl	8005fd0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005e3a:	e021      	b.n	8005e80 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	db17      	blt.n	8005e76 <USBD_GetConfig+0x56>
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	dd02      	ble.n	8005e50 <USBD_GetConfig+0x30>
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d00b      	beq.n	8005e66 <USBD_GetConfig+0x46>
 8005e4e:	e012      	b.n	8005e76 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f920 	bl	80060a4 <USBD_CtlSendData>
        break;
 8005e64:	e00c      	b.n	8005e80 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f918 	bl	80060a4 <USBD_CtlSendData>
        break;
 8005e74:	e004      	b.n	8005e80 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005e76:	6839      	ldr	r1, [r7, #0]
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f8a9 	bl	8005fd0 <USBD_CtlError>
        break;
 8005e7e:	bf00      	nop
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d81e      	bhi.n	8005edc <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	88db      	ldrh	r3, [r3, #6]
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d004      	beq.n	8005eb0 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005ea6:	6839      	ldr	r1, [r7, #0]
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f891 	bl	8005fd0 <USBD_CtlError>
        break;
 8005eae:	e01a      	b.n	8005ee6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d005      	beq.n	8005ecc <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f043 0202 	orr.w	r2, r3, #2
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	2202      	movs	r2, #2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f8e5 	bl	80060a4 <USBD_CtlSendData>
      break;
 8005eda:	e004      	b.n	8005ee6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005edc:	6839      	ldr	r1, [r7, #0]
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f876 	bl	8005fd0 <USBD_CtlError>
      break;
 8005ee4:	bf00      	nop
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
 8005ef6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	885b      	ldrh	r3, [r3, #2]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d106      	bne.n	8005f0e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f929 	bl	8006160 <USBD_CtlSendStatus>
  }
}
 8005f0e:	bf00      	nop
 8005f10:	3708      	adds	r7, #8
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}

08005f16 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005f16:	b580      	push	{r7, lr}
 8005f18:	b082      	sub	sp, #8
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
 8005f1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f26:	3b01      	subs	r3, #1
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d80b      	bhi.n	8005f44 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	885b      	ldrh	r3, [r3, #2]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d10c      	bne.n	8005f4e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f90f 	bl	8006160 <USBD_CtlSendStatus>
      }
      break;
 8005f42:	e004      	b.n	8005f4e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f842 	bl	8005fd0 <USBD_CtlError>
      break;
 8005f4c:	e000      	b.n	8005f50 <USBD_ClrFeature+0x3a>
      break;
 8005f4e:	bf00      	nop
  }
}
 8005f50:	bf00      	nop
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	781a      	ldrb	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	785a      	ldrb	r2, [r3, #1]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	3302      	adds	r3, #2
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	3303      	adds	r3, #3
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	021b      	lsls	r3, r3, #8
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4413      	add	r3, r2
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	3304      	adds	r3, #4
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	3305      	adds	r3, #5
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	3306      	adds	r3, #6
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	3307      	adds	r3, #7
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	4413      	add	r3, r2
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	80da      	strh	r2, [r3, #6]

}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fc4b 	bl	8006878 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 fc47 	bl	8006878 <USBD_LL_StallEP>
}
 8005fea:	bf00      	nop
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b086      	sub	sp, #24
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d032      	beq.n	800606e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f834 	bl	8006076 <USBD_GetLen>
 800600e:	4603      	mov	r3, r0
 8006010:	3301      	adds	r3, #1
 8006012:	b29b      	uxth	r3, r3
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800601c:	7dfb      	ldrb	r3, [r7, #23]
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	75fa      	strb	r2, [r7, #23]
 8006022:	461a      	mov	r2, r3
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	4413      	add	r3, r2
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7812      	ldrb	r2, [r2, #0]
 800602c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	75fa      	strb	r2, [r7, #23]
 8006034:	461a      	mov	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4413      	add	r3, r2
 800603a:	2203      	movs	r2, #3
 800603c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800603e:	e012      	b.n	8006066 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	1c5a      	adds	r2, r3, #1
 8006044:	60fa      	str	r2, [r7, #12]
 8006046:	7dfa      	ldrb	r2, [r7, #23]
 8006048:	1c51      	adds	r1, r2, #1
 800604a:	75f9      	strb	r1, [r7, #23]
 800604c:	4611      	mov	r1, r2
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	440a      	add	r2, r1
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	75fa      	strb	r2, [r7, #23]
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1e8      	bne.n	8006040 <USBD_GetString+0x4e>
    }
  }
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006082:	e005      	b.n	8006090 <USBD_GetLen+0x1a>
  {
    len++;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	3301      	adds	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
    buf++;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3301      	adds	r3, #1
 800608e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1f5      	bne.n	8006084 <USBD_GetLen+0xe>
  }

  return len;
 8006098:	7bfb      	ldrb	r3, [r7, #15]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	4613      	mov	r3, r2
 80060b0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80060ba:	88fa      	ldrh	r2, [r7, #6]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80060c0:	88fa      	ldrh	r2, [r7, #6]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	2100      	movs	r1, #0
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f000 fc55 	bl	800697c <USBD_LL_Transmit>

  return USBD_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	68ba      	ldr	r2, [r7, #8]
 80060ee:	2100      	movs	r1, #0
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fc43 	bl	800697c <USBD_LL_Transmit>

  return USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2203      	movs	r2, #3
 8006112:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006126:	88fb      	ldrh	r3, [r7, #6]
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	2100      	movs	r1, #0
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fc48 	bl	80069c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	2100      	movs	r1, #0
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 fc36 	bl	80069c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2204      	movs	r2, #4
 800616c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006170:	2300      	movs	r3, #0
 8006172:	2200      	movs	r2, #0
 8006174:	2100      	movs	r1, #0
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fc00 	bl	800697c <USBD_LL_Transmit>

  return USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2205      	movs	r2, #5
 8006192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006196:	2300      	movs	r3, #0
 8006198:	2200      	movs	r2, #0
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fc10 	bl	80069c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80061b0:	2200      	movs	r2, #0
 80061b2:	4912      	ldr	r1, [pc, #72]	; (80061fc <MX_USB_DEVICE_Init+0x50>)
 80061b4:	4812      	ldr	r0, [pc, #72]	; (8006200 <MX_USB_DEVICE_Init+0x54>)
 80061b6:	f7fe ff6c 	bl	8005092 <USBD_Init>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80061c0:	f7fa fa3a 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80061c4:	490f      	ldr	r1, [pc, #60]	; (8006204 <MX_USB_DEVICE_Init+0x58>)
 80061c6:	480e      	ldr	r0, [pc, #56]	; (8006200 <MX_USB_DEVICE_Init+0x54>)
 80061c8:	f7fe ff8e 	bl	80050e8 <USBD_RegisterClass>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80061d2:	f7fa fa31 	bl	8000638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80061d6:	490c      	ldr	r1, [pc, #48]	; (8006208 <MX_USB_DEVICE_Init+0x5c>)
 80061d8:	4809      	ldr	r0, [pc, #36]	; (8006200 <MX_USB_DEVICE_Init+0x54>)
 80061da:	f7fe febf 	bl	8004f5c <USBD_CDC_RegisterInterface>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80061e4:	f7fa fa28 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80061e8:	4805      	ldr	r0, [pc, #20]	; (8006200 <MX_USB_DEVICE_Init+0x54>)
 80061ea:	f7fe ff96 	bl	800511a <USBD_Start>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80061f4:	f7fa fa20 	bl	8000638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80061f8:	bf00      	nop
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	2000012c 	.word	0x2000012c
 8006200:	20000588 	.word	0x20000588
 8006204:	20000018 	.word	0x20000018
 8006208:	2000011c 	.word	0x2000011c

0800620c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006210:	2200      	movs	r2, #0
 8006212:	4905      	ldr	r1, [pc, #20]	; (8006228 <CDC_Init_FS+0x1c>)
 8006214:	4805      	ldr	r0, [pc, #20]	; (800622c <CDC_Init_FS+0x20>)
 8006216:	f7fe feb7 	bl	8004f88 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800621a:	4905      	ldr	r1, [pc, #20]	; (8006230 <CDC_Init_FS+0x24>)
 800621c:	4803      	ldr	r0, [pc, #12]	; (800622c <CDC_Init_FS+0x20>)
 800621e:	f7fe fecc 	bl	8004fba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006222:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006224:	4618      	mov	r0, r3
 8006226:	bd80      	pop	{r7, pc}
 8006228:	20000c34 	.word	0x20000c34
 800622c:	20000588 	.word	0x20000588
 8006230:	2000084c 	.word	0x2000084c

08006234 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006238:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800623a:	4618      	mov	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	bc80      	pop	{r7}
 8006240:	4770      	bx	lr
	...

08006244 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	6039      	str	r1, [r7, #0]
 800624e:	71fb      	strb	r3, [r7, #7]
 8006250:	4613      	mov	r3, r2
 8006252:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006254:	79fb      	ldrb	r3, [r7, #7]
 8006256:	2b23      	cmp	r3, #35	; 0x23
 8006258:	d84a      	bhi.n	80062f0 <CDC_Control_FS+0xac>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <CDC_Control_FS+0x1c>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	080062f1 	.word	0x080062f1
 8006264:	080062f1 	.word	0x080062f1
 8006268:	080062f1 	.word	0x080062f1
 800626c:	080062f1 	.word	0x080062f1
 8006270:	080062f1 	.word	0x080062f1
 8006274:	080062f1 	.word	0x080062f1
 8006278:	080062f1 	.word	0x080062f1
 800627c:	080062f1 	.word	0x080062f1
 8006280:	080062f1 	.word	0x080062f1
 8006284:	080062f1 	.word	0x080062f1
 8006288:	080062f1 	.word	0x080062f1
 800628c:	080062f1 	.word	0x080062f1
 8006290:	080062f1 	.word	0x080062f1
 8006294:	080062f1 	.word	0x080062f1
 8006298:	080062f1 	.word	0x080062f1
 800629c:	080062f1 	.word	0x080062f1
 80062a0:	080062f1 	.word	0x080062f1
 80062a4:	080062f1 	.word	0x080062f1
 80062a8:	080062f1 	.word	0x080062f1
 80062ac:	080062f1 	.word	0x080062f1
 80062b0:	080062f1 	.word	0x080062f1
 80062b4:	080062f1 	.word	0x080062f1
 80062b8:	080062f1 	.word	0x080062f1
 80062bc:	080062f1 	.word	0x080062f1
 80062c0:	080062f1 	.word	0x080062f1
 80062c4:	080062f1 	.word	0x080062f1
 80062c8:	080062f1 	.word	0x080062f1
 80062cc:	080062f1 	.word	0x080062f1
 80062d0:	080062f1 	.word	0x080062f1
 80062d4:	080062f1 	.word	0x080062f1
 80062d8:	080062f1 	.word	0x080062f1
 80062dc:	080062f1 	.word	0x080062f1
 80062e0:	080062f1 	.word	0x080062f1
 80062e4:	080062f1 	.word	0x080062f1
 80062e8:	080062f1 	.word	0x080062f1
 80062ec:	080062f1 	.word	0x080062f1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80062f0:	bf00      	nop
  }

  return (USBD_OK);
 80062f2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop

08006300 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_rx_flag = Buf[0];//Se guarda lo que llega en la variable externa CDC_rx_flag. declarada en el main
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	781a      	ldrb	r2, [r3, #0]
 800630e:	4b07      	ldr	r3, [pc, #28]	; (800632c <CDC_Receive_FS+0x2c>)
 8006310:	701a      	strb	r2, [r3, #0]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	4806      	ldr	r0, [pc, #24]	; (8006330 <CDC_Receive_FS+0x30>)
 8006316:	f7fe fe50 	bl	8004fba <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800631a:	4805      	ldr	r0, [pc, #20]	; (8006330 <CDC_Receive_FS+0x30>)
 800631c:	f7fe fe8f 	bl	800503e <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8006320:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	2000046c 	.word	0x2000046c
 8006330:	20000588 	.word	0x20000588

08006334 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	460b      	mov	r3, r1
 800633e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006344:	4b0d      	ldr	r3, [pc, #52]	; (800637c <CDC_Transmit_FS+0x48>)
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006356:	2301      	movs	r3, #1
 8006358:	e00b      	b.n	8006372 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	461a      	mov	r2, r3
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4806      	ldr	r0, [pc, #24]	; (800637c <CDC_Transmit_FS+0x48>)
 8006362:	f7fe fe11 	bl	8004f88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006366:	4805      	ldr	r0, [pc, #20]	; (800637c <CDC_Transmit_FS+0x48>)
 8006368:	f7fe fe3a 	bl	8004fe0 <USBD_CDC_TransmitPacket>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000588 	.word	0x20000588

08006380 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	4603      	mov	r3, r0
 8006388:	6039      	str	r1, [r7, #0]
 800638a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2212      	movs	r2, #18
 8006390:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000148 	.word	0x20000148

080063a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	6039      	str	r1, [r7, #0]
 80063ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2204      	movs	r2, #4
 80063b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80063b6:	4b03      	ldr	r3, [pc, #12]	; (80063c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	2000015c 	.word	0x2000015c

080063c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d105      	bne.n	80063e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063da:	683a      	ldr	r2, [r7, #0]
 80063dc:	4907      	ldr	r1, [pc, #28]	; (80063fc <USBD_FS_ProductStrDescriptor+0x34>)
 80063de:	4808      	ldr	r0, [pc, #32]	; (8006400 <USBD_FS_ProductStrDescriptor+0x38>)
 80063e0:	f7ff fe07 	bl	8005ff2 <USBD_GetString>
 80063e4:	e004      	b.n	80063f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	4904      	ldr	r1, [pc, #16]	; (80063fc <USBD_FS_ProductStrDescriptor+0x34>)
 80063ea:	4805      	ldr	r0, [pc, #20]	; (8006400 <USBD_FS_ProductStrDescriptor+0x38>)
 80063ec:	f7ff fe01 	bl	8005ff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80063f0:	4b02      	ldr	r3, [pc, #8]	; (80063fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	2000101c 	.word	0x2000101c
 8006400:	0800739c 	.word	0x0800739c

08006404 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	4904      	ldr	r1, [pc, #16]	; (8006424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006414:	4804      	ldr	r0, [pc, #16]	; (8006428 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006416:	f7ff fdec 	bl	8005ff2 <USBD_GetString>
  return USBD_StrDesc;
 800641a:	4b02      	ldr	r3, [pc, #8]	; (8006424 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	2000101c 	.word	0x2000101c
 8006428:	080073b4 	.word	0x080073b4

0800642c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	221a      	movs	r2, #26
 800643c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800643e:	f000 f843 	bl	80064c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006442:	4b02      	ldr	r3, [pc, #8]	; (800644c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000160 	.word	0x20000160

08006450 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	4603      	mov	r3, r0
 8006458:	6039      	str	r1, [r7, #0]
 800645a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	4907      	ldr	r1, [pc, #28]	; (8006484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006466:	4808      	ldr	r0, [pc, #32]	; (8006488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006468:	f7ff fdc3 	bl	8005ff2 <USBD_GetString>
 800646c:	e004      	b.n	8006478 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800646e:	683a      	ldr	r2, [r7, #0]
 8006470:	4904      	ldr	r1, [pc, #16]	; (8006484 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006472:	4805      	ldr	r0, [pc, #20]	; (8006488 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006474:	f7ff fdbd 	bl	8005ff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000101c 	.word	0x2000101c
 8006488:	080073c8 	.word	0x080073c8

0800648c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	4603      	mov	r3, r0
 8006494:	6039      	str	r1, [r7, #0]
 8006496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d105      	bne.n	80064aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	4907      	ldr	r1, [pc, #28]	; (80064c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064a2:	4808      	ldr	r0, [pc, #32]	; (80064c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064a4:	f7ff fda5 	bl	8005ff2 <USBD_GetString>
 80064a8:	e004      	b.n	80064b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	4904      	ldr	r1, [pc, #16]	; (80064c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80064b0:	f7ff fd9f 	bl	8005ff2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80064b4:	4b02      	ldr	r3, [pc, #8]	; (80064c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2000101c 	.word	0x2000101c
 80064c4:	080073d4 	.word	0x080073d4

080064c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <Get_SerialNum+0x44>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80064d4:	4b0e      	ldr	r3, [pc, #56]	; (8006510 <Get_SerialNum+0x48>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <Get_SerialNum+0x4c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4413      	add	r3, r2
 80064e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80064ee:	2208      	movs	r2, #8
 80064f0:	4909      	ldr	r1, [pc, #36]	; (8006518 <Get_SerialNum+0x50>)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f814 	bl	8006520 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80064f8:	2204      	movs	r2, #4
 80064fa:	4908      	ldr	r1, [pc, #32]	; (800651c <Get_SerialNum+0x54>)
 80064fc:	68b8      	ldr	r0, [r7, #8]
 80064fe:	f000 f80f 	bl	8006520 <IntToUnicode>
  }
}
 8006502:	bf00      	nop
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	1ffff7e8 	.word	0x1ffff7e8
 8006510:	1ffff7ec 	.word	0x1ffff7ec
 8006514:	1ffff7f0 	.word	0x1ffff7f0
 8006518:	20000162 	.word	0x20000162
 800651c:	20000172 	.word	0x20000172

08006520 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	4613      	mov	r3, r2
 800652c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
 8006536:	e027      	b.n	8006588 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	0f1b      	lsrs	r3, r3, #28
 800653c:	2b09      	cmp	r3, #9
 800653e:	d80b      	bhi.n	8006558 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	0f1b      	lsrs	r3, r3, #28
 8006544:	b2da      	uxtb	r2, r3
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	005b      	lsls	r3, r3, #1
 800654a:	4619      	mov	r1, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	440b      	add	r3, r1
 8006550:	3230      	adds	r2, #48	; 0x30
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	e00a      	b.n	800656e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	0f1b      	lsrs	r3, r3, #28
 800655c:	b2da      	uxtb	r2, r3
 800655e:	7dfb      	ldrb	r3, [r7, #23]
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4619      	mov	r1, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	440b      	add	r3, r1
 8006568:	3237      	adds	r2, #55	; 0x37
 800656a:	b2d2      	uxtb	r2, r2
 800656c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	3301      	adds	r3, #1
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	4413      	add	r3, r2
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	3301      	adds	r3, #1
 8006586:	75fb      	strb	r3, [r7, #23]
 8006588:	7dfa      	ldrb	r2, [r7, #23]
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3d3      	bcc.n	8006538 <IntToUnicode+0x18>
  }
}
 8006590:	bf00      	nop
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
	...

0800659c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <HAL_PCD_MspInit+0x34>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d10b      	bne.n	80065c6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <HAL_PCD_MspInit+0x38>)
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <HAL_PCD_MspInit+0x38>)
 80065b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80065b8:	61d3      	str	r3, [r2, #28]
 80065ba:	4b06      	ldr	r3, [pc, #24]	; (80065d4 <HAL_PCD_MspInit+0x38>)
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40005c00 	.word	0x40005c00
 80065d4:	40021000 	.word	0x40021000

080065d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80065ec:	4619      	mov	r1, r3
 80065ee:	4610      	mov	r0, r2
 80065f0:	f7fe fddb 	bl	80051aa <USBD_LL_SetupStage>
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	460b      	mov	r3, r1
 8006606:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800660e:	78fb      	ldrb	r3, [r7, #3]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	015b      	lsls	r3, r3, #5
 8006614:	4413      	add	r3, r2
 8006616:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	4619      	mov	r1, r3
 8006620:	f7fe fe0e 	bl	8005240 <USBD_LL_DataOutStage>
}
 8006624:	bf00      	nop
 8006626:	3708      	adds	r7, #8
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}

0800662c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	015b      	lsls	r3, r3, #5
 8006644:	4413      	add	r3, r2
 8006646:	333c      	adds	r3, #60	; 0x3c
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	78fb      	ldrb	r3, [r7, #3]
 800664c:	4619      	mov	r1, r3
 800664e:	f7fe fe68 	bl	8005322 <USBD_LL_DataInStage>
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe ff78 	bl	800555e <USBD_LL_SOF>
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800667e:	2301      	movs	r3, #1
 8006680:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d001      	beq.n	800668e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800668a:	f7f9 ffd5 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006694:	7bfa      	ldrb	r2, [r7, #15]
 8006696:	4611      	mov	r1, r2
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe ff28 	bl	80054ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fe fee1 	bl	800546c <USBD_LL_Reset>
}
 80066aa:	bf00      	nop
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe ff22 	bl	800550c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80066d0:	4b04      	ldr	r3, [pc, #16]	; (80066e4 <HAL_PCD_SuspendCallback+0x30>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	4a03      	ldr	r2, [pc, #12]	; (80066e4 <HAL_PCD_SuspendCallback+0x30>)
 80066d6:	f043 0306 	orr.w	r3, r3, #6
 80066da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80066dc:	bf00      	nop
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	e000ed00 	.word	0xe000ed00

080066e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe ff1c 	bl	8005534 <USBD_LL_Resume>
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800670c:	4a28      	ldr	r2, [pc, #160]	; (80067b0 <USBD_LL_Init+0xac>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <USBD_LL_Init+0xac>)
 8006718:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800671c:	4b24      	ldr	r3, [pc, #144]	; (80067b0 <USBD_LL_Init+0xac>)
 800671e:	4a25      	ldr	r2, [pc, #148]	; (80067b4 <USBD_LL_Init+0xb0>)
 8006720:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <USBD_LL_Init+0xac>)
 8006724:	2208      	movs	r2, #8
 8006726:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006728:	4b21      	ldr	r3, [pc, #132]	; (80067b0 <USBD_LL_Init+0xac>)
 800672a:	2202      	movs	r2, #2
 800672c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <USBD_LL_Init+0xac>)
 8006730:	2200      	movs	r2, #0
 8006732:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006734:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <USBD_LL_Init+0xac>)
 8006736:	2200      	movs	r2, #0
 8006738:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800673a:	4b1d      	ldr	r3, [pc, #116]	; (80067b0 <USBD_LL_Init+0xac>)
 800673c:	2200      	movs	r2, #0
 800673e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006740:	481b      	ldr	r0, [pc, #108]	; (80067b0 <USBD_LL_Init+0xac>)
 8006742:	f7fa fef6 	bl	8001532 <HAL_PCD_Init>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d001      	beq.n	8006750 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800674c:	f7f9 ff74 	bl	8000638 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006756:	2318      	movs	r3, #24
 8006758:	2200      	movs	r2, #0
 800675a:	2100      	movs	r1, #0
 800675c:	f7fb fd8e 	bl	800227c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006766:	2358      	movs	r3, #88	; 0x58
 8006768:	2200      	movs	r2, #0
 800676a:	2180      	movs	r1, #128	; 0x80
 800676c:	f7fb fd86 	bl	800227c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006776:	23c0      	movs	r3, #192	; 0xc0
 8006778:	2200      	movs	r2, #0
 800677a:	2181      	movs	r1, #129	; 0x81
 800677c:	f7fb fd7e 	bl	800227c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006786:	f44f 7388 	mov.w	r3, #272	; 0x110
 800678a:	2200      	movs	r2, #0
 800678c:	2101      	movs	r1, #1
 800678e:	f7fb fd75 	bl	800227c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006798:	f44f 7380 	mov.w	r3, #256	; 0x100
 800679c:	2200      	movs	r2, #0
 800679e:	2182      	movs	r1, #130	; 0x82
 80067a0:	f7fb fd6c 	bl	800227c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	2000121c 	.word	0x2000121c
 80067b4:	40005c00 	.word	0x40005c00

080067b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fa ff90 	bl	80016f4 <HAL_PCD_Start>
 80067d4:	4603      	mov	r3, r0
 80067d6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	4618      	mov	r0, r3
 80067dc:	f000 f948 	bl	8006a70 <USBD_Get_USB_Status>
 80067e0:	4603      	mov	r3, r0
 80067e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	4608      	mov	r0, r1
 80067f8:	4611      	mov	r1, r2
 80067fa:	461a      	mov	r2, r3
 80067fc:	4603      	mov	r3, r0
 80067fe:	70fb      	strb	r3, [r7, #3]
 8006800:	460b      	mov	r3, r1
 8006802:	70bb      	strb	r3, [r7, #2]
 8006804:	4613      	mov	r3, r2
 8006806:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800680c:	2300      	movs	r3, #0
 800680e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006816:	78bb      	ldrb	r3, [r7, #2]
 8006818:	883a      	ldrh	r2, [r7, #0]
 800681a:	78f9      	ldrb	r1, [r7, #3]
 800681c:	f7fb f8c3 	bl	80019a6 <HAL_PCD_EP_Open>
 8006820:	4603      	mov	r3, r0
 8006822:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f922 	bl	8006a70 <USBD_Get_USB_Status>
 800682c:	4603      	mov	r3, r0
 800682e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8006830:	7bbb      	ldrb	r3, [r7, #14]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	460b      	mov	r3, r1
 8006844:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006846:	2300      	movs	r3, #0
 8006848:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006854:	78fa      	ldrb	r2, [r7, #3]
 8006856:	4611      	mov	r1, r2
 8006858:	4618      	mov	r0, r3
 800685a:	f7fb f904 	bl	8001a66 <HAL_PCD_EP_Close>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	4618      	mov	r0, r3
 8006866:	f000 f903 	bl	8006a70 <USBD_Get_USB_Status>
 800686a:	4603      	mov	r3, r0
 800686c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800686e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	460b      	mov	r3, r1
 8006882:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006892:	78fa      	ldrb	r2, [r7, #3]
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f7fb f9ae 	bl	8001bf8 <HAL_PCD_EP_SetStall>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f8e4 	bl	8006a70 <USBD_Get_USB_Status>
 80068a8:	4603      	mov	r3, r0
 80068aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80068c6:	2300      	movs	r3, #0
 80068c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068d0:	78fa      	ldrb	r2, [r7, #3]
 80068d2:	4611      	mov	r1, r2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f7fb f9e9 	bl	8001cac <HAL_PCD_EP_ClrStall>
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80068de:	7bfb      	ldrb	r3, [r7, #15]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 f8c5 	bl	8006a70 <USBD_Get_USB_Status>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006906:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006908:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800690c:	2b00      	cmp	r3, #0
 800690e:	da08      	bge.n	8006922 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8006910:	78fb      	ldrb	r3, [r7, #3]
 8006912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	015b      	lsls	r3, r3, #5
 800691a:	4413      	add	r3, r2
 800691c:	332a      	adds	r3, #42	; 0x2a
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	e008      	b.n	8006934 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006922:	78fb      	ldrb	r3, [r7, #3]
 8006924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	015b      	lsls	r3, r3, #5
 800692c:	4413      	add	r3, r2
 800692e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006932:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	460b      	mov	r3, r1
 8006948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f7fa fffd 	bl	800195c <HAL_PCD_SetAddress>
 8006962:	4603      	mov	r3, r0
 8006964:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006966:	7bfb      	ldrb	r3, [r7, #15]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f881 	bl	8006a70 <USBD_Get_USB_Status>
 800696e:	4603      	mov	r3, r0
 8006970:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8006972:	7bbb      	ldrb	r3, [r7, #14]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	607a      	str	r2, [r7, #4]
 8006986:	461a      	mov	r2, r3
 8006988:	460b      	mov	r3, r1
 800698a:	72fb      	strb	r3, [r7, #11]
 800698c:	4613      	mov	r3, r2
 800698e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800699e:	893b      	ldrh	r3, [r7, #8]
 80069a0:	7af9      	ldrb	r1, [r7, #11]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	f7fb f8ef 	bl	8001b86 <HAL_PCD_EP_Transmit>
 80069a8:	4603      	mov	r3, r0
 80069aa:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 f85e 	bl	8006a70 <USBD_Get_USB_Status>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80069b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b086      	sub	sp, #24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	461a      	mov	r2, r3
 80069ce:	460b      	mov	r3, r1
 80069d0:	72fb      	strb	r3, [r7, #11]
 80069d2:	4613      	mov	r3, r2
 80069d4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80069d6:	2300      	movs	r3, #0
 80069d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80069da:	2300      	movs	r3, #0
 80069dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069e4:	893b      	ldrh	r3, [r7, #8]
 80069e6:	7af9      	ldrb	r1, [r7, #11]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	f7fb f87e 	bl	8001aea <HAL_PCD_EP_Receive>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 f83b 	bl	8006a70 <USBD_Get_USB_Status>
 80069fa:	4603      	mov	r3, r0
 80069fc:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80069fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fb f89d 	bl	8001b5e <HAL_PCD_EP_GetRxCount>
 8006a24:	4603      	mov	r3, r0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006a38:	4b02      	ldr	r3, [pc, #8]	; (8006a44 <USBD_static_malloc+0x14>)
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bc80      	pop	{r7}
 8006a42:	4770      	bx	lr
 8006a44:	20000204 	.word	0x20000204

08006a48 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	460b      	mov	r3, r1
 8006a64:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bc80      	pop	{r7}
 8006a6e:	4770      	bx	lr

08006a70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d817      	bhi.n	8006ab4 <USBD_Get_USB_Status+0x44>
 8006a84:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBD_Get_USB_Status+0x1c>)
 8006a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8a:	bf00      	nop
 8006a8c:	08006a9d 	.word	0x08006a9d
 8006a90:	08006aa3 	.word	0x08006aa3
 8006a94:	08006aa9 	.word	0x08006aa9
 8006a98:	08006aaf 	.word	0x08006aaf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa0:	e00b      	b.n	8006aba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	73fb      	strb	r3, [r7, #15]
    break;
 8006aa6:	e008      	b.n	8006aba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8006aac:	e005      	b.n	8006aba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab2:	e002      	b.n	8006aba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ab8:	bf00      	nop
  }
  return usb_status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <__errno>:
 8006ac8:	4b01      	ldr	r3, [pc, #4]	; (8006ad0 <__errno+0x8>)
 8006aca:	6818      	ldr	r0, [r3, #0]
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	2000017c 	.word	0x2000017c

08006ad4 <__libc_init_array>:
 8006ad4:	b570      	push	{r4, r5, r6, lr}
 8006ad6:	2500      	movs	r5, #0
 8006ad8:	4e0c      	ldr	r6, [pc, #48]	; (8006b0c <__libc_init_array+0x38>)
 8006ada:	4c0d      	ldr	r4, [pc, #52]	; (8006b10 <__libc_init_array+0x3c>)
 8006adc:	1ba4      	subs	r4, r4, r6
 8006ade:	10a4      	asrs	r4, r4, #2
 8006ae0:	42a5      	cmp	r5, r4
 8006ae2:	d109      	bne.n	8006af8 <__libc_init_array+0x24>
 8006ae4:	f000 fc34 	bl	8007350 <_init>
 8006ae8:	2500      	movs	r5, #0
 8006aea:	4e0a      	ldr	r6, [pc, #40]	; (8006b14 <__libc_init_array+0x40>)
 8006aec:	4c0a      	ldr	r4, [pc, #40]	; (8006b18 <__libc_init_array+0x44>)
 8006aee:	1ba4      	subs	r4, r4, r6
 8006af0:	10a4      	asrs	r4, r4, #2
 8006af2:	42a5      	cmp	r5, r4
 8006af4:	d105      	bne.n	8006b02 <__libc_init_array+0x2e>
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006afc:	4798      	blx	r3
 8006afe:	3501      	adds	r5, #1
 8006b00:	e7ee      	b.n	8006ae0 <__libc_init_array+0xc>
 8006b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006b06:	4798      	blx	r3
 8006b08:	3501      	adds	r5, #1
 8006b0a:	e7f2      	b.n	8006af2 <__libc_init_array+0x1e>
 8006b0c:	08007430 	.word	0x08007430
 8006b10:	08007430 	.word	0x08007430
 8006b14:	08007430 	.word	0x08007430
 8006b18:	08007434 	.word	0x08007434

08006b1c <memset>:
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	4402      	add	r2, r0
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d100      	bne.n	8006b26 <memset+0xa>
 8006b24:	4770      	bx	lr
 8006b26:	f803 1b01 	strb.w	r1, [r3], #1
 8006b2a:	e7f9      	b.n	8006b20 <memset+0x4>

08006b2c <siprintf>:
 8006b2c:	b40e      	push	{r1, r2, r3}
 8006b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b32:	b500      	push	{lr}
 8006b34:	b09c      	sub	sp, #112	; 0x70
 8006b36:	ab1d      	add	r3, sp, #116	; 0x74
 8006b38:	9002      	str	r0, [sp, #8]
 8006b3a:	9006      	str	r0, [sp, #24]
 8006b3c:	9107      	str	r1, [sp, #28]
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	4808      	ldr	r0, [pc, #32]	; (8006b64 <siprintf+0x38>)
 8006b42:	4909      	ldr	r1, [pc, #36]	; (8006b68 <siprintf+0x3c>)
 8006b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	a902      	add	r1, sp, #8
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	f000 f866 	bl	8006c20 <_svfiprintf_r>
 8006b54:	2200      	movs	r2, #0
 8006b56:	9b02      	ldr	r3, [sp, #8]
 8006b58:	701a      	strb	r2, [r3, #0]
 8006b5a:	b01c      	add	sp, #112	; 0x70
 8006b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b60:	b003      	add	sp, #12
 8006b62:	4770      	bx	lr
 8006b64:	2000017c 	.word	0x2000017c
 8006b68:	ffff0208 	.word	0xffff0208

08006b6c <__ssputs_r>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	688e      	ldr	r6, [r1, #8]
 8006b72:	4682      	mov	sl, r0
 8006b74:	429e      	cmp	r6, r3
 8006b76:	460c      	mov	r4, r1
 8006b78:	4690      	mov	r8, r2
 8006b7a:	4699      	mov	r9, r3
 8006b7c:	d837      	bhi.n	8006bee <__ssputs_r+0x82>
 8006b7e:	898a      	ldrh	r2, [r1, #12]
 8006b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b84:	d031      	beq.n	8006bea <__ssputs_r+0x7e>
 8006b86:	2302      	movs	r3, #2
 8006b88:	6825      	ldr	r5, [r4, #0]
 8006b8a:	6909      	ldr	r1, [r1, #16]
 8006b8c:	1a6f      	subs	r7, r5, r1
 8006b8e:	6965      	ldr	r5, [r4, #20]
 8006b90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b94:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b98:	f109 0301 	add.w	r3, r9, #1
 8006b9c:	443b      	add	r3, r7
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	bf38      	it	cc
 8006ba2:	461d      	movcc	r5, r3
 8006ba4:	0553      	lsls	r3, r2, #21
 8006ba6:	d530      	bpl.n	8006c0a <__ssputs_r+0x9e>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f000 fb37 	bl	800721c <_malloc_r>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	b950      	cbnz	r0, 8006bc8 <__ssputs_r+0x5c>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	f8ca 3000 	str.w	r3, [sl]
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc8:	463a      	mov	r2, r7
 8006bca:	6921      	ldr	r1, [r4, #16]
 8006bcc:	f000 fab6 	bl	800713c <memcpy>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	6126      	str	r6, [r4, #16]
 8006bde:	443e      	add	r6, r7
 8006be0:	6026      	str	r6, [r4, #0]
 8006be2:	464e      	mov	r6, r9
 8006be4:	6165      	str	r5, [r4, #20]
 8006be6:	1bed      	subs	r5, r5, r7
 8006be8:	60a5      	str	r5, [r4, #8]
 8006bea:	454e      	cmp	r6, r9
 8006bec:	d900      	bls.n	8006bf0 <__ssputs_r+0x84>
 8006bee:	464e      	mov	r6, r9
 8006bf0:	4632      	mov	r2, r6
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	f000 faac 	bl	8007152 <memmove>
 8006bfa:	68a3      	ldr	r3, [r4, #8]
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	1b9b      	subs	r3, r3, r6
 8006c00:	60a3      	str	r3, [r4, #8]
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	441e      	add	r6, r3
 8006c06:	6026      	str	r6, [r4, #0]
 8006c08:	e7dc      	b.n	8006bc4 <__ssputs_r+0x58>
 8006c0a:	462a      	mov	r2, r5
 8006c0c:	f000 fb60 	bl	80072d0 <_realloc_r>
 8006c10:	4606      	mov	r6, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d1e2      	bne.n	8006bdc <__ssputs_r+0x70>
 8006c16:	6921      	ldr	r1, [r4, #16]
 8006c18:	4650      	mov	r0, sl
 8006c1a:	f000 fab3 	bl	8007184 <_free_r>
 8006c1e:	e7c8      	b.n	8006bb2 <__ssputs_r+0x46>

08006c20 <_svfiprintf_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	461d      	mov	r5, r3
 8006c26:	898b      	ldrh	r3, [r1, #12]
 8006c28:	b09d      	sub	sp, #116	; 0x74
 8006c2a:	061f      	lsls	r7, r3, #24
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4616      	mov	r6, r2
 8006c32:	d50f      	bpl.n	8006c54 <_svfiprintf_r+0x34>
 8006c34:	690b      	ldr	r3, [r1, #16]
 8006c36:	b96b      	cbnz	r3, 8006c54 <_svfiprintf_r+0x34>
 8006c38:	2140      	movs	r1, #64	; 0x40
 8006c3a:	f000 faef 	bl	800721c <_malloc_r>
 8006c3e:	6020      	str	r0, [r4, #0]
 8006c40:	6120      	str	r0, [r4, #16]
 8006c42:	b928      	cbnz	r0, 8006c50 <_svfiprintf_r+0x30>
 8006c44:	230c      	movs	r3, #12
 8006c46:	f8c8 3000 	str.w	r3, [r8]
 8006c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4e:	e0c8      	b.n	8006de2 <_svfiprintf_r+0x1c2>
 8006c50:	2340      	movs	r3, #64	; 0x40
 8006c52:	6163      	str	r3, [r4, #20]
 8006c54:	2300      	movs	r3, #0
 8006c56:	9309      	str	r3, [sp, #36]	; 0x24
 8006c58:	2320      	movs	r3, #32
 8006c5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c5e:	2330      	movs	r3, #48	; 0x30
 8006c60:	f04f 0b01 	mov.w	fp, #1
 8006c64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c68:	9503      	str	r5, [sp, #12]
 8006c6a:	4637      	mov	r7, r6
 8006c6c:	463d      	mov	r5, r7
 8006c6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c72:	b10b      	cbz	r3, 8006c78 <_svfiprintf_r+0x58>
 8006c74:	2b25      	cmp	r3, #37	; 0x25
 8006c76:	d13e      	bne.n	8006cf6 <_svfiprintf_r+0xd6>
 8006c78:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c7c:	d00b      	beq.n	8006c96 <_svfiprintf_r+0x76>
 8006c7e:	4653      	mov	r3, sl
 8006c80:	4632      	mov	r2, r6
 8006c82:	4621      	mov	r1, r4
 8006c84:	4640      	mov	r0, r8
 8006c86:	f7ff ff71 	bl	8006b6c <__ssputs_r>
 8006c8a:	3001      	adds	r0, #1
 8006c8c:	f000 80a4 	beq.w	8006dd8 <_svfiprintf_r+0x1b8>
 8006c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c92:	4453      	add	r3, sl
 8006c94:	9309      	str	r3, [sp, #36]	; 0x24
 8006c96:	783b      	ldrb	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 809d 	beq.w	8006dd8 <_svfiprintf_r+0x1b8>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	9307      	str	r3, [sp, #28]
 8006cac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cb0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cb2:	462f      	mov	r7, r5
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cba:	4850      	ldr	r0, [pc, #320]	; (8006dfc <_svfiprintf_r+0x1dc>)
 8006cbc:	f000 fa30 	bl	8007120 <memchr>
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	b9d0      	cbnz	r0, 8006cfa <_svfiprintf_r+0xda>
 8006cc4:	06d9      	lsls	r1, r3, #27
 8006cc6:	bf44      	itt	mi
 8006cc8:	2220      	movmi	r2, #32
 8006cca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cce:	071a      	lsls	r2, r3, #28
 8006cd0:	bf44      	itt	mi
 8006cd2:	222b      	movmi	r2, #43	; 0x2b
 8006cd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cd8:	782a      	ldrb	r2, [r5, #0]
 8006cda:	2a2a      	cmp	r2, #42	; 0x2a
 8006cdc:	d015      	beq.n	8006d0a <_svfiprintf_r+0xea>
 8006cde:	462f      	mov	r7, r5
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	250a      	movs	r5, #10
 8006ce4:	9a07      	ldr	r2, [sp, #28]
 8006ce6:	4639      	mov	r1, r7
 8006ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cec:	3b30      	subs	r3, #48	; 0x30
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d94d      	bls.n	8006d8e <_svfiprintf_r+0x16e>
 8006cf2:	b1b8      	cbz	r0, 8006d24 <_svfiprintf_r+0x104>
 8006cf4:	e00f      	b.n	8006d16 <_svfiprintf_r+0xf6>
 8006cf6:	462f      	mov	r7, r5
 8006cf8:	e7b8      	b.n	8006c6c <_svfiprintf_r+0x4c>
 8006cfa:	4a40      	ldr	r2, [pc, #256]	; (8006dfc <_svfiprintf_r+0x1dc>)
 8006cfc:	463d      	mov	r5, r7
 8006cfe:	1a80      	subs	r0, r0, r2
 8006d00:	fa0b f000 	lsl.w	r0, fp, r0
 8006d04:	4318      	orrs	r0, r3
 8006d06:	9004      	str	r0, [sp, #16]
 8006d08:	e7d3      	b.n	8006cb2 <_svfiprintf_r+0x92>
 8006d0a:	9a03      	ldr	r2, [sp, #12]
 8006d0c:	1d11      	adds	r1, r2, #4
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	9103      	str	r1, [sp, #12]
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	db01      	blt.n	8006d1a <_svfiprintf_r+0xfa>
 8006d16:	9207      	str	r2, [sp, #28]
 8006d18:	e004      	b.n	8006d24 <_svfiprintf_r+0x104>
 8006d1a:	4252      	negs	r2, r2
 8006d1c:	f043 0302 	orr.w	r3, r3, #2
 8006d20:	9207      	str	r2, [sp, #28]
 8006d22:	9304      	str	r3, [sp, #16]
 8006d24:	783b      	ldrb	r3, [r7, #0]
 8006d26:	2b2e      	cmp	r3, #46	; 0x2e
 8006d28:	d10c      	bne.n	8006d44 <_svfiprintf_r+0x124>
 8006d2a:	787b      	ldrb	r3, [r7, #1]
 8006d2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2e:	d133      	bne.n	8006d98 <_svfiprintf_r+0x178>
 8006d30:	9b03      	ldr	r3, [sp, #12]
 8006d32:	3702      	adds	r7, #2
 8006d34:	1d1a      	adds	r2, r3, #4
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	9203      	str	r2, [sp, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfb8      	it	lt
 8006d3e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d42:	9305      	str	r3, [sp, #20]
 8006d44:	4d2e      	ldr	r5, [pc, #184]	; (8006e00 <_svfiprintf_r+0x1e0>)
 8006d46:	2203      	movs	r2, #3
 8006d48:	7839      	ldrb	r1, [r7, #0]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f9e8 	bl	8007120 <memchr>
 8006d50:	b138      	cbz	r0, 8006d62 <_svfiprintf_r+0x142>
 8006d52:	2340      	movs	r3, #64	; 0x40
 8006d54:	1b40      	subs	r0, r0, r5
 8006d56:	fa03 f000 	lsl.w	r0, r3, r0
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	3701      	adds	r7, #1
 8006d5e:	4303      	orrs	r3, r0
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	7839      	ldrb	r1, [r7, #0]
 8006d64:	2206      	movs	r2, #6
 8006d66:	4827      	ldr	r0, [pc, #156]	; (8006e04 <_svfiprintf_r+0x1e4>)
 8006d68:	1c7e      	adds	r6, r7, #1
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6e:	f000 f9d7 	bl	8007120 <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d038      	beq.n	8006de8 <_svfiprintf_r+0x1c8>
 8006d76:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <_svfiprintf_r+0x1e8>)
 8006d78:	bb13      	cbnz	r3, 8006dc0 <_svfiprintf_r+0x1a0>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	444b      	add	r3, r9
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	e76d      	b.n	8006c6a <_svfiprintf_r+0x4a>
 8006d8e:	fb05 3202 	mla	r2, r5, r2, r3
 8006d92:	2001      	movs	r0, #1
 8006d94:	460f      	mov	r7, r1
 8006d96:	e7a6      	b.n	8006ce6 <_svfiprintf_r+0xc6>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	250a      	movs	r5, #10
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	3701      	adds	r7, #1
 8006da0:	9305      	str	r3, [sp, #20]
 8006da2:	4638      	mov	r0, r7
 8006da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da8:	3a30      	subs	r2, #48	; 0x30
 8006daa:	2a09      	cmp	r2, #9
 8006dac:	d903      	bls.n	8006db6 <_svfiprintf_r+0x196>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0c8      	beq.n	8006d44 <_svfiprintf_r+0x124>
 8006db2:	9105      	str	r1, [sp, #20]
 8006db4:	e7c6      	b.n	8006d44 <_svfiprintf_r+0x124>
 8006db6:	fb05 2101 	mla	r1, r5, r1, r2
 8006dba:	2301      	movs	r3, #1
 8006dbc:	4607      	mov	r7, r0
 8006dbe:	e7f0      	b.n	8006da2 <_svfiprintf_r+0x182>
 8006dc0:	ab03      	add	r3, sp, #12
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	4622      	mov	r2, r4
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <_svfiprintf_r+0x1ec>)
 8006dc8:	a904      	add	r1, sp, #16
 8006dca:	4640      	mov	r0, r8
 8006dcc:	f3af 8000 	nop.w
 8006dd0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dd4:	4681      	mov	r9, r0
 8006dd6:	d1d6      	bne.n	8006d86 <_svfiprintf_r+0x166>
 8006dd8:	89a3      	ldrh	r3, [r4, #12]
 8006dda:	065b      	lsls	r3, r3, #25
 8006ddc:	f53f af35 	bmi.w	8006c4a <_svfiprintf_r+0x2a>
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	b01d      	add	sp, #116	; 0x74
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	4622      	mov	r2, r4
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <_svfiprintf_r+0x1ec>)
 8006df0:	a904      	add	r1, sp, #16
 8006df2:	4640      	mov	r0, r8
 8006df4:	f000 f882 	bl	8006efc <_printf_i>
 8006df8:	e7ea      	b.n	8006dd0 <_svfiprintf_r+0x1b0>
 8006dfa:	bf00      	nop
 8006dfc:	080073fc 	.word	0x080073fc
 8006e00:	08007402 	.word	0x08007402
 8006e04:	08007406 	.word	0x08007406
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	08006b6d 	.word	0x08006b6d

08006e10 <_printf_common>:
 8006e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e14:	4691      	mov	r9, r2
 8006e16:	461f      	mov	r7, r3
 8006e18:	688a      	ldr	r2, [r1, #8]
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	bfb8      	it	lt
 8006e22:	4613      	movlt	r3, r2
 8006e24:	f8c9 3000 	str.w	r3, [r9]
 8006e28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e2c:	460c      	mov	r4, r1
 8006e2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e32:	b112      	cbz	r2, 8006e3a <_printf_common+0x2a>
 8006e34:	3301      	adds	r3, #1
 8006e36:	f8c9 3000 	str.w	r3, [r9]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	0699      	lsls	r1, r3, #26
 8006e3e:	bf42      	ittt	mi
 8006e40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006e44:	3302      	addmi	r3, #2
 8006e46:	f8c9 3000 	strmi.w	r3, [r9]
 8006e4a:	6825      	ldr	r5, [r4, #0]
 8006e4c:	f015 0506 	ands.w	r5, r5, #6
 8006e50:	d107      	bne.n	8006e62 <_printf_common+0x52>
 8006e52:	f104 0a19 	add.w	sl, r4, #25
 8006e56:	68e3      	ldr	r3, [r4, #12]
 8006e58:	f8d9 2000 	ldr.w	r2, [r9]
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	42ab      	cmp	r3, r5
 8006e60:	dc29      	bgt.n	8006eb6 <_printf_common+0xa6>
 8006e62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	3300      	adds	r3, #0
 8006e6a:	bf18      	it	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	0692      	lsls	r2, r2, #26
 8006e70:	d42e      	bmi.n	8006ed0 <_printf_common+0xc0>
 8006e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e76:	4639      	mov	r1, r7
 8006e78:	4630      	mov	r0, r6
 8006e7a:	47c0      	blx	r8
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d021      	beq.n	8006ec4 <_printf_common+0xb4>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	68e5      	ldr	r5, [r4, #12]
 8006e84:	f003 0306 	and.w	r3, r3, #6
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	bf18      	it	ne
 8006e8c:	2500      	movne	r5, #0
 8006e8e:	f8d9 2000 	ldr.w	r2, [r9]
 8006e92:	f04f 0900 	mov.w	r9, #0
 8006e96:	bf08      	it	eq
 8006e98:	1aad      	subeq	r5, r5, r2
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	6922      	ldr	r2, [r4, #16]
 8006e9e:	bf08      	it	eq
 8006ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	bfc4      	itt	gt
 8006ea8:	1a9b      	subgt	r3, r3, r2
 8006eaa:	18ed      	addgt	r5, r5, r3
 8006eac:	341a      	adds	r4, #26
 8006eae:	454d      	cmp	r5, r9
 8006eb0:	d11a      	bne.n	8006ee8 <_printf_common+0xd8>
 8006eb2:	2000      	movs	r0, #0
 8006eb4:	e008      	b.n	8006ec8 <_printf_common+0xb8>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4652      	mov	r2, sl
 8006eba:	4639      	mov	r1, r7
 8006ebc:	4630      	mov	r0, r6
 8006ebe:	47c0      	blx	r8
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	d103      	bne.n	8006ecc <_printf_common+0xbc>
 8006ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ecc:	3501      	adds	r5, #1
 8006ece:	e7c2      	b.n	8006e56 <_printf_common+0x46>
 8006ed0:	2030      	movs	r0, #48	; 0x30
 8006ed2:	18e1      	adds	r1, r4, r3
 8006ed4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ed8:	1c5a      	adds	r2, r3, #1
 8006eda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ede:	4422      	add	r2, r4
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ee6:	e7c4      	b.n	8006e72 <_printf_common+0x62>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	4622      	mov	r2, r4
 8006eec:	4639      	mov	r1, r7
 8006eee:	4630      	mov	r0, r6
 8006ef0:	47c0      	blx	r8
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	d0e6      	beq.n	8006ec4 <_printf_common+0xb4>
 8006ef6:	f109 0901 	add.w	r9, r9, #1
 8006efa:	e7d8      	b.n	8006eae <_printf_common+0x9e>

08006efc <_printf_i>:
 8006efc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006f04:	460c      	mov	r4, r1
 8006f06:	7e09      	ldrb	r1, [r1, #24]
 8006f08:	b085      	sub	sp, #20
 8006f0a:	296e      	cmp	r1, #110	; 0x6e
 8006f0c:	4617      	mov	r7, r2
 8006f0e:	4606      	mov	r6, r0
 8006f10:	4698      	mov	r8, r3
 8006f12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f14:	f000 80b3 	beq.w	800707e <_printf_i+0x182>
 8006f18:	d822      	bhi.n	8006f60 <_printf_i+0x64>
 8006f1a:	2963      	cmp	r1, #99	; 0x63
 8006f1c:	d036      	beq.n	8006f8c <_printf_i+0x90>
 8006f1e:	d80a      	bhi.n	8006f36 <_printf_i+0x3a>
 8006f20:	2900      	cmp	r1, #0
 8006f22:	f000 80b9 	beq.w	8007098 <_printf_i+0x19c>
 8006f26:	2958      	cmp	r1, #88	; 0x58
 8006f28:	f000 8083 	beq.w	8007032 <_printf_i+0x136>
 8006f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006f34:	e032      	b.n	8006f9c <_printf_i+0xa0>
 8006f36:	2964      	cmp	r1, #100	; 0x64
 8006f38:	d001      	beq.n	8006f3e <_printf_i+0x42>
 8006f3a:	2969      	cmp	r1, #105	; 0x69
 8006f3c:	d1f6      	bne.n	8006f2c <_printf_i+0x30>
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	6813      	ldr	r3, [r2, #0]
 8006f42:	0605      	lsls	r5, r0, #24
 8006f44:	f103 0104 	add.w	r1, r3, #4
 8006f48:	d52a      	bpl.n	8006fa0 <_printf_i+0xa4>
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6011      	str	r1, [r2, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	da03      	bge.n	8006f5a <_printf_i+0x5e>
 8006f52:	222d      	movs	r2, #45	; 0x2d
 8006f54:	425b      	negs	r3, r3
 8006f56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f5a:	486f      	ldr	r0, [pc, #444]	; (8007118 <_printf_i+0x21c>)
 8006f5c:	220a      	movs	r2, #10
 8006f5e:	e039      	b.n	8006fd4 <_printf_i+0xd8>
 8006f60:	2973      	cmp	r1, #115	; 0x73
 8006f62:	f000 809d 	beq.w	80070a0 <_printf_i+0x1a4>
 8006f66:	d808      	bhi.n	8006f7a <_printf_i+0x7e>
 8006f68:	296f      	cmp	r1, #111	; 0x6f
 8006f6a:	d020      	beq.n	8006fae <_printf_i+0xb2>
 8006f6c:	2970      	cmp	r1, #112	; 0x70
 8006f6e:	d1dd      	bne.n	8006f2c <_printf_i+0x30>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	f043 0320 	orr.w	r3, r3, #32
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	e003      	b.n	8006f82 <_printf_i+0x86>
 8006f7a:	2975      	cmp	r1, #117	; 0x75
 8006f7c:	d017      	beq.n	8006fae <_printf_i+0xb2>
 8006f7e:	2978      	cmp	r1, #120	; 0x78
 8006f80:	d1d4      	bne.n	8006f2c <_printf_i+0x30>
 8006f82:	2378      	movs	r3, #120	; 0x78
 8006f84:	4865      	ldr	r0, [pc, #404]	; (800711c <_printf_i+0x220>)
 8006f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f8a:	e055      	b.n	8007038 <_printf_i+0x13c>
 8006f8c:	6813      	ldr	r3, [r2, #0]
 8006f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f92:	1d19      	adds	r1, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	6011      	str	r1, [r2, #0]
 8006f98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e08c      	b.n	80070ba <_printf_i+0x1be>
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006fa6:	6011      	str	r1, [r2, #0]
 8006fa8:	bf18      	it	ne
 8006faa:	b21b      	sxthne	r3, r3
 8006fac:	e7cf      	b.n	8006f4e <_printf_i+0x52>
 8006fae:	6813      	ldr	r3, [r2, #0]
 8006fb0:	6825      	ldr	r5, [r4, #0]
 8006fb2:	1d18      	adds	r0, r3, #4
 8006fb4:	6010      	str	r0, [r2, #0]
 8006fb6:	0628      	lsls	r0, r5, #24
 8006fb8:	d501      	bpl.n	8006fbe <_printf_i+0xc2>
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	e002      	b.n	8006fc4 <_printf_i+0xc8>
 8006fbe:	0668      	lsls	r0, r5, #25
 8006fc0:	d5fb      	bpl.n	8006fba <_printf_i+0xbe>
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	296f      	cmp	r1, #111	; 0x6f
 8006fc6:	bf14      	ite	ne
 8006fc8:	220a      	movne	r2, #10
 8006fca:	2208      	moveq	r2, #8
 8006fcc:	4852      	ldr	r0, [pc, #328]	; (8007118 <_printf_i+0x21c>)
 8006fce:	2100      	movs	r1, #0
 8006fd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fd4:	6865      	ldr	r5, [r4, #4]
 8006fd6:	2d00      	cmp	r5, #0
 8006fd8:	60a5      	str	r5, [r4, #8]
 8006fda:	f2c0 8095 	blt.w	8007108 <_printf_i+0x20c>
 8006fde:	6821      	ldr	r1, [r4, #0]
 8006fe0:	f021 0104 	bic.w	r1, r1, #4
 8006fe4:	6021      	str	r1, [r4, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d13d      	bne.n	8007066 <_printf_i+0x16a>
 8006fea:	2d00      	cmp	r5, #0
 8006fec:	f040 808e 	bne.w	800710c <_printf_i+0x210>
 8006ff0:	4665      	mov	r5, ip
 8006ff2:	2a08      	cmp	r2, #8
 8006ff4:	d10b      	bne.n	800700e <_printf_i+0x112>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	07db      	lsls	r3, r3, #31
 8006ffa:	d508      	bpl.n	800700e <_printf_i+0x112>
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	6862      	ldr	r2, [r4, #4]
 8007000:	429a      	cmp	r2, r3
 8007002:	bfde      	ittt	le
 8007004:	2330      	movle	r3, #48	; 0x30
 8007006:	f805 3c01 	strble.w	r3, [r5, #-1]
 800700a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800700e:	ebac 0305 	sub.w	r3, ip, r5
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	f8cd 8000 	str.w	r8, [sp]
 8007018:	463b      	mov	r3, r7
 800701a:	aa03      	add	r2, sp, #12
 800701c:	4621      	mov	r1, r4
 800701e:	4630      	mov	r0, r6
 8007020:	f7ff fef6 	bl	8006e10 <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	d14d      	bne.n	80070c4 <_printf_i+0x1c8>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	b005      	add	sp, #20
 800702e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007032:	4839      	ldr	r0, [pc, #228]	; (8007118 <_printf_i+0x21c>)
 8007034:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007038:	6813      	ldr	r3, [r2, #0]
 800703a:	6821      	ldr	r1, [r4, #0]
 800703c:	1d1d      	adds	r5, r3, #4
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6015      	str	r5, [r2, #0]
 8007042:	060a      	lsls	r2, r1, #24
 8007044:	d50b      	bpl.n	800705e <_printf_i+0x162>
 8007046:	07ca      	lsls	r2, r1, #31
 8007048:	bf44      	itt	mi
 800704a:	f041 0120 	orrmi.w	r1, r1, #32
 800704e:	6021      	strmi	r1, [r4, #0]
 8007050:	b91b      	cbnz	r3, 800705a <_printf_i+0x15e>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	f022 0220 	bic.w	r2, r2, #32
 8007058:	6022      	str	r2, [r4, #0]
 800705a:	2210      	movs	r2, #16
 800705c:	e7b7      	b.n	8006fce <_printf_i+0xd2>
 800705e:	064d      	lsls	r5, r1, #25
 8007060:	bf48      	it	mi
 8007062:	b29b      	uxthmi	r3, r3
 8007064:	e7ef      	b.n	8007046 <_printf_i+0x14a>
 8007066:	4665      	mov	r5, ip
 8007068:	fbb3 f1f2 	udiv	r1, r3, r2
 800706c:	fb02 3311 	mls	r3, r2, r1, r3
 8007070:	5cc3      	ldrb	r3, [r0, r3]
 8007072:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007076:	460b      	mov	r3, r1
 8007078:	2900      	cmp	r1, #0
 800707a:	d1f5      	bne.n	8007068 <_printf_i+0x16c>
 800707c:	e7b9      	b.n	8006ff2 <_printf_i+0xf6>
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	6825      	ldr	r5, [r4, #0]
 8007082:	1d18      	adds	r0, r3, #4
 8007084:	6961      	ldr	r1, [r4, #20]
 8007086:	6010      	str	r0, [r2, #0]
 8007088:	0628      	lsls	r0, r5, #24
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	d501      	bpl.n	8007092 <_printf_i+0x196>
 800708e:	6019      	str	r1, [r3, #0]
 8007090:	e002      	b.n	8007098 <_printf_i+0x19c>
 8007092:	066a      	lsls	r2, r5, #25
 8007094:	d5fb      	bpl.n	800708e <_printf_i+0x192>
 8007096:	8019      	strh	r1, [r3, #0]
 8007098:	2300      	movs	r3, #0
 800709a:	4665      	mov	r5, ip
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	e7b9      	b.n	8007014 <_printf_i+0x118>
 80070a0:	6813      	ldr	r3, [r2, #0]
 80070a2:	1d19      	adds	r1, r3, #4
 80070a4:	6011      	str	r1, [r2, #0]
 80070a6:	681d      	ldr	r5, [r3, #0]
 80070a8:	6862      	ldr	r2, [r4, #4]
 80070aa:	2100      	movs	r1, #0
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f837 	bl	8007120 <memchr>
 80070b2:	b108      	cbz	r0, 80070b8 <_printf_i+0x1bc>
 80070b4:	1b40      	subs	r0, r0, r5
 80070b6:	6060      	str	r0, [r4, #4]
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	6123      	str	r3, [r4, #16]
 80070bc:	2300      	movs	r3, #0
 80070be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c2:	e7a7      	b.n	8007014 <_printf_i+0x118>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	462a      	mov	r2, r5
 80070c8:	4639      	mov	r1, r7
 80070ca:	4630      	mov	r0, r6
 80070cc:	47c0      	blx	r8
 80070ce:	3001      	adds	r0, #1
 80070d0:	d0aa      	beq.n	8007028 <_printf_i+0x12c>
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	079b      	lsls	r3, r3, #30
 80070d6:	d413      	bmi.n	8007100 <_printf_i+0x204>
 80070d8:	68e0      	ldr	r0, [r4, #12]
 80070da:	9b03      	ldr	r3, [sp, #12]
 80070dc:	4298      	cmp	r0, r3
 80070de:	bfb8      	it	lt
 80070e0:	4618      	movlt	r0, r3
 80070e2:	e7a3      	b.n	800702c <_printf_i+0x130>
 80070e4:	2301      	movs	r3, #1
 80070e6:	464a      	mov	r2, r9
 80070e8:	4639      	mov	r1, r7
 80070ea:	4630      	mov	r0, r6
 80070ec:	47c0      	blx	r8
 80070ee:	3001      	adds	r0, #1
 80070f0:	d09a      	beq.n	8007028 <_printf_i+0x12c>
 80070f2:	3501      	adds	r5, #1
 80070f4:	68e3      	ldr	r3, [r4, #12]
 80070f6:	9a03      	ldr	r2, [sp, #12]
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	42ab      	cmp	r3, r5
 80070fc:	dcf2      	bgt.n	80070e4 <_printf_i+0x1e8>
 80070fe:	e7eb      	b.n	80070d8 <_printf_i+0x1dc>
 8007100:	2500      	movs	r5, #0
 8007102:	f104 0919 	add.w	r9, r4, #25
 8007106:	e7f5      	b.n	80070f4 <_printf_i+0x1f8>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1ac      	bne.n	8007066 <_printf_i+0x16a>
 800710c:	7803      	ldrb	r3, [r0, #0]
 800710e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007112:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007116:	e76c      	b.n	8006ff2 <_printf_i+0xf6>
 8007118:	0800740d 	.word	0x0800740d
 800711c:	0800741e 	.word	0x0800741e

08007120 <memchr>:
 8007120:	b510      	push	{r4, lr}
 8007122:	b2c9      	uxtb	r1, r1
 8007124:	4402      	add	r2, r0
 8007126:	4290      	cmp	r0, r2
 8007128:	4603      	mov	r3, r0
 800712a:	d101      	bne.n	8007130 <memchr+0x10>
 800712c:	2300      	movs	r3, #0
 800712e:	e003      	b.n	8007138 <memchr+0x18>
 8007130:	781c      	ldrb	r4, [r3, #0]
 8007132:	3001      	adds	r0, #1
 8007134:	428c      	cmp	r4, r1
 8007136:	d1f6      	bne.n	8007126 <memchr+0x6>
 8007138:	4618      	mov	r0, r3
 800713a:	bd10      	pop	{r4, pc}

0800713c <memcpy>:
 800713c:	b510      	push	{r4, lr}
 800713e:	1e43      	subs	r3, r0, #1
 8007140:	440a      	add	r2, r1
 8007142:	4291      	cmp	r1, r2
 8007144:	d100      	bne.n	8007148 <memcpy+0xc>
 8007146:	bd10      	pop	{r4, pc}
 8007148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800714c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007150:	e7f7      	b.n	8007142 <memcpy+0x6>

08007152 <memmove>:
 8007152:	4288      	cmp	r0, r1
 8007154:	b510      	push	{r4, lr}
 8007156:	eb01 0302 	add.w	r3, r1, r2
 800715a:	d807      	bhi.n	800716c <memmove+0x1a>
 800715c:	1e42      	subs	r2, r0, #1
 800715e:	4299      	cmp	r1, r3
 8007160:	d00a      	beq.n	8007178 <memmove+0x26>
 8007162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007166:	f802 4f01 	strb.w	r4, [r2, #1]!
 800716a:	e7f8      	b.n	800715e <memmove+0xc>
 800716c:	4283      	cmp	r3, r0
 800716e:	d9f5      	bls.n	800715c <memmove+0xa>
 8007170:	1881      	adds	r1, r0, r2
 8007172:	1ad2      	subs	r2, r2, r3
 8007174:	42d3      	cmn	r3, r2
 8007176:	d100      	bne.n	800717a <memmove+0x28>
 8007178:	bd10      	pop	{r4, pc}
 800717a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800717e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007182:	e7f7      	b.n	8007174 <memmove+0x22>

08007184 <_free_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4605      	mov	r5, r0
 8007188:	2900      	cmp	r1, #0
 800718a:	d043      	beq.n	8007214 <_free_r+0x90>
 800718c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007190:	1f0c      	subs	r4, r1, #4
 8007192:	2b00      	cmp	r3, #0
 8007194:	bfb8      	it	lt
 8007196:	18e4      	addlt	r4, r4, r3
 8007198:	f000 f8d0 	bl	800733c <__malloc_lock>
 800719c:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <_free_r+0x94>)
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	4610      	mov	r0, r2
 80071a2:	b933      	cbnz	r3, 80071b2 <_free_r+0x2e>
 80071a4:	6063      	str	r3, [r4, #4]
 80071a6:	6014      	str	r4, [r2, #0]
 80071a8:	4628      	mov	r0, r5
 80071aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ae:	f000 b8c6 	b.w	800733e <__malloc_unlock>
 80071b2:	42a3      	cmp	r3, r4
 80071b4:	d90b      	bls.n	80071ce <_free_r+0x4a>
 80071b6:	6821      	ldr	r1, [r4, #0]
 80071b8:	1862      	adds	r2, r4, r1
 80071ba:	4293      	cmp	r3, r2
 80071bc:	bf01      	itttt	eq
 80071be:	681a      	ldreq	r2, [r3, #0]
 80071c0:	685b      	ldreq	r3, [r3, #4]
 80071c2:	1852      	addeq	r2, r2, r1
 80071c4:	6022      	streq	r2, [r4, #0]
 80071c6:	6063      	str	r3, [r4, #4]
 80071c8:	6004      	str	r4, [r0, #0]
 80071ca:	e7ed      	b.n	80071a8 <_free_r+0x24>
 80071cc:	4613      	mov	r3, r2
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	b10a      	cbz	r2, 80071d6 <_free_r+0x52>
 80071d2:	42a2      	cmp	r2, r4
 80071d4:	d9fa      	bls.n	80071cc <_free_r+0x48>
 80071d6:	6819      	ldr	r1, [r3, #0]
 80071d8:	1858      	adds	r0, r3, r1
 80071da:	42a0      	cmp	r0, r4
 80071dc:	d10b      	bne.n	80071f6 <_free_r+0x72>
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	4401      	add	r1, r0
 80071e2:	1858      	adds	r0, r3, r1
 80071e4:	4282      	cmp	r2, r0
 80071e6:	6019      	str	r1, [r3, #0]
 80071e8:	d1de      	bne.n	80071a8 <_free_r+0x24>
 80071ea:	6810      	ldr	r0, [r2, #0]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	4401      	add	r1, r0
 80071f0:	6019      	str	r1, [r3, #0]
 80071f2:	605a      	str	r2, [r3, #4]
 80071f4:	e7d8      	b.n	80071a8 <_free_r+0x24>
 80071f6:	d902      	bls.n	80071fe <_free_r+0x7a>
 80071f8:	230c      	movs	r3, #12
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	e7d4      	b.n	80071a8 <_free_r+0x24>
 80071fe:	6820      	ldr	r0, [r4, #0]
 8007200:	1821      	adds	r1, r4, r0
 8007202:	428a      	cmp	r2, r1
 8007204:	bf01      	itttt	eq
 8007206:	6811      	ldreq	r1, [r2, #0]
 8007208:	6852      	ldreq	r2, [r2, #4]
 800720a:	1809      	addeq	r1, r1, r0
 800720c:	6021      	streq	r1, [r4, #0]
 800720e:	6062      	str	r2, [r4, #4]
 8007210:	605c      	str	r4, [r3, #4]
 8007212:	e7c9      	b.n	80071a8 <_free_r+0x24>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20000424 	.word	0x20000424

0800721c <_malloc_r>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	1ccd      	adds	r5, r1, #3
 8007220:	f025 0503 	bic.w	r5, r5, #3
 8007224:	3508      	adds	r5, #8
 8007226:	2d0c      	cmp	r5, #12
 8007228:	bf38      	it	cc
 800722a:	250c      	movcc	r5, #12
 800722c:	2d00      	cmp	r5, #0
 800722e:	4606      	mov	r6, r0
 8007230:	db01      	blt.n	8007236 <_malloc_r+0x1a>
 8007232:	42a9      	cmp	r1, r5
 8007234:	d903      	bls.n	800723e <_malloc_r+0x22>
 8007236:	230c      	movs	r3, #12
 8007238:	6033      	str	r3, [r6, #0]
 800723a:	2000      	movs	r0, #0
 800723c:	bd70      	pop	{r4, r5, r6, pc}
 800723e:	f000 f87d 	bl	800733c <__malloc_lock>
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <_malloc_r+0xac>)
 8007244:	6814      	ldr	r4, [r2, #0]
 8007246:	4621      	mov	r1, r4
 8007248:	b991      	cbnz	r1, 8007270 <_malloc_r+0x54>
 800724a:	4c20      	ldr	r4, [pc, #128]	; (80072cc <_malloc_r+0xb0>)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	b91b      	cbnz	r3, 8007258 <_malloc_r+0x3c>
 8007250:	4630      	mov	r0, r6
 8007252:	f000 f863 	bl	800731c <_sbrk_r>
 8007256:	6020      	str	r0, [r4, #0]
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f000 f85e 	bl	800731c <_sbrk_r>
 8007260:	1c43      	adds	r3, r0, #1
 8007262:	d124      	bne.n	80072ae <_malloc_r+0x92>
 8007264:	230c      	movs	r3, #12
 8007266:	4630      	mov	r0, r6
 8007268:	6033      	str	r3, [r6, #0]
 800726a:	f000 f868 	bl	800733e <__malloc_unlock>
 800726e:	e7e4      	b.n	800723a <_malloc_r+0x1e>
 8007270:	680b      	ldr	r3, [r1, #0]
 8007272:	1b5b      	subs	r3, r3, r5
 8007274:	d418      	bmi.n	80072a8 <_malloc_r+0x8c>
 8007276:	2b0b      	cmp	r3, #11
 8007278:	d90f      	bls.n	800729a <_malloc_r+0x7e>
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	18cc      	adds	r4, r1, r3
 800727e:	50cd      	str	r5, [r1, r3]
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f85c 	bl	800733e <__malloc_unlock>
 8007286:	f104 000b 	add.w	r0, r4, #11
 800728a:	1d23      	adds	r3, r4, #4
 800728c:	f020 0007 	bic.w	r0, r0, #7
 8007290:	1ac3      	subs	r3, r0, r3
 8007292:	d0d3      	beq.n	800723c <_malloc_r+0x20>
 8007294:	425a      	negs	r2, r3
 8007296:	50e2      	str	r2, [r4, r3]
 8007298:	e7d0      	b.n	800723c <_malloc_r+0x20>
 800729a:	684b      	ldr	r3, [r1, #4]
 800729c:	428c      	cmp	r4, r1
 800729e:	bf16      	itet	ne
 80072a0:	6063      	strne	r3, [r4, #4]
 80072a2:	6013      	streq	r3, [r2, #0]
 80072a4:	460c      	movne	r4, r1
 80072a6:	e7eb      	b.n	8007280 <_malloc_r+0x64>
 80072a8:	460c      	mov	r4, r1
 80072aa:	6849      	ldr	r1, [r1, #4]
 80072ac:	e7cc      	b.n	8007248 <_malloc_r+0x2c>
 80072ae:	1cc4      	adds	r4, r0, #3
 80072b0:	f024 0403 	bic.w	r4, r4, #3
 80072b4:	42a0      	cmp	r0, r4
 80072b6:	d005      	beq.n	80072c4 <_malloc_r+0xa8>
 80072b8:	1a21      	subs	r1, r4, r0
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f82e 	bl	800731c <_sbrk_r>
 80072c0:	3001      	adds	r0, #1
 80072c2:	d0cf      	beq.n	8007264 <_malloc_r+0x48>
 80072c4:	6025      	str	r5, [r4, #0]
 80072c6:	e7db      	b.n	8007280 <_malloc_r+0x64>
 80072c8:	20000424 	.word	0x20000424
 80072cc:	20000428 	.word	0x20000428

080072d0 <_realloc_r>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	4607      	mov	r7, r0
 80072d4:	4614      	mov	r4, r2
 80072d6:	460e      	mov	r6, r1
 80072d8:	b921      	cbnz	r1, 80072e4 <_realloc_r+0x14>
 80072da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072de:	4611      	mov	r1, r2
 80072e0:	f7ff bf9c 	b.w	800721c <_malloc_r>
 80072e4:	b922      	cbnz	r2, 80072f0 <_realloc_r+0x20>
 80072e6:	f7ff ff4d 	bl	8007184 <_free_r>
 80072ea:	4625      	mov	r5, r4
 80072ec:	4628      	mov	r0, r5
 80072ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072f0:	f000 f826 	bl	8007340 <_malloc_usable_size_r>
 80072f4:	42a0      	cmp	r0, r4
 80072f6:	d20f      	bcs.n	8007318 <_realloc_r+0x48>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4638      	mov	r0, r7
 80072fc:	f7ff ff8e 	bl	800721c <_malloc_r>
 8007300:	4605      	mov	r5, r0
 8007302:	2800      	cmp	r0, #0
 8007304:	d0f2      	beq.n	80072ec <_realloc_r+0x1c>
 8007306:	4631      	mov	r1, r6
 8007308:	4622      	mov	r2, r4
 800730a:	f7ff ff17 	bl	800713c <memcpy>
 800730e:	4631      	mov	r1, r6
 8007310:	4638      	mov	r0, r7
 8007312:	f7ff ff37 	bl	8007184 <_free_r>
 8007316:	e7e9      	b.n	80072ec <_realloc_r+0x1c>
 8007318:	4635      	mov	r5, r6
 800731a:	e7e7      	b.n	80072ec <_realloc_r+0x1c>

0800731c <_sbrk_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	2300      	movs	r3, #0
 8007320:	4c05      	ldr	r4, [pc, #20]	; (8007338 <_sbrk_r+0x1c>)
 8007322:	4605      	mov	r5, r0
 8007324:	4608      	mov	r0, r1
 8007326:	6023      	str	r3, [r4, #0]
 8007328:	f7f9 fad8 	bl	80008dc <_sbrk>
 800732c:	1c43      	adds	r3, r0, #1
 800732e:	d102      	bne.n	8007336 <_sbrk_r+0x1a>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	b103      	cbz	r3, 8007336 <_sbrk_r+0x1a>
 8007334:	602b      	str	r3, [r5, #0]
 8007336:	bd38      	pop	{r3, r4, r5, pc}
 8007338:	20001488 	.word	0x20001488

0800733c <__malloc_lock>:
 800733c:	4770      	bx	lr

0800733e <__malloc_unlock>:
 800733e:	4770      	bx	lr

08007340 <_malloc_usable_size_r>:
 8007340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007344:	1f18      	subs	r0, r3, #4
 8007346:	2b00      	cmp	r3, #0
 8007348:	bfbc      	itt	lt
 800734a:	580b      	ldrlt	r3, [r1, r0]
 800734c:	18c0      	addlt	r0, r0, r3
 800734e:	4770      	bx	lr

08007350 <_init>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	bf00      	nop
 8007354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007356:	bc08      	pop	{r3}
 8007358:	469e      	mov	lr, r3
 800735a:	4770      	bx	lr

0800735c <_fini>:
 800735c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800735e:	bf00      	nop
 8007360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007362:	bc08      	pop	{r3}
 8007364:	469e      	mov	lr, r3
 8007366:	4770      	bx	lr
